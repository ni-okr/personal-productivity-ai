/**
 * –ï–¥–∏–Ω—ã–π mock —Å–µ—Ä–≤–µ—Ä –¥–ª—è –≤—Å–µ—Ö integration —Ç–µ—Å—Ç–æ–≤
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ mock –¥–∞–Ω–Ω—ã–º–∏ –∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
 */

import { AISuggestion, Subscription, Task, User } from '@/types'

// Mock –¥–∞–Ω–Ω—ã–µ
let mockUsers: User[] = []
let mockTasks: Task[] = []
let mockAISuggestions: AISuggestion[] = []
let mockSubscriptions: Subscription[] = []

// –¢–µ–∫—É—â–∏–π –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
let currentMockUser: User | null = null

// –°–ª—É—à–∞—Ç–µ–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
const authStateListeners: Array<(user: User | null) => void> = []

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è mock —Å–µ—Ä–≤–µ—Ä–∞
 */
export function initializeMockServer() {
    console.log('üß™ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –µ–¥–∏–Ω–æ–≥–æ mock —Å–µ—Ä–≤–µ—Ä–∞')

    // –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    mockUsers = []
    mockTasks = []
    mockAISuggestions = []
    mockSubscriptions = []
    currentMockUser = null

    // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–µ–π –æ–± –æ—á–∏—Å—Ç–∫–µ
    authStateListeners.forEach(callback => callback(null))
}

/**
 * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è —Ç–µ—Å—Ç–æ–≤)
 */
export function setCurrentMockUser(user: User | null): void {
    console.log('üß™ MOCK –†–ï–ñ–ò–ú: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    currentMockUser = user
    notifyAuthStateChange(user)

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ useAppStore
    import('@/stores/useAppStore').then(({ useAppStore }) => {
        const store = useAppStore.getState()
        if (user) {
            store.setUser(user)
        } else {
            store.clearUserData()
        }
    })
}

/**
 * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 */
function notifyAuthStateChange(user: User | null) {
    currentMockUser = user
    authStateListeners.forEach(callback => callback(user))

    // –ù–ï –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ useAppStore –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    // –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –¥–µ–ª–∞—Ç—å—Å—è –≤—Ä—É—á–Ω—É—é –≤ —Ç–µ—Å—Ç–∞—Ö
}

/**
 * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 */
export function onAuthStateChange(callback: (user: User | null) => void) {
    authStateListeners.push(callback)
    return () => {
        const index = authStateListeners.indexOf(callback)
        if (index > -1) {
            authStateListeners.splice(index, 1)
        }
    }
}

// ==================== –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò ====================

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ mock –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export function createMockUser(email: string, password: string, name: string): User {
    const user: User = {
        id: `user-${Date.now()}`,
        email,
        name,
        avatarUrl: null,
        createdAt: new Date(),
        updatedAt: new Date()
    }

    mockUsers.push(user)
    return user
}

/**
 * –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
 */
export function findMockUser(email: string): User | null {
    return mockUsers.find(user => user.email === email) || null
}

/**
 * –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export function mockSignUp(email: string, password: string, name: string): { success: boolean; user?: User; error?: string; message?: string } {
    console.log('üß™ MOCK –†–ï–ñ–ò–ú: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Supabase')

    if (findMockUser(email)) {
        return {
            success: false,
            error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (mock)'
        }
    }

    const user = createMockUser(email, password, name)

    return {
        success: true,
        user: user,
        message: 'Mock —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞'
    }
}

export function mockSignIn(email: string, password: string): { success: boolean; user?: User; error?: string; message?: string } {
    console.log('üß™ MOCK –†–ï–ñ–ò–ú: –í—Ö–æ–¥ –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Supabase')

    const user = findMockUser(email)
    if (!user) {
        return {
            success: false,
            error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω (mock)'
        }
    }

    if (password === 'wrongpassword') {
        return {
            success: false,
            error: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å (mock)'
        }
    }

    user.updatedAt = new Date()

    return {
        success: true,
        user: user,
        message: 'Mock –≤—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω'
    }
}

export function mockSignOut(): { success: boolean; error?: string; message?: string } {
    console.log('üß™ MOCK –†–ï–ñ–ò–ú: –í—ã—Ö–æ–¥ –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Supabase')
    return {
        success: true,
        message: 'Mock –≤—ã—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω'
    }
}

export async function mockGetCurrentUser(): Promise<User | null> {
    console.log('üß™ MOCK –†–ï–ñ–ò–ú: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    return currentMockUser
}

/**
 * –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
 */
export function mockSignUpWithState(email: string, password: string, name: string): { success: boolean; user?: User; error?: string; message?: string } {
    const result = mockSignUp(email, password, name)
    if (result.success && result.user) {
        notifyAuthStateChange(result.user)
    }
    return result
}

export function mockSignInWithState(email: string, password: string): { success: boolean; user?: User; error?: string; message?: string } {
    const result = mockSignIn(email, password)
    if (result.success && result.user) {
        notifyAuthStateChange(result.user)
    }
    return result
}

export function mockSignOutWithState(): { success: boolean; error?: string; message?: string } {
    const result = mockSignOut()
    if (result.success) {
        currentMockUser = null
        notifyAuthStateChange(null)

        // –¢–∞–∫–∂–µ –æ—á–∏—â–∞–µ–º store
        import('@/stores/useAppStore').then(({ useAppStore }) => {
            const store = useAppStore.getState()
            store.clearUserData()
        })

        // –û—á–∏—â–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –≤ subscription-mock.ts
        const { clearMockSubscriptions } = require('@/lib/subscription-mock')
        if (clearMockSubscriptions) {
            clearMockSubscriptions()
        }
    }
    return result
}

// ==================== –ó–ê–î–ê–ß–ò ====================

/**
 * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ mock –∑–∞–¥–∞—á–∏
 */
export function addMockTask(task: Task): void {
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤
    mockTasks.push(task)

    // –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–∞—Å—Å–∏–≤ –≤ tasks-mock.ts
    import('@/lib/tasks-mock').then(({ addMockTask: addStaticMockTask }) => {
        addStaticMockTask(task)
    })
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export function mockGetTasks(userId: string): { success: boolean; tasks?: Task[]; error?: string } {
    console.log('üß™ MOCK –†–ï–ñ–ò–ú: –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Supabase')

    const userTasks = mockTasks.filter(task => task.userId === userId)

    return {
        success: true,
        tasks: userTasks
    }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
 */
export function mockCreateTask(userId: string, taskData: any): { success: boolean; task?: Task; error?: string } {
    console.log('üß™ MOCK –†–ï–ñ–ò–ú: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Supabase')

    const task: Task = {
        id: `task-${Date.now()}`,
        title: taskData.title,
        description: taskData.description || '',
        priority: taskData.priority || 'medium',
        status: 'todo',
        estimatedMinutes: taskData.estimatedMinutes || 30,
        actualMinutes: null,
        dueDate: taskData.dueDate || null,
        completedAt: null,
        source: 'manual',
        tags: taskData.tags || [],
        userId: userId,
        createdAt: new Date(),
        updatedAt: new Date()
    }

    mockTasks.push(task)

    return {
        success: true,
        task
    }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
 */
export function mockUpdateTask(taskId: string, updates: any): { success: boolean; task?: Task; error?: string } {
    console.log('üß™ MOCK –†–ï–ñ–ò–ú: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Supabase')

    const taskIndex = mockTasks.findIndex(task => task.id === taskId)
    if (taskIndex === -1) {
        return {
            success: false,
            error: '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
        }
    }

    const updatedTask = {
        ...mockTasks[taskIndex],
        ...updates,
        updatedAt: new Date()
    }

    mockTasks[taskIndex] = updatedTask

    return {
        success: true,
        task: updatedTask
    }
}

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
 */
export function mockDeleteTask(taskId: string): { success: boolean; error?: string } {
    console.log('üß™ MOCK –†–ï–ñ–ò–ú: –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Supabase')

    const taskIndex = mockTasks.findIndex(task => task.id === taskId)
    if (taskIndex === -1) {
        return {
            success: false,
            error: '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
        }
    }

    mockTasks.splice(taskIndex, 1)

    return {
        success: true
    }
}

/**
 * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
 */
export function mockCompleteTask(taskId: string, actualDuration?: number): { success: boolean; task?: Task; error?: string } {
    console.log('üß™ MOCK –†–ï–ñ–ò–ú: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Supabase')

    const taskIndex = mockTasks.findIndex(task => task.id === taskId)
    if (taskIndex === -1) {
        return {
            success: false,
            error: '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
        }
    }

    const updatedTask = {
        ...mockTasks[taskIndex],
        status: 'completed' as const,
        actualMinutes: actualDuration || null,
        completedAt: new Date(),
        updatedAt: new Date()
    }

    mockTasks[taskIndex] = updatedTask

    return {
        success: true,
        task: updatedTask
    }
}

// ==================== AI –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø ====================

/**
 * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ mock AI –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
 */
export function addMockAISuggestion(suggestion: AISuggestion): void {
    mockAISuggestions.push(suggestion)
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ AI –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export function mockGetAISuggestions(userId: string): { success: boolean; suggestions?: AISuggestion[]; error?: string } {
    console.log('üß™ MOCK –†–ï–ñ–ò–ú: –ü–æ–ª—É—á–µ–Ω–∏–µ AI –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Supabase')

    const userSuggestions = mockAISuggestions.filter(suggestion => suggestion.userId === userId)

    return {
        success: true,
        suggestions: userSuggestions
    }
}

// ==================== –ü–û–î–ü–ò–°–ö–ò ====================

/**
 * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ mock –ø–æ–¥–ø–∏—Å–∫–∏
 */
export function addMockSubscription(subscription: Subscription): void {
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    mockSubscriptions.push(subscription)

    // –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–∞—Å—Å–∏–≤ –≤ subscription-mock.ts (—ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π –º–∞—Å—Å–∏–≤)
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º require –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
    const { addMockSubscription: addStaticMockSubscription } = require('@/lib/subscription-mock')
    if (addStaticMockSubscription) {
        addStaticMockSubscription(subscription)
    }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export async function mockGetSubscription(userId: string): Promise<{ success: boolean; subscription?: Subscription; error?: string }> {
    console.log('üß™ MOCK –†–ï–ñ–ò–ú: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Supabase')

    // –ß–∏—Ç–∞–µ–º –∏–∑ subscription-mock.ts (–æ—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö)
    const { mockGetSubscription: getSubscriptionFromMock } = await import('@/lib/subscription-mock')
    const result = await getSubscriptionFromMock(userId)
    console.log('Unified mock server - getSubscription result:', result)
    return result
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
 */
export async function mockUpdateSubscription(subscriptionId: string, updates: Partial<Subscription>): Promise<{ success: boolean; subscription?: Subscription; error?: string }> {
    console.log('üß™ MOCK –†–ï–ñ–ò–ú: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Supabase')

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ subscription-mock.ts
    const { mockUpdateSubscription: updateSubscriptionFromMock } = await import('@/lib/subscription-mock')
    return await updateSubscriptionFromMock(subscriptionId, updates)
}

/**
 * –û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏
 */
export async function mockCancelSubscription(subscriptionId: string): Promise<{ success: boolean; subscription?: Subscription; error?: string }> {
    console.log('üß™ MOCK –†–ï–ñ–ò–ú: –û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Supabase')
    console.log('Unified mock server - subscription ID:', subscriptionId)

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ subscription-mock.ts
    const { mockCancelSubscription: cancelSubscriptionFromMock } = await import('@/lib/subscription-mock')
    const result = await cancelSubscriptionFromMock(subscriptionId)
    console.log('Unified mock server - cancel result:', result)

    // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    if (result.success && result.subscription) {
        const localIndex = mockSubscriptions.findIndex(sub => sub.id === subscriptionId)
        if (localIndex !== -1) {
            mockSubscriptions[localIndex] = result.subscription
        }
    }

    return result
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞–Ω–æ–≤ –ø–æ–¥–ø–∏—Å–æ–∫
 */
export function mockGetSubscriptionPlans(): { success: boolean; plans?: any[]; error?: string } {
    console.log('üß™ MOCK –†–ï–ñ–ò–ú: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞–Ω–æ–≤ –ø–æ–¥–ø–∏—Å–æ–∫ –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Supabase')

    const plans = [
        {
            id: 'free',
            name: 'Free',
            price: 0,
            currency: 'RUB',
            interval: 'month',
            features: ['–î–æ 50 –∑–∞–¥–∞—á', '–ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏', 'Email –ø–æ–¥–¥–µ—Ä–∂–∫–∞'],
            limits: {
                tasks: 50,
                aiRequests: 10,
                storage: 100
            },
            tinkoffPriceId: null,
            isActive: true,
            description: '–î–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö'
        },
        {
            id: 'premium',
            name: 'Premium',
            price: 999,
            currency: 'RUB',
            interval: 'month',
            features: ['–î–æ 500 –∑–∞–¥–∞—á', '–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏', '–ò–ò —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∞'],
            limits: {
                tasks: 500,
                aiRequests: 100,
                storage: 1000
            },
            tinkoffPriceId: 'premium-plan',
            isActive: true,
            description: '–î–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
        },
        {
            id: 'pro',
            name: 'Pro',
            price: 1999,
            currency: 'RUB',
            interval: 'month',
            features: ['–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏', '–í—Å–µ –º–µ—Ç—Ä–∏–∫–∏', '–ò–ò –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä'],
            limits: {
                tasks: -1,
                aiRequests: -1,
                storage: 10000
            },
            tinkoffPriceId: 'pro-plan',
            isActive: true,
            description: '–î–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤ –∏ –∫–æ–º–∞–Ω–¥'
        }
    ]

    return {
        success: true,
        plans
    }
}

// ==================== –ú–ï–¢–†–ò–ö–ò ====================

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 */
export function mockGetProductivityMetrics(userId: string): { success: boolean; metrics?: any; error?: string } {
    console.log('üß™ MOCK –†–ï–ñ–ò–ú: –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Supabase')

    const metrics = {
        focusTimeMinutes: 120,
        productivityScore: 75,
        tasksCompleted: 8,
        tasksCreated: 12,
        averageTaskDuration: 25,
        mostProductiveHour: 14,
        weeklyGoal: 100,
        weeklyProgress: 75
    }

    return {
        success: true,
        metrics
    }
}

// ==================== –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø ====================

/**
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á
 */
export function mockSyncTasks(userId: string): { success: boolean; tasks?: Task[]; error?: string } {
    console.log('üß™ MOCK –†–ï–ñ–ò–ú: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Supabase')

    const userTasks = mockTasks.filter(task => task.userId === userId)

    return {
        success: true,
        tasks: userTasks
    }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–¥–∞—á
 */
export function mockGetTasksStats(userId: string): { success: boolean; stats?: any; error?: string } {
    console.log('üß™ MOCK –†–ï–ñ–ò–ú: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–¥–∞—á –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Supabase')

    const userTasks = mockTasks.filter(task => task.userId === userId)
    const completedTasks = userTasks.filter(task => task.status === 'completed')

    const stats = {
        total: userTasks.length,
        completed: completedTasks.length,
        pending: userTasks.length - completedTasks.length,
        completionRate: userTasks.length > 0 ? (completedTasks.length / userTasks.length) * 100 : 0
    }

    return {
        success: true,
        stats
    }
}

// ==================== –≠–ö–°–ü–û–†–¢ ====================

export default {
    initializeMockServer,
    onAuthStateChange,
    setCurrentMockUser,

    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    createMockUser,
    findMockUser,
    mockSignUp,
    mockSignIn,
    mockSignOut,
    mockGetCurrentUser,
    mockSignUpWithState,
    mockSignInWithState,
    mockSignOutWithState,

    // –ó–∞–¥–∞—á–∏
    addMockTask,
    mockGetTasks,
    mockCreateTask,
    mockUpdateTask,
    mockDeleteTask,
    mockCompleteTask,

    // AI –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    addMockAISuggestion,
    mockGetAISuggestions,

    // –ü–æ–¥–ø–∏—Å–∫–∏
    addMockSubscription,
    mockGetSubscription,
    mockUpdateSubscription,
    mockCancelSubscription,
    mockGetSubscriptionPlans,

    // –ú–µ—Ç—Ä–∏–∫–∏
    mockGetProductivityMetrics,

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
    mockSyncTasks,
    mockGetTasksStats
}
