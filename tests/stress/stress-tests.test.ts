/**
 * üí• –°–¢–†–ï–°–°-–¢–ï–°–¢–´
 * –ü–æ–∫—Ä—ã—Ç–∏–µ: —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –Ω–∞–≥—Ä—É–∑–∫–∏, –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è, –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å
 */

import { test, expect, Page } from '@playwright/test'

describe('üî• Extreme Load Stress Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –≤—ã–¥–µ—Ä–∂–∏–≤–∞—Ç—å —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É', async ({ page }) => {
    await page.goto('/')
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏–π
    const actionCount = 100
    const startTime = Date.now()
    
    for (let i = 0; i < actionCount; i++) {
      await page.fill('[data-testid="email-input"]', `test${i}@example.com`)
      await page.click('[data-testid="subscribe-button"]')
      await page.waitForTimeout(10) // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
    }
    
    const endTime = Date.now()
    const totalTime = endTime - startTime
    
    // –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ–ª–∂–Ω—ã –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è
    expect(totalTime).toBeLessThan(30000) // 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è 100 –¥–µ–π—Å—Ç–≤–∏–π
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ —Å–ª–æ–º–∞–ª–∞—Å—å
    await expect(page.locator('h1')).toBeVisible()
    await expect(page.locator('[data-testid="email-input"]')).toBeVisible()
    await expect(page.locator('[data-testid="subscribe-button"]')).toBeVisible()
  })

  test('–¥–æ–ª–∂–µ–Ω –≤—ã–¥–µ—Ä–∂–∏–≤–∞—Ç—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã', async ({ page }) => {
    await page.goto('/')
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    const requestCount = 50
    const promises = []
    
    for (let i = 0; i < requestCount; i++) {
      const promise = page.request.get('/api/test')
      promises.push(promise)
    }
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    const responses = await Promise.all(promises)
    
    // –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º–∏
    const successResponses = responses.filter(response => response.status() === 200)
    expect(successResponses.length).toBeGreaterThan(responses.length * 0.7) // 70% —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
  })

  test('–¥–æ–ª–∂–µ–Ω –≤—ã–¥–µ—Ä–∂–∏–≤–∞—Ç—å —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ –ø–∞–º—è—Ç—å', async ({ page }) => {
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
      localStorage.setItem('auth-token', 'mock-token')
      localStorage.setItem('user', JSON.stringify({
        id: 'user-1',
        email: 'test@example.com',
        name: 'Test User',
        subscription: 'free'
      }))
    })
    
    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // –î–æ–±–∞–≤–ª—è–µ–º —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á
    const taskCount = 500
    for (let i = 0; i < taskCount; i++) {
      await page.click('[data-testid="add-task-button"]')
      await page.fill('[data-testid="task-title"]', `Task ${i}`)
      await page.fill('[data-testid="task-description"]', `Description for task ${i}`)
      await page.click('[data-testid="save-task-button"]')
      await page.waitForTimeout(5) // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ —Å–ª–æ–º–∞–ª–∞—Å—å
    await expect(page.locator('[data-testid="planner-content"]')).toBeVisible()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
    const memoryUsage = await page.evaluate(() => {
      if ('memory' in performance) {
        return (performance as any).memory.usedJSHeapSize
      }
      return 0
    })
    
    // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å —Ä–∞–∑—É–º–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã
    expect(memoryUsage).toBeLessThan(500 * 1024 * 1024) // 500MB
  })
})

describe('üåä Burst Load Stress Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –≤—ã–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤—Å–ø–ª–µ—Å–∫–∏ –Ω–∞–≥—Ä—É–∑–∫–∏', async ({ page }) => {
    await page.goto('/')
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—Å–ø–ª–µ—Å–∫–∏ –Ω–∞–≥—Ä—É–∑–∫–∏
    const burstCount = 5
    const actionsPerBurst = 20
    
    for (let burst = 0; burst < burstCount; burst++) {
      const promises = []
      
      // –°–æ–∑–¥–∞–µ–º –≤—Å–ø–ª–µ—Å–∫ –¥–µ–π—Å—Ç–≤–∏–π
      for (let i = 0; i < actionsPerBurst; i++) {
        const promise = page.fill('[data-testid="email-input"]', `test${burst}${i}@example.com`)
          .then(() => page.click('[data-testid="subscribe-button"]'))
        promises.push(promise)
      }
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
      await Promise.all(promises)
      
      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –≤—Å–ø–ª–µ—Å–∫–∞–º–∏
      await page.waitForTimeout(100)
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ —Å–ª–æ–º–∞–ª–∞—Å—å
    await expect(page.locator('h1')).toBeVisible()
    await expect(page.locator('[data-testid="email-input"]')).toBeVisible()
    await expect(page.locator('[data-testid="subscribe-button"]')).toBeVisible()
  })

  test('–¥–æ–ª–∂–µ–Ω –≤—ã–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤—Å–ø–ª–µ—Å–∫–∏ API –∑–∞–ø—Ä–æ—Å–æ–≤', async ({ page }) => {
    await page.goto('/')
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—Å–ø–ª–µ—Å–∫–∏ API –∑–∞–ø—Ä–æ—Å–æ–≤
    const burstCount = 3
    const requestsPerBurst = 30
    
    for (let burst = 0; burst < burstCount; burst++) {
      const promises = []
      
      // –°–æ–∑–¥–∞–µ–º –≤—Å–ø–ª–µ—Å–∫ API –∑–∞–ø—Ä–æ—Å–æ–≤
      for (let i = 0; i < requestsPerBurst; i++) {
        const promise = page.request.get('/api/test')
        promises.push(promise)
      }
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
      const responses = await Promise.all(promises)
      
      // –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º–∏
      const successResponses = responses.filter(response => response.status() === 200)
      expect(successResponses.length).toBeGreaterThan(responses.length * 0.8) // 80% —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
      
      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –≤—Å–ø–ª–µ—Å–∫–∞–º–∏
      await page.waitForTimeout(200)
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –≤—ã–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤—Å–ø–ª–µ—Å–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏', async ({ page }) => {
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—Å–ø–ª–µ—Å–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    const burstCount = 10
    const navigationsPerBurst = 5
    
    for (let burst = 0; burst < burstCount; burst++) {
      const promises = []
      
      // –°–æ–∑–¥–∞–µ–º –≤—Å–ø–ª–µ—Å–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
      for (let i = 0; i < navigationsPerBurst; i++) {
        const promise = page.goto('/').then(() => page.waitForLoadState('networkidle'))
        promises.push(promise)
      }
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
      await Promise.all(promises)
      
      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –≤—Å–ø–ª–µ—Å–∫–∞–º–∏
      await page.waitForTimeout(100)
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
    await expect(page.locator('h1')).toBeVisible()
  })
})

describe('üíæ Data Stress Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –±–æ–ª—å—à–∏–µ –¥–∞–Ω–Ω—ã–µ', async ({ page }) => {
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
      localStorage.setItem('auth-token', 'mock-token')
      localStorage.setItem('user', JSON.stringify({
        id: 'user-1',
        email: 'test@example.com',
        name: 'Test User',
        subscription: 'free'
      }))
    })
    
    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É —Å —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –±–æ–ª—å—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    await page.click('[data-testid="add-task-button"]')
    
    const extremeTitle = 'A'.repeat(10000) // 10KB –∑–∞–≥–æ–ª–æ–≤–æ–∫
    const extremeDescription = 'B'.repeat(100000) // 100KB –æ–ø–∏—Å–∞–Ω–∏–µ
    
    await page.fill('[data-testid="task-title"]', extremeTitle)
    await page.fill('[data-testid="task-description"]', extremeDescription)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–æ—Ä–º–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
    const titleValue = await page.locator('[data-testid="task-title"]').inputValue()
    const descriptionValue = await page.locator('[data-testid="task-description"]').inputValue()
    
    expect(titleValue).toBe(extremeTitle)
    expect(descriptionValue).toBe(extremeDescription)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ —Å–ª–æ–º–∞–ª–∞—Å—å
    await expect(page.locator('[data-testid="task-modal"]')).toBeVisible()
  })

  test('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –º–Ω–æ–≥–æ –∑–∞–¥–∞—á', async ({ page }) => {
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
      localStorage.setItem('auth-token', 'mock-token')
      localStorage.setItem('user', JSON.stringify({
        id: 'user-1',
        email: 'test@example.com',
        name: 'Test User',
        subscription: 'free'
      }))
    })
    
    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // –î–æ–±–∞–≤–ª—è–µ–º —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –º–Ω–æ–≥–æ –∑–∞–¥–∞—á
    const taskCount = 1000
    for (let i = 0; i < taskCount; i++) {
      await page.click('[data-testid="add-task-button"]')
      await page.fill('[data-testid="task-title"]', `Task ${i}`)
      await page.click('[data-testid="save-task-button"]')
      await page.waitForTimeout(1) // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ —Å–ª–æ–º–∞–ª–∞—Å—å
    await expect(page.locator('[data-testid="planner-content"]')).toBeVisible()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    const taskCards = page.locator('.task-card')
    const loadedTaskCount = await taskCards.count()
    expect(loadedTaskCount).toBeGreaterThan(0)
  })

  test('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –±–æ–ª—å—à–∏–µ —Ñ–æ—Ä–º—ã', async ({ page }) => {
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
      localStorage.setItem('auth-token', 'mock-token')
      localStorage.setItem('user', JSON.stringify({
        id: 'user-1',
        email: 'test@example.com',
        name: 'Test User',
        subscription: 'free'
      }))
    })
    
    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // –°–æ–∑–¥–∞–µ–º —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –±–æ–ª—å—à—É—é —Ñ–æ—Ä–º—É
    await page.click('[data-testid="add-task-button"]')
    
    const extremeTitle = 'A'.repeat(50000) // 50KB –∑–∞–≥–æ–ª–æ–≤–æ–∫
    const extremeDescription = 'B'.repeat(500000) // 500KB –æ–ø–∏—Å–∞–Ω–∏–µ
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –ø–æ —á–∞—Å—Ç—è–º
    const chunkSize = 1000
    for (let i = 0; i < extremeTitle.length; i += chunkSize) {
      const chunk = extremeTitle.slice(i, i + chunkSize)
      await page.fill('[data-testid="task-title"]', chunk)
      await page.waitForTimeout(10)
    }
    
    for (let i = 0; i < extremeDescription.length; i += chunkSize) {
      const chunk = extremeDescription.slice(i, i + chunkSize)
      await page.fill('[data-testid="task-description"]', chunk)
      await page.waitForTimeout(10)
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–æ—Ä–º–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
    const titleValue = await page.locator('[data-testid="task-title"]').inputValue()
    const descriptionValue = await page.locator('[data-testid="task-description"]').inputValue()
    
    expect(titleValue).toBe(extremeTitle)
    expect(descriptionValue).toBe(extremeDescription)
  })
})

describe('üåê Network Stress Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –≤—ã–¥–µ—Ä–∂–∏–≤–∞—Ç—å —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –º–µ–¥–ª–µ–Ω–Ω—É—é —Å–µ—Ç—å', async ({ page }) => {
    // –°–∏–º—É–ª–∏—Ä—É–µ–º —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –º–µ–¥–ª–µ–Ω–Ω—É—é —Å–µ—Ç—å
    await page.route('**/*', route => {
      setTimeout(() => route.continue(), 5000) // 5 —Å–µ–∫—É–Ω–¥ –∑–∞–¥–µ—Ä–∂–∫–∏
    })
    
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –º–µ–¥–ª–µ–Ω–Ω—É—é —Å–µ—Ç—å
    const startTime = Date.now()
    await page.waitForLoadState('networkidle')
    const loadTime = Date.now() - startTime
    
    // –°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 30 —Å–µ–∫—É–Ω–¥ –¥–∞–∂–µ –ø—Ä–∏ –æ—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω–æ–π —Å–µ—Ç–∏
    expect(loadTime).toBeLessThan(30000)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    await expect(page.locator('h1')).toBeVisible()
    await expect(page.locator('[data-testid="email-input"]')).toBeVisible()
    await expect(page.locator('[data-testid="subscribe-button"]')).toBeVisible()
  })

  test('–¥–æ–ª–∂–µ–Ω –≤—ã–¥–µ—Ä–∂–∏–≤–∞—Ç—å —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—É—é —Å–µ—Ç—å', async ({ page }) => {
    // –°–∏–º—É–ª–∏—Ä—É–µ–º —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—É—é —Å–µ—Ç—å
    let requestCount = 0
    await page.route('**/*', route => {
      requestCount++
      if (requestCount % 2 === 0) {
        // –ö–∞–∂–¥—ã–π –≤—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—è–µ–º
        route.abort()
      } else {
        // –û—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∑–∞–¥–µ—Ä–∂–∏–≤–∞–µ–º
        setTimeout(() => route.continue(), 2000)
      }
    })
    
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—É—é —Å–µ—Ç—å
    await expect(page.locator('h1')).toBeVisible()
    await expect(page.locator('[data-testid="email-input"]')).toBeVisible()
    await expect(page.locator('[data-testid="subscribe-button"]')).toBeVisible()
  })

  test('–¥–æ–ª–∂–µ–Ω –≤—ã–¥–µ—Ä–∂–∏–≤–∞—Ç—å —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ API', async ({ page }) => {
    await page.goto('/')
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ API –∑–∞–ø—Ä–æ—Å–æ–≤
    const requestCount = 200
    const promises = []
    
    for (let i = 0; i < requestCount; i++) {
      const promise = page.request.get('/api/test')
      promises.push(promise)
    }
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    const responses = await Promise.all(promises)
    
    // –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º–∏
    const successResponses = responses.filter(response => response.status() === 200)
    expect(successResponses.length).toBeGreaterThan(responses.length * 0.6) // 60% —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
  })
})

describe('üí• Failure Stress Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è –ø–æ—Å–ª–µ —Å–±–æ–µ–≤', async ({ page }) => {
    await page.goto('/')
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–±–æ–∏
    let requestCount = 0
    await page.route('**/*', route => {
      requestCount++
      if (requestCount % 5 === 0) {
        // –ö–∞–∂–¥—ã–π –ø—è—Ç—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—è–µ–º
        route.abort()
      } else {
        route.continue()
      }
    })
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ —Å–±–æ–∏
    for (let i = 0; i < 20; i++) {
      try {
        await page.fill('[data-testid="email-input"]', `test${i}@example.com`)
        await page.click('[data-testid="subscribe-button"]')
        await page.waitForTimeout(100)
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∞—Å—å
    await expect(page.locator('h1')).toBeVisible()
    await expect(page.locator('[data-testid="email-input"]')).toBeVisible()
    await expect(page.locator('[data-testid="subscribe-button"]')).toBeVisible()
  })

  test('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏ gracefully', async ({ page }) => {
    await page.goto('/')
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
    await page.route('**/*', route => {
      if (Math.random() < 0.3) {
        // 30% –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç–∫–ª–æ–Ω—è–µ–º
        route.abort()
      } else {
        route.continue()
      }
    })
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è
    for (let i = 0; i < 10; i++) {
      try {
        await page.fill('[data-testid="email-input"]', `test${i}@example.com`)
        await page.click('[data-testid="subscribe-button"]')
        await page.waitForTimeout(100)
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ —Å–ª–æ–º–∞–ª–∞—Å—å
    await expect(page.locator('h1')).toBeVisible()
    await expect(page.locator('[data-testid="email-input"]')).toBeVisible()
    await expect(page.locator('[data-testid="subscribe-button"]')).toBeVisible()
  })

  test('–¥–æ–ª–∂–µ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏ —á–∞—Å—Ç–∏—á–Ω—ã—Ö —Å–±–æ—è—Ö', async ({ page }) => {
    await page.goto('/')
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ —Å–±–æ–∏
    await page.route('**/*', route => {
      if (route.request().url().includes('api')) {
        // API –∑–∞–ø—Ä–æ—Å—ã –æ—Ç–∫–ª–æ–Ω—è–µ–º
        route.abort()
      } else {
        // –û—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –≤—ã–ø–æ–ª–Ω—è–µ–º
        route.continue()
      }
    })
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è
    await page.fill('[data-testid="email-input"]', 'test@example.com')
    await page.click('[data-testid="subscribe-button"]')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ —Å–ª–æ–º–∞–ª–∞—Å—å
    await expect(page.locator('h1')).toBeVisible()
    await expect(page.locator('[data-testid="email-input"]')).toBeVisible()
    await expect(page.locator('[data-testid="subscribe-button"]')).toBeVisible()
  })
})

describe('‚ö° Performance Stress Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π', async ({ page }) => {
    await page.goto('/')
    
    // –ò–∑–º–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π
    const startTime = Date.now()
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏–π
    for (let i = 0; i < 50; i++) {
      await page.fill('[data-testid="email-input"]', `test${i}@example.com`)
      await page.click('[data-testid="subscribe-button"]')
      await page.waitForTimeout(10)
    }
    
    const endTime = Date.now()
    const totalTime = endTime - startTime
    
    // –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ–ª–∂–Ω—ã –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è
    expect(totalTime).toBeLessThan(15000) // 15 —Å–µ–∫—É–Ω–¥ –¥–ª—è 50 –¥–µ–π—Å—Ç–≤–∏–π
  })

  test('–¥–æ–ª–∂–µ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', async ({ page }) => {
    await page.goto('/')
    
    // –ò–∑–º–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
    const performanceMeasurements = []
    
    for (let i = 0; i < 10; i++) {
      const startTime = Date.now()
      await page.reload()
      await page.waitForLoadState('networkidle')
      const endTime = Date.now()
      
      performanceMeasurements.push(endTime - startTime)
    }
    
    // –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω–æ–π
    const averageTime = performanceMeasurements.reduce((a, b) => a + b, 0) / performanceMeasurements.length
    const maxTime = Math.max(...performanceMeasurements)
    const minTime = Math.min(...performanceMeasurements)
    
    // –†–∞–∑–±—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–º
    expect(maxTime - minTime).toBeLessThan(averageTime * 0.8) // 80% –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
  })

  test('–¥–æ–ª–∂–µ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –±—ã—Å—Ç—Ä—ã–π –æ—Ç–∫–ª–∏–∫ –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π', async ({ page }) => {
    await page.goto('/')
    
    // –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π
    const responseTimes = []
    
    for (let i = 0; i < 20; i++) {
      const startTime = Date.now()
      await page.click('[data-testid="subscribe-button"]')
      const endTime = Date.now()
      
      responseTimes.push(endTime - startTime)
    }
    
    // –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±—ã—Å—Ç—Ä—ã–º –∏ —Å—Ç–∞–±–∏–ª—å–Ω—ã–º
    const averageResponseTime = responseTimes.reduce((a, b) => a + b, 0) / responseTimes.length
    expect(averageResponseTime).toBeLessThan(200) // 200 –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥
    
    // –†–∞–∑–±—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–º
    const maxResponseTime = Math.max(...responseTimes)
    const minResponseTime = Math.min(...responseTimes)
    expect(maxResponseTime - minResponseTime).toBeLessThan(100) // 100 –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥
  })
})