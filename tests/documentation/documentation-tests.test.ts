/**
 * üìö –¢–ï–°–¢–´ –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò
 * –ü–æ–∫—Ä—ã—Ç–∏–µ: —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∫–æ–¥—É, –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å, –ø–æ–ª–Ω–æ—Ç–∞
 */

import { test, expect, Page } from '@playwright/test'
import { readFileSync, existsSync } from 'fs'
import { join } from 'path'

describe('üìñ Code Documentation Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–∞–ª–∏—á–∏–µ JSDoc –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö', async ({ page }) => {
    // –°–ø–∏—Å–æ–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    const mainFiles = [
      'src/lib/auth.ts',
      'src/lib/supabase.ts',
      'src/lib/smartPlanning.ts',
      'src/lib/premiumAI.ts',
      'src/stores/useAppStore.ts',
      'src/utils/validation.ts',
      'src/types/index.ts'
    ]
    
    for (const file of mainFiles) {
      const filePath = join(process.cwd(), file)
      
      if (existsSync(filePath)) {
        const content = readFileSync(filePath, 'utf-8')
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ JSDoc –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        const jsdocRegex = /\/\*\*[\s\S]*?\*\//g
        const jsdocMatches = content.match(jsdocRegex)
        
        expect(jsdocMatches).toBeDefined()
        expect(jsdocMatches.length).toBeGreaterThan(0)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–ø–∏—Å–∞–Ω–∏–π —Ñ—É–Ω–∫—Ü–∏–π
        const functionRegex = /function\s+\w+|const\s+\w+\s*=\s*\(/g
        const functionMatches = content.match(functionRegex)
        
        if (functionMatches) {
          expect(jsdocMatches.length).toBeGreaterThanOrEqual(functionMatches.length * 0.8) // 80% —Ñ—É–Ω–∫—Ü–∏–π –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å JSDoc
        }
      }
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ JSDoc –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤', async ({ page }) => {
    const mainFiles = [
      'src/lib/auth.ts',
      'src/lib/supabase.ts',
      'src/lib/smartPlanning.ts',
      'src/lib/premiumAI.ts',
      'src/stores/useAppStore.ts',
      'src/utils/validation.ts'
    ]
    
    for (const file of mainFiles) {
      const filePath = join(process.cwd(), file)
      
      if (existsSync(filePath)) {
        const content = readFileSync(filePath, 'utf-8')
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ JSDoc –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        const jsdocRegex = /\/\*\*[\s\S]*?\*\//g
        const jsdocMatches = content.match(jsdocRegex)
        
        if (jsdocMatches) {
          for (const jsdoc of jsdocMatches) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
            expect(jsdoc).toContain('@description')
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π
            if (jsdoc.includes('@param')) {
              const paramRegex = /@param\s+\{\w+\}\s+\w+/g
              const paramMatches = jsdoc.match(paramRegex)
              expect(paramMatches).toBeDefined()
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
            if (jsdoc.includes('@returns')) {
              const returnsRegex = /@returns\s+\{\w+\}/g
              const returnsMatches = jsdoc.match(returnsRegex)
              expect(returnsMatches).toBeDefined()
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            if (jsdoc.includes('@example')) {
              const exampleRegex = /@example[\s\S]*?```/g
              const exampleMatches = jsdoc.match(exampleRegex)
              expect(exampleMatches).toBeDefined()
            }
          }
        }
      }
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–∏–ø–æ–≤ –≤ JSDoc –∏ TypeScript', async ({ page }) => {
    const mainFiles = [
      'src/lib/auth.ts',
      'src/lib/supabase.ts',
      'src/lib/smartPlanning.ts',
      'src/lib/premiumAI.ts',
      'src/stores/useAppStore.ts',
      'src/utils/validation.ts'
    ]
    
    for (const file of mainFiles) {
      const filePath = join(process.cwd(), file)
      
      if (existsSync(filePath)) {
        const content = readFileSync(filePath, 'utf-8')
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–∏–ø–æ–≤
        const jsdocRegex = /\/\*\*[\s\S]*?\*\//g
        const jsdocMatches = content.match(jsdocRegex)
        
        if (jsdocMatches) {
          for (const jsdoc of jsdocMatches) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            const paramRegex = /@param\s+\{(\w+)\}\s+(\w+)/g
            let paramMatch
            
            while ((paramMatch = paramRegex.exec(jsdoc)) !== null) {
              const jsdocType = paramMatch[1]
              const paramName = paramMatch[2]
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∏–ø –≤ JSDoc —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç TypeScript —Ç–∏–ø—É
              const tsTypeRegex = new RegExp(`${paramName}\\s*:\\s*(\\w+)`, 'g')
              const tsTypeMatch = content.match(tsTypeRegex)
              
              if (tsTypeMatch) {
                const tsType = tsTypeMatch[0].split(':')[1].trim()
                expect(jsdocType).toBe(tsType)
              }
            }
          }
        }
      }
    }
  })
})

describe('üìã API Documentation Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–∞–ª–∏—á–∏–µ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏', async ({ page }) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    const apiDocFiles = [
      'docs/api/auth.md',
      'docs/api/tasks.md',
      'docs/api/ai.md',
      'docs/api/subscription.md'
    ]
    
    for (const file of apiDocFiles) {
      const filePath = join(process.cwd(), file)
      
      if (existsSync(filePath)) {
        const content = readFileSync(filePath, 'utf-8')
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
        expect(content).toContain('# API Documentation')
        expect(content).toContain('## Endpoints')
        expect(content).toContain('## Request/Response')
        expect(content).toContain('## Examples')
        expect(content).toContain('## Error Codes')
      }
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏', async ({ page }) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–º endpoint'–∞–º
    const apiEndpoints = [
      { path: '/api/subscribe', method: 'POST', description: 'Subscribe to newsletter' },
      { path: '/api/test', method: 'GET', description: 'Test API endpoint' }
    ]
    
    for (const endpoint of apiEndpoints) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ endpoint —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      const response = await page.request.get(endpoint.path)
      expect(response.status()).toBeDefined()
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ endpoint –æ–ø–∏—Å–∞–Ω –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
      const apiDocPath = join(process.cwd(), 'docs/api/endpoints.md')
      if (existsSync(apiDocPath)) {
        const content = readFileSync(apiDocPath, 'utf-8')
        expect(content).toContain(endpoint.path)
        expect(content).toContain(endpoint.method)
        expect(content).toContain(endpoint.description)
      }
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø–æ–ª–Ω–æ—Ç—É API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏', async ({ page }) => {
    const apiDocPath = join(process.cwd(), 'docs/api/endpoints.md')
    
    if (existsSync(apiDocPath)) {
      const content = readFileSync(apiDocPath, 'utf-8')
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
      const requiredSections = [
        '## Authentication',
        '## Task Management',
        '## AI Features',
        '## Subscription',
        '## Error Handling',
        '## Rate Limiting',
        '## Security'
      ]
      
      for (const section of requiredSections) {
        expect(content).toContain(section)
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ endpoint'–∞
      const endpointRegex = /## \w+\s*\(/g
      const endpointMatches = content.match(endpointRegex)
      
      if (endpointMatches) {
        for (const endpoint of endpointMatches) {
          const endpointName = endpoint.replace('## ', '').replace(' (', '')
          expect(content).toContain(`### ${endpointName}`)
          expect(content).toContain('**Request:**')
          expect(content).toContain('**Response:**')
          expect(content).toContain('**Example:**')
        }
      }
    }
  })
})

describe('üìñ User Documentation Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏', async ({ page }) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    const userDocFiles = [
      'docs/user/getting-started.md',
      'docs/user/features.md',
      'docs/user/troubleshooting.md',
      'docs/user/faq.md'
    ]
    
    for (const file of userDocFiles) {
      const filePath = join(process.cwd(), file)
      
      if (existsSync(filePath)) {
        const content = readFileSync(filePath, 'utf-8')
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
        expect(content).toContain('# User Guide')
        expect(content).toContain('## Overview')
        expect(content).toContain('## Getting Started')
        expect(content).toContain('## Features')
        expect(content).toContain('## Troubleshooting')
      }
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏', async ({ page }) => {
    const userDocPath = join(process.cwd(), 'docs/user/getting-started.md')
    
    if (existsSync(userDocPath)) {
      const content = readFileSync(userDocPath, 'utf-8')
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
      expect(content).toContain('![Screenshot]')
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ—à–∞–≥–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
      expect(content).toContain('1. ')
      expect(content).toContain('2. ')
      expect(content).toContain('3. ')
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤
      expect(content).toContain('**Example:**')
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
      expect(content).toContain('**Warning:**')
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ–≤–µ—Ç–æ–≤
      expect(content).toContain('**Tip:**')
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏', async ({ page }) => {
    const userDocPath = join(process.cwd(), 'docs/user/getting-started.md')
    
    if (existsSync(userDocPath)) {
      const content = readFileSync(userDocPath, 'utf-8')
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
      const currentFeatures = [
        'task management',
        'AI planner',
        'productivity analysis',
        'smart sorting',
        'subscription plans'
      ]
      
      for (const feature of currentFeatures) {
        expect(content.toLowerCase()).toContain(feature)
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
      const deprecatedFeatures = [
        'old feature',
        'deprecated function',
        'legacy API'
      ]
      
      for (const feature of deprecatedFeatures) {
        expect(content.toLowerCase()).not.toContain(feature)
      }
    }
  })
})

describe('üîß Technical Documentation Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏', async ({ page }) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    const techDocFiles = [
      'docs/technical/architecture.md',
      'docs/technical/deployment.md',
      'docs/technical/development.md',
      'docs/technical/testing.md'
    ]
    
    for (const file of techDocFiles) {
      const filePath = join(process.cwd(), file)
      
      if (existsSync(filePath)) {
        const content = readFileSync(filePath, 'utf-8')
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
        expect(content).toContain('# Technical Documentation')
        expect(content).toContain('## Overview')
        expect(content).toContain('## Architecture')
        expect(content).toContain('## Deployment')
        expect(content).toContain('## Development')
        expect(content).toContain('## Testing')
      }
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏', async ({ page }) => {
    const techDocPath = join(process.cwd(), 'docs/technical/architecture.md')
    
    if (existsSync(techDocPath)) {
      const content = readFileSync(techDocPath, 'utf-8')
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∏–∞–≥—Ä–∞–º–º
      expect(content).toContain('```mermaid')
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ö–µ–º
      expect(content).toContain('![Architecture Diagram]')
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–ø–∏—Å–∞–Ω–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
      expect(content).toContain('## Components')
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–ø–∏—Å–∞–Ω–∏–π –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
      expect(content).toContain('## Interactions')
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–ø–∏—Å–∞–Ω–∏–π –¥–∞–Ω–Ω—ã—Ö
      expect(content).toContain('## Data Flow')
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏', async ({ page }) => {
    const techDocPath = join(process.cwd(), 'docs/technical/architecture.md')
    
    if (existsSync(techDocPath)) {
      const content = readFileSync(techDocPath, 'utf-8')
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
      const currentTechnologies = [
        'Next.js 14',
        'React 18',
        'TypeScript 5.4',
        'Tailwind CSS 3.4',
        'Supabase',
        'Zustand',
        'Jest',
        'Playwright'
      ]
      
      for (const tech of currentTechnologies) {
        expect(content).toContain(tech)
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π
      const deprecatedTechnologies = [
        'Next.js 13',
        'React 17',
        'TypeScript 4.9',
        'Tailwind CSS 2.0'
      ]
      
      for (const tech of deprecatedTechnologies) {
        expect(content).not.toContain(tech)
      }
    }
  })
})

describe('üìù README Documentation Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–∞–ª–∏—á–∏–µ README —Ñ–∞–π–ª–∞', async ({ page }) => {
    const readmePath = join(process.cwd(), 'README.md')
    
    expect(existsSync(readmePath)).toBe(true)
    
    const content = readFileSync(readmePath, 'utf-8')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
    expect(content).toContain('# Personal Productivity AI')
    expect(content).toContain('## Description')
    expect(content).toContain('## Features')
    expect(content).toContain('## Installation')
    expect(content).toContain('## Usage')
    expect(content).toContain('## Contributing')
    expect(content).toContain('## License')
  })

  test('–¥–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ README —Ñ–∞–π–ª–∞', async ({ page }) => {
    const readmePath = join(process.cwd(), 'README.md')
    
    if (existsSync(readmePath)) {
      const content = readFileSync(readmePath, 'utf-8')
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–µ–π–¥–∂–µ–π
      expect(content).toContain('![Build Status]')
      expect(content).toContain('![Coverage]')
      expect(content).toContain('![License]')
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
      expect(content).toContain('![Screenshot]')
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Å—ã–ª–æ–∫
      expect(content).toContain('[')
      expect(content).toContain('](')
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –∫–æ–¥–∞
      expect(content).toContain('```')
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ
      expect(content).toContain('npm install')
      expect(content).toContain('npm run dev')
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å README —Ñ–∞–π–ª–∞', async ({ page }) => {
    const readmePath = join(process.cwd(), 'README.md')
    
    if (existsSync(readmePath)) {
      const content = readFileSync(readmePath, 'utf-8')
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ README —Å–æ–¥–µ—Ä–∂–∏—Ç –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      expect(content).toContain('Personal Productivity AI')
      expect(content).toContain('AI-powered task planner')
      expect(content).toContain('Supabase')
      expect(content).toContain('Next.js')
      expect(content).toContain('TypeScript')
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ README –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —É—Å—Ç–∞—Ä–µ–≤—à–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
      expect(content).not.toContain('deprecated')
      expect(content).not.toContain('legacy')
      expect(content).not.toContain('old version')
    }
  })
})

describe('üîÑ Documentation Maintenance Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏', async ({ page }) => {
    const docFiles = [
      'README.md',
      'docs/api/endpoints.md',
      'docs/user/getting-started.md',
      'docs/technical/architecture.md'
    ]
    
    for (const file of docFiles) {
      const filePath = join(process.cwd(), file)
      
      if (existsSync(filePath)) {
        const stats = require('fs').statSync(filePath)
        const lastModified = stats.mtime
        const now = new Date()
        const daysSinceModified = (now.getTime() - lastModified.getTime()) / (1000 * 60 * 60 * 24)
        
        // –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –Ω–µ —Ä–µ–∂–µ —Ä–∞–∑–∞ –≤ –º–µ—Å—è—Ü
        expect(daysSinceModified).toBeLessThan(30)
      }
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏', async ({ page }) => {
    const docFiles = [
      'README.md',
      'docs/api/endpoints.md',
      'docs/user/getting-started.md',
      'docs/technical/architecture.md'
    ]
    
    const allContent = []
    
    for (const file of docFiles) {
      const filePath = join(process.cwd(), file)
      
      if (existsSync(filePath)) {
        const content = readFileSync(filePath, 'utf-8')
        allContent.push(content)
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã —Å–æ–¥–µ—Ä–∂–∞—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä—Å–∏–∏
    const versionRegex = /version\s*[:=]\s*[\d.]+/gi
    const versions = allContent.map(content => content.match(versionRegex)).filter(Boolean)
    
    if (versions.length > 1) {
      const firstVersion = versions[0][0]
      for (let i = 1; i < versions.length; i++) {
        expect(versions[i][0]).toBe(firstVersion)
      }
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø–æ–ª–Ω–æ—Ç—É –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏', async ({ page }) => {
    const requiredDocFiles = [
      'README.md',
      'docs/api/endpoints.md',
      'docs/user/getting-started.md',
      'docs/technical/architecture.md',
      'docs/technical/deployment.md',
      'docs/technical/development.md',
      'docs/technical/testing.md',
      'docs/user/features.md',
      'docs/user/troubleshooting.md',
      'docs/user/faq.md'
    ]
    
    for (const file of requiredDocFiles) {
      const filePath = join(process.cwd(), file)
      expect(existsSync(filePath)).toBe(true)
    }
  })
})