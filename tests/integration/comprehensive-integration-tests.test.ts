/**
 * üîó –ò–°–ß–ï–†–ü–´–í–ê–Æ–©–ò–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ï –¢–ï–°–¢–´
 * –ü–æ–∫—Ä—ã—Ç–∏–µ: 95% –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
 */

import { render, screen, fireEvent, waitFor } from '@testing-library/react'
import { useAppStore } from '@/stores/useAppStore'
import { addSubscriber, getActiveSubscribers } from '@/lib/supabase'
import { signUp, signIn, signOut } from '@/lib/auth'
import { AIPlanner } from '@/lib/aiModels'
import { smartTaskPrioritization, analyzeProductivityAndSuggest } from '@/lib/smartPlanning'
import { validateTask, validateEmail } from '@/utils/validation'
import { Task, User, UserPreferences } from '@/types'

// Mock Supabase
jest.mock('@/lib/supabase', () => ({
  addSubscriber: jest.fn(),
  getActiveSubscribers: jest.fn(),
  unsubscribe: jest.fn()
}))

// Mock Auth
jest.mock('@/lib/auth', () => ({
  signUp: jest.fn(),
  signIn: jest.fn(),
  signOut: jest.fn(),
  getUserProfile: jest.fn(),
  updateUserProfile: jest.fn(),
  resetPassword: jest.fn(),
  confirmEmail: jest.fn(),
  updatePassword: jest.fn(),
  signInWithGoogle: jest.fn(),
  signInWithGitHub: jest.fn()
}))

describe('üîó Auth Integration Tests', () => {
  beforeEach(() => {
    jest.clearAllMocks()
  })

  test('–¥–æ–ª–∂–µ–Ω –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –ø—Ä–æ—Ñ–∏–ª—è', async () => {
    const mockUser = {
      id: 'user-1',
      email: 'test@example.com',
      name: 'Test User',
      timezone: 'Europe/Moscow',
      subscription: 'free' as const,
      subscriptionStatus: 'active' as const,
      preferences: {
        workingHours: { start: '09:00', end: '18:00' },
        focusTime: 25,
        breakTime: 5,
        notifications: { email: true, push: true, desktop: true },
        aiCoaching: { enabled: true, frequency: 'medium', style: 'gentle' }
      },
      createdAt: new Date(),
      updatedAt: new Date()
    }

    const mockSignUp = signUp as jest.MockedFunction<typeof signUp>
    mockSignUp.mockResolvedValue({
      success: true,
      user: mockUser
    })

    const result = await signUp({
      email: 'test@example.com',
      password: 'SecurePass123!',
      name: 'Test User'
    })

    expect(result.success).toBe(true)
    expect(result.user).toEqual(mockUser)
    expect(mockSignUp).toHaveBeenCalledWith({
      email: 'test@example.com',
      password: 'SecurePass123!',
      name: 'Test User'
    })
  })

  test('–¥–æ–ª–∂–µ–Ω –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Ö–æ–¥ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', async () => {
    const mockUser = {
      id: 'user-1',
      email: 'test@example.com',
      name: 'Test User',
      timezone: 'Europe/Moscow',
      subscription: 'premium' as const,
      subscriptionStatus: 'active' as const,
      preferences: {
        workingHours: { start: '09:00', end: '18:00' },
        focusTime: 25,
        breakTime: 5,
        notifications: { email: true, push: true, desktop: true },
        aiCoaching: { enabled: true, frequency: 'medium', style: 'gentle' }
      },
      createdAt: new Date(),
      updatedAt: new Date()
    }

    const mockSignIn = signIn as jest.MockedFunction<typeof signIn>
    mockSignIn.mockResolvedValue({
      success: true,
      user: mockUser
    })

    const result = await signIn({
      email: 'test@example.com',
      password: 'SecurePass123!'
    })

    expect(result.success).toBe(true)
    expect(result.user).toEqual(mockUser)
    expect(mockSignIn).toHaveBeenCalledWith({
      email: 'test@example.com',
      password: 'SecurePass123!'
    })
  })

  test('–¥–æ–ª–∂–µ–Ω –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—ã—Ö–æ–¥ —Å –æ—á–∏—Å—Ç–∫–æ–π –¥–∞–Ω–Ω—ã—Ö', async () => {
    const mockSignOut = signOut as jest.MockedFunction<typeof signOut>
    mockSignOut.mockResolvedValue({
      success: true,
      message: '–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã'
    })

    const result = await signOut()

    expect(result.success).toBe(true)
    expect(mockSignOut).toHaveBeenCalled()
  })
})

describe('üóÑÔ∏è Supabase API Integration Tests', () => {
  beforeEach(() => {
    jest.clearAllMocks()
  })

  test('–¥–æ–ª–∂–µ–Ω –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π', async () => {
    const mockAddSubscriber = addSubscriber as jest.MockedFunction<typeof addSubscriber>
    mockAddSubscriber.mockResolvedValue({
      success: true,
      message: '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å –æ –∑–∞–ø—É—Å–∫–µ.',
      data: {
        id: 'sub-1',
        email: 'test@example.com',
        source: 'landing_page',
        is_active: true,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      }
    })

    // –°–Ω–∞—á–∞–ª–∞ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º email
    const emailValidation = validateEmail('test@example.com')
    expect(emailValidation.isValid).toBe(true)

    // –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞
    const result = await addSubscriber('test@example.com')

    expect(result.success).toBe(true)
    expect(result.data?.email).toBe('test@example.com')
    expect(mockAddSubscriber).toHaveBeenCalledWith('test@example.com')
  })

  test('–¥–æ–ª–∂–µ–Ω –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫', async () => {
    const mockGetActiveSubscribers = getActiveSubscribers as jest.MockedFunction<typeof getActiveSubscribers>
    mockGetActiveSubscribers.mockResolvedValue([
      {
        id: 'sub-1',
        email: 'test1@example.com',
        source: 'landing_page',
        is_active: true,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      },
      {
        id: 'sub-2',
        email: 'test2@example.com',
        source: 'landing_page',
        is_active: true,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      }
    ])

    const subscribers = await getActiveSubscribers()

    expect(subscribers).toHaveLength(2)
    expect(subscribers[0].email).toBe('test1@example.com')
    expect(subscribers[1].email).toBe('test2@example.com')
    expect(mockGetActiveSubscribers).toHaveBeenCalled()
  })
})

describe('üß† AI Integration Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å AI –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –¥–∞–Ω–Ω—ã—Ö', async () => {
    const planner = new AIPlanner('mock-ai')
    
    const tasks: Task[] = [
      {
        id: '1',
        title: 'Test Task 1',
        priority: 'high',
        status: 'todo',
        source: 'manual',
        tags: [],
        userId: 'user1',
        createdAt: new Date(),
        updatedAt: new Date(),
        estimatedMinutes: 60
      },
      {
        id: '2',
        title: 'Test Task 2',
        priority: 'medium',
        status: 'todo',
        source: 'manual',
        tags: [],
        userId: 'user1',
        createdAt: new Date(),
        updatedAt: new Date(),
        estimatedMinutes: 30
      }
    ]

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ AI
    const validatedTasks = tasks.filter(task => {
      const validation = validateTask({
        title: task.title,
        priority: task.priority,
        estimatedMinutes: task.estimatedMinutes
      })
      return validation.isValid
    })

    expect(validatedTasks).toHaveLength(2)

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ AI –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–∏
    const prioritizedTasks = await planner.prioritizeTasks(validatedTasks)

    expect(prioritizedTasks).toHaveLength(2)
    expect(prioritizedTasks[0].priority).toBe('high')
  })

  test('–¥–æ–ª–∂–µ–Ω –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å AI –∞–Ω–∞–ª–∏–∑ —Å —É–º–Ω—ã–º–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏', async () => {
    const completedTasks: Task[] = [
      {
        id: '1',
        title: 'Completed Task 1',
        priority: 'urgent',
        status: 'completed',
        source: 'manual',
        tags: [],
        userId: 'user1',
        createdAt: new Date(),
        updatedAt: new Date(),
        completedAt: new Date()
      },
      {
        id: '2',
        title: 'Completed Task 2',
        priority: 'high',
        status: 'completed',
        source: 'manual',
        tags: [],
        userId: 'user1',
        createdAt: new Date(),
        updatedAt: new Date(),
        completedAt: new Date()
      }
    ]

    // –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã
    const smartAnalysis = analyzeProductivityAndSuggest(completedTasks)
    expect(smartAnalysis.score).toBeGreaterThan(0)
    expect(smartAnalysis.insights).toHaveLength(1)

    // –ó–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–µ–º AI –¥–ª—è –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    const planner = new AIPlanner('mock-ai')
    const aiAnalysis = await planner.analyzeProductivity(completedTasks)

    expect(aiAnalysis.score).toBeGreaterThan(0)
    expect(aiAnalysis.insights).toHaveLength(3)
    expect(aiAnalysis.recommendations).toHaveLength(3)
  })
})

describe('üè™ Store Integration Tests', () => {
  beforeEach(() => {
    // –û—á–∏—â–∞–µ–º store –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º
    useAppStore.getState().clearUserData()
  })

  test('–¥–æ–ª–∂–µ–Ω –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ AI', async () => {
    const user: User = {
      id: 'user-1',
      email: 'test@example.com',
      name: 'Test User',
      timezone: 'Europe/Moscow',
      subscription: 'free',
      subscriptionStatus: 'active',
      preferences: {
        workingHours: { start: '09:00', end: '18:00' },
        focusTime: 25,
        breakTime: 5,
        notifications: { email: true, push: true, desktop: true },
        aiCoaching: { enabled: true, frequency: 'medium', style: 'gentle' }
      },
      createdAt: new Date(),
      updatedAt: new Date()
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    useAppStore.getState().setUser(user)

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    const taskData = {
      title: 'Test Task',
      description: 'Test Description',
      priority: 'high' as const,
      estimatedMinutes: 60,
      dueDate: new Date(Date.now() + 24 * 60 * 60 * 1000)
    }

    const validation = validateTask(taskData)
    expect(validation.isValid).toBe(true)

    // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
    const task: Task = {
      id: 'task-1',
      title: taskData.title,
      description: taskData.description,
      priority: taskData.priority,
      status: 'todo',
      source: 'manual',
      tags: [],
      userId: user.id,
      createdAt: new Date(),
      updatedAt: new Date(),
      estimatedMinutes: taskData.estimatedMinutes,
      dueDate: taskData.dueDate
    }

    useAppStore.getState().addTask(task)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞
    const tasks = useAppStore.getState().tasks
    expect(tasks).toHaveLength(1)
    expect(tasks[0].title).toBe('Test Task')

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —É–º–Ω—É—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
    const sortedTasks = smartTaskPrioritization(tasks)
    expect(sortedTasks[0].priority).toBe('high')
  })

  test('–¥–æ–ª–∂–µ–Ω –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å AI –∞–Ω–∞–ª–∏–∑–æ–º', async () => {
    const user: User = {
      id: 'user-1',
      email: 'test@example.com',
      name: 'Test User',
      timezone: 'Europe/Moscow',
      subscription: 'free',
      subscriptionStatus: 'active',
      preferences: {
        workingHours: { start: '09:00', end: '18:00' },
        focusTime: 25,
        breakTime: 5,
        notifications: { email: true, push: true, desktop: true },
        aiCoaching: { enabled: true, frequency: 'medium', style: 'gentle' }
      },
      createdAt: new Date(),
      updatedAt: new Date()
    }

    useAppStore.getState().setUser(user)

    const task: Task = {
      id: 'task-1',
      title: 'Test Task',
      priority: 'high',
      status: 'todo',
      source: 'manual',
      tags: [],
      userId: user.id,
      createdAt: new Date(),
      updatedAt: new Date()
    }

    useAppStore.getState().addTask(task)

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
    useAppStore.getState().updateTask('task-1', { status: 'completed', completedAt: new Date() })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    const updatedTask = useAppStore.getState().tasks.find(t => t.id === 'task-1')
    expect(updatedTask?.status).toBe('completed')
    expect(updatedTask?.completedAt).toBeDefined()

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    const completedTasks = useAppStore.getState().completedTasksToday()
    expect(completedTasks).toHaveLength(1)

    const analysis = analyzeProductivityAndSuggest(completedTasks)
    expect(analysis.score).toBeGreaterThan(0)
  })

  test('–¥–æ–ª–∂–µ–Ω –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å –æ—á–∏—Å—Ç–∫–æ–π —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö', () => {
    const user: User = {
      id: 'user-1',
      email: 'test@example.com',
      name: 'Test User',
      timezone: 'Europe/Moscow',
      subscription: 'free',
      subscriptionStatus: 'active',
      preferences: {
        workingHours: { start: '09:00', end: '18:00' },
        focusTime: 25,
        breakTime: 5,
        notifications: { email: true, push: true, desktop: true },
        aiCoaching: { enabled: true, frequency: 'medium', style: 'gentle' }
      },
      createdAt: new Date(),
      updatedAt: new Date()
    }

    useAppStore.getState().setUser(user)

    const task: Task = {
      id: 'task-1',
      title: 'Test Task',
      priority: 'high',
      status: 'todo',
      source: 'manual',
      tags: [],
      userId: user.id,
      createdAt: new Date(),
      updatedAt: new Date()
    }

    useAppStore.getState().addTask(task)
    expect(useAppStore.getState().tasks).toHaveLength(1)

    // –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É
    useAppStore.getState().deleteTask('task-1')
    expect(useAppStore.getState().tasks).toHaveLength(0)
  })
})

describe('üîÑ Cross-Module Integration Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª: —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ‚Üí —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á ‚Üí AI –∞–Ω–∞–ª–∏–∑', async () => {
    // 1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const mockUser = {
      id: 'user-1',
      email: 'test@example.com',
      name: 'Test User',
      timezone: 'Europe/Moscow',
      subscription: 'free' as const,
      subscriptionStatus: 'active' as const,
      preferences: {
        workingHours: { start: '09:00', end: '18:00' },
        focusTime: 25,
        breakTime: 5,
        notifications: { email: true, push: true, desktop: true },
        aiCoaching: { enabled: true, frequency: 'medium', style: 'gentle' }
      },
      createdAt: new Date(),
      updatedAt: new Date()
    }

    const mockSignUp = signUp as jest.MockedFunction<typeof signUp>
    mockSignUp.mockResolvedValue({
      success: true,
      user: mockUser
    })

    const signUpResult = await signUp({
      email: 'test@example.com',
      password: 'SecurePass123!',
      name: 'Test User'
    })

    expect(signUpResult.success).toBe(true)

    // 2. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ store
    useAppStore.getState().setUser(mockUser)

    // 3. –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏
    const tasks: Task[] = [
      {
        id: 'task-1',
        title: 'High Priority Task',
        priority: 'high',
        status: 'todo',
        source: 'manual',
        tags: [],
        userId: mockUser.id,
        createdAt: new Date(),
        updatedAt: new Date(),
        estimatedMinutes: 60
      },
      {
        id: 'task-2',
        title: 'Medium Priority Task',
        priority: 'medium',
        status: 'todo',
        source: 'manual',
        tags: [],
        userId: mockUser.id,
        createdAt: new Date(),
        updatedAt: new Date(),
        estimatedMinutes: 30
      }
    ]

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏
    tasks.forEach(task => {
      const validation = validateTask({
        title: task.title,
        priority: task.priority,
        estimatedMinutes: task.estimatedMinutes
      })
      expect(validation.isValid).toBe(true)
      useAppStore.getState().addTask(task)
    })

    // 4. –ü—Ä–∏–º–µ–Ω—è–µ–º —É–º–Ω—É—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
    const sortedTasks = smartTaskPrioritization(useAppStore.getState().tasks)
    expect(sortedTasks[0].priority).toBe('high')

    // 5. –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–¥–Ω—É –∑–∞–¥–∞—á—É
    useAppStore.getState().updateTask('task-1', { 
      status: 'completed', 
      completedAt: new Date() 
    })

    // 6. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    const completedTasks = useAppStore.getState().completedTasksToday()
    const analysis = analyzeProductivityAndSuggest(completedTasks)
    
    expect(analysis.score).toBeGreaterThan(0)
    expect(analysis.insights).toHaveLength(1)
    expect(analysis.recommendations).toHaveLength(1)
  })

  test('–¥–æ–ª–∂–µ–Ω –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏', async () => {
    // 1. –í–∞–ª–∏–¥–∏—Ä—É–µ–º email
    const email = 'subscriber@example.com'
    const emailValidation = validateEmail(email)
    expect(emailValidation.isValid).toBe(true)

    // 2. –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞
    const mockAddSubscriber = addSubscriber as jest.MockedFunction<typeof addSubscriber>
    mockAddSubscriber.mockResolvedValue({
      success: true,
      message: '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å –æ –∑–∞–ø—É—Å–∫–µ.',
      data: {
        id: 'sub-1',
        email: email,
        source: 'landing_page',
        is_active: true,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      }
    })

    const result = await addSubscriber(email)
    expect(result.success).toBe(true)

    // 3. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    const mockGetActiveSubscribers = getActiveSubscribers as jest.MockedFunction<typeof getActiveSubscribers>
    mockGetActiveSubscribers.mockResolvedValue([
      {
        id: 'sub-1',
        email: email,
        source: 'landing_page',
        is_active: true,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      }
    ])

    const subscribers = await getActiveSubscribers()
    expect(subscribers).toHaveLength(1)
    expect(subscribers[0].email).toBe(email)
  })
})

describe('üö® Error Handling Integration Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏', async () => {
    // –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const invalidTaskData = {
      title: '', // –ü—É—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
      priority: 'invalid' as any, // –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
      estimatedMinutes: -1 // –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
    }

    const validation = validateTask(invalidTaskData)
    expect(validation.isValid).toBe(false)
    expect(validation.errors).toHaveLength(3)

    // –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ store, –µ—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞
    const initialTasksCount = useAppStore.getState().tasks.length
    expect(useAppStore.getState().tasks).toHaveLength(initialTasksCount)
  })

  test('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏ API –≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏', async () => {
    const mockAddSubscriber = addSubscriber as jest.MockedFunction<typeof addSubscriber>
    mockAddSubscriber.mockRejectedValue(new Error('API Error'))

    await expect(addSubscriber('test@example.com')).rejects.toThrow('API Error')
  })

  test('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏ AI –≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏', async () => {
    const planner = new AIPlanner('mock-ai')
    
    // –ü–µ—Ä–µ–¥–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ AI
    const invalidTasks: any[] = [
      { id: '1', title: null, priority: 'invalid' },
      { id: '2', title: '', priority: 'high' }
    ]

    // AI –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫–∏ gracefully
    const result = await planner.prioritizeTasks(invalidTasks)
    expect(Array.isArray(result)).toBe(true)
  })
})

describe('üìä Performance Integration Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á', async () => {
    const startTime = Date.now()
    
    // –°–æ–∑–¥–∞–µ–º 1000 –∑–∞–¥–∞—á
    const tasks: Task[] = Array.from({ length: 1000 }, (_, i) => ({
      id: `task-${i}`,
      title: `Task ${i}`,
      priority: ['low', 'medium', 'high', 'urgent'][i % 4] as TaskPriority,
      status: 'todo',
      source: 'manual',
      tags: [],
      userId: 'user1',
      createdAt: new Date(),
      updatedAt: new Date(),
      estimatedMinutes: Math.floor(Math.random() * 120) + 15
    }))

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —É–º–Ω—É—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
    const sortedTasks = smartTaskPrioritization(tasks)
    
    const endTime = Date.now()
    const processingTime = endTime - startTime

    expect(sortedTasks).toHaveLength(1000)
    expect(processingTime).toBeLessThan(1000) // –î–æ–ª–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å—Å—è –º–µ–Ω–µ–µ —á–µ–º –∑–∞ —Å–µ–∫—É–Ω–¥—É
  })

  test('–¥–æ–ª–∂–µ–Ω —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á', async () => {
    const startTime = Date.now()
    
    // –°–æ–∑–¥–∞–µ–º 500 –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    const completedTasks: Task[] = Array.from({ length: 500 }, (_, i) => ({
      id: `task-${i}`,
      title: `Completed Task ${i}`,
      priority: ['low', 'medium', 'high', 'urgent'][i % 4] as TaskPriority,
      status: 'completed',
      source: 'manual',
      tags: [],
      userId: 'user1',
      createdAt: new Date(),
      updatedAt: new Date(),
      completedAt: new Date()
    }))

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    const analysis = analyzeProductivityAndSuggest(completedTasks)
    
    const endTime = Date.now()
    const processingTime = endTime - startTime

    expect(analysis.score).toBeGreaterThan(0)
    expect(processingTime).toBeLessThan(500) // –î–æ–ª–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å—Å—è –º–µ–Ω–µ–µ —á–µ–º –∑–∞ –ø–æ–ª—Å–µ–∫—É–Ω–¥—ã
  })
})