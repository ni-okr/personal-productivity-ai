import { testFramework, testLogger, testMocks, testUtils } from '../framework'

/**
 * üß™ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å –ø–æ–º–æ—â—å—é –µ–¥–∏–Ω–æ–≥–æ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * 
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω: 2025-09-16T21:33:45.030Z
 * –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫: tests/integration/planner-integration.test.tsx.backup
 * 
 * –í–ê–ñ–ù–û: –í—Å–µ –Ω–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–¥–∏–Ω—ã–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫!
 * –°–º. –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é: tests/docs/TESTING_FRAMEWORK.md
 */

// üß™ Integration —Ç–µ—Å—Ç—ã –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å Supabase
import PlannerPage from '@/app/planner/page'
import { useAuth } from '@/hooks/useAuth'
import * as tasksApi from '@/lib/tasks'
import { useAppStore } from '@/stores/useAppStore'
import { User } from '@/types'
import { fireEvent, screen } from '@testing-library/react'
import { MOCK_CONFIGS, TEST_CONFIGS } from '../framework'

// Mock hooks
jest.mock('@/hooks/useAuth')
jest.mock('@/lib/tasks')

const mockUseAuth = useAuth as jest.MockedFunction<typeof useAuth>
const mockTasksApi = tasksApi as jest.Mocked<typeof tasksApi>

// Mock store
jest.mock('@/stores/useAppStore')
const mockUseAppStore = useAppStore as jest.MockedFunction<typeof useAppStore>

describe('Planner Integration with Supabase', () => {
    const mockUser: User = {
        id: '550e8400-e29b-41d4-a716-446655440000',
        email: 'test@example.com',
        name: 'Test User',
        avatar: undefined,
        timezone: 'Europe/Moscow',
        subscription: 'free',
        subscriptionStatus: 'active',
        preferences: {
            workingHours: { start: '09:00', end: '18:00' },
            focusTime: 25,
            breakTime: 5,
            notifications: { email: true, push: true, desktop: true },
            aiCoaching: { enabled: true, frequency: 'medium', style: 'gentle' }
        },
        createdAt: new Date(),
        updatedAt: new Date()
    }

    const mockTask = {
        id: '550e8400-e29b-41d4-a716-446655440001',
        title: 'Test Task',
        description: 'Test Description',
        priority: 'high' as const,
        status: 'todo' as const,
        dueDate: new Date('2024-01-01'),
        completedAt: undefined,
        estimatedMinutes: 30,
        actualMinutes: undefined,
        tags: ['work'],
        createdAt: new Date(),
        updatedAt: new Date()
    }

    const mockStoreState = {
        tasks: [],
        addTask: jest.fn(),
        updateTask: jest.fn(),
        deleteTask: jest.fn(),
        pendingTasks: jest.fn(() => []),
        urgentTasks: jest.fn(() => []),
        completedTasksToday: jest.fn(() => []),
        loadTasks: jest.fn(),
        createTaskAsync: jest.fn(),
        updateTaskAsync: jest.fn(),
        deleteTaskAsync: jest.fn(),
        completeTaskAsync: jest.fn(),
        isLoading: false,
        error: null
    }

    beforeEach(() => {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –µ–¥–∏–Ω–æ–≥–æ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        testFramework.updateConfig(TEST_CONFIGS.INTEGRATION)
        testMocks.updateConfig(MOCK_CONFIGS.FULL)
        testMocks.setupAllMocks()
        testLogger.startTest('Integration Tests')
        jest.clearAllMocks()

        mockUseAuth.mockReturnValue({
            user: null,
            isLoading: false,
            isAuthenticated: false,
            requireAuth: jest.fn(),
            requireGuest: jest.fn()
        })

        mockUseAppStore.mockReturnValue(mockStoreState)
    })

    describe('Authentication', () => {
        it('–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –≤—Ö–æ–¥–∞ –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', async () => {
            await testUtils.act(async () => {
                testUtils.renderWithProviders(<PlannerPage />)
            })

            expect(screen.getByText('–ò–ò-–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫')).toBeTruthy()
            expect(screen.getByText('–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É')).toBeTruthy()
            expect(screen.getByText('–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É')).toBeTruthy()
        })

        it('–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', async () => {
            mockUseAuth.mockReturnValue({
                user: mockUser,
                isLoading: false,
                isAuthenticated: true,
                requireAuth: jest.fn(),
                requireGuest: jest.fn()
            })

            await testUtils.act(async () => {
                testUtils.renderWithProviders(<PlannerPage />)
            })

            expect(screen.getByText('–ò–ò-–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫')).toBeTruthy()
            expect(screen.getByText('–ü—Ä–µ–≤—Ä–∞—â–∞–µ–º —Ö–∞–æ—Å –≤ —Å–∏—Å—Ç–µ–º—É')).toBeTruthy()
            expect(screen.getByText('–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É')).toBeTruthy()
        })
    })

    describe('Task Management', () => {
        beforeEach(() => {
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –µ–¥–∏–Ω–æ–≥–æ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            testFramework.updateConfig(TEST_CONFIGS.INTEGRATION)
            testMocks.updateConfig(MOCK_CONFIGS.FULL)
            testMocks.setupAllMocks()
            testLogger.startTest('Integration Tests')
            mockUseAuth.mockReturnValue({
                user: mockUser,
                isLoading: false,
                isAuthenticated: true,
                requireAuth: jest.fn(),
                requireGuest: jest.fn()
            })
        })

        it('–¥–æ–ª–∂–µ–Ω –∑–∞–≥—Ä—É–∂–∞—Ç—å –∑–∞–¥–∞—á–∏ –ø—Ä–∏ –≤—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', async () => {
            await testUtils.act(async () => {
                testUtils.renderWithProviders(<PlannerPage />)
            })

            expect(mockStoreState.loadTasks).toHaveBeenCalled()
        })

        it('–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏', async () => {
            mockUseAppStore.mockReturnValue({
                ...mockStoreState,
                error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á'
            })

            await testUtils.act(async () => {
                testUtils.renderWithProviders(<PlannerPage />)
            })

            expect(screen.getByText('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á')).toBeTruthy()
        })

        it('–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏', async () => {
            mockUseAppStore.mockReturnValue({
                ...mockStoreState,
                isLoading: true
            })

            await testUtils.act(async () => {
                testUtils.renderWithProviders(<PlannerPage />)

            })

            expect(screen.getByText('–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É')).toBeDisabled()
        })
    })

    describe('Add Task Modal', () => {
        beforeEach(() => {
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –µ–¥–∏–Ω–æ–≥–æ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            testFramework.updateConfig(TEST_CONFIGS.INTEGRATION)
            testMocks.updateConfig(MOCK_CONFIGS.FULL)
            testMocks.setupAllMocks()
            testLogger.startTest('Integration Tests')
            mockUseAuth.mockReturnValue({
                user: mockUser,
                isLoading: false,
                isAuthenticated: true,
                requireAuth: jest.fn(),
                requireGuest: jest.fn()
            })
        })

        it('–¥–æ–ª–∂–µ–Ω –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –º–æ–¥–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏', async () => {
            await testUtils.act(async () => {
                testUtils.renderWithProviders(<PlannerPage />)

            })

            fireEvent.click(screen.getByRole('button', { name: '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É' }))

            expect(screen.getByRole('heading', { name: '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É' })).toBeTruthy()
            expect(screen.getByPlaceholderText('–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å?')).toBeTruthy()
        })

        it('–¥–æ–ª–∂–µ–Ω –∑–∞–∫—Ä—ã–≤–∞—Ç—å –º–æ–¥–∞–ª –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –æ—Ç–º–µ–Ω—ã', async () => {
            await testUtils.act(async () => {
                testUtils.renderWithProviders(<PlannerPage />)

            })

            fireEvent.click(screen.getByText('–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É'))
            fireEvent.click(screen.getByText('–û—Ç–º–µ–Ω–∞'))

            expect(screen.queryByPlaceholderText('–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å?')).not.toBeTruthy()
        })

        it('–¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ Supabase', async () => {
            mockStoreState.createTaskAsync.mockResolvedValue(undefined)

            await testUtils.act(async () => {
                testUtils.renderWithProviders(<PlannerPage />)

            })

            fireEvent.click(screen.getByText('–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É'))

            fireEvent.change(screen.getByPlaceholderText('–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å?'), {
                target: { value: 'New Task' }
            })

            fireEvent.change(screen.getByPlaceholderText('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏...'), {
                target: { value: 'Task Description' }
            })

            fireEvent.click(screen.getByText('–î–æ–±–∞–≤–∏—Ç—å'))

            await testUtils.waitForState(() => {
                expect(mockStoreState.createTaskAsync).toHaveBeenCalledWith({
                    title: 'New Task',
                    description: 'Task Description',
                    priority: 'medium',
                    dueDate: undefined,
                    estimatedMinutes: 30,
                    tags: []
                })
            })
        })

        it('–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏', async () => {
            await testUtils.act(async () => {
                testUtils.renderWithProviders(<PlannerPage />)

            })

            fireEvent.click(screen.getByText('–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É'))
            fireEvent.click(screen.getByText('–î–æ–±–∞–≤–∏—Ç—å'))

            await testUtils.waitForState(() => {
                expect(screen.getByText('–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏:')).toBeTruthy()
            })
        })

        it('–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', async () => {
            mockUseAuth.mockReturnValue({
                user: null,
                isLoading: false,
                isAuthenticated: false,
                requireAuth: jest.fn(),
                requireGuest: jest.fn()
            })

            await testUtils.act(async () => {
                testUtils.renderWithProviders(<PlannerPage />)

            })

            // –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            fireEvent.click(screen.getByText('–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É'))
        })
    })

    describe('Task Actions', () => {
        beforeEach(() => {
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –µ–¥–∏–Ω–æ–≥–æ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            testFramework.updateConfig(TEST_CONFIGS.INTEGRATION)
            testMocks.updateConfig(MOCK_CONFIGS.FULL)
            testMocks.setupAllMocks()
            testLogger.startTest('Integration Tests')
            mockUseAuth.mockReturnValue({
                user: mockUser,
                isLoading: false,
                isAuthenticated: true,
                requireAuth: jest.fn(),
                requireGuest: jest.fn()
            })

            mockUseAppStore.mockReturnValue({
                ...mockStoreState,
                tasks: [mockTask],
                pendingTasks: jest.fn(() => [mockTask]),
                urgentTasks: jest.fn(() => [mockTask])
            })
        })

        it('–¥–æ–ª–∂–µ–Ω –∑–∞–≤–µ—Ä—à–∞—Ç—å –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ Supabase', async () => {
            mockStoreState.completeTaskAsync.mockResolvedValue(undefined)

            await testUtils.act(async () => {
                testUtils.renderWithProviders(<PlannerPage />)

            })

            const taskCheckbox = screen.getAllByRole('button', { name: /toggle task test task/i })[0]
            fireEvent.click(taskCheckbox)

            await testUtils.waitForState(() => {
                expect(mockStoreState.completeTaskAsync).toHaveBeenCalledWith(mockTask.id, mockTask.estimatedMinutes)
            })
        })

        it('–¥–æ–ª–∂–µ–Ω —É–¥–∞–ª—è—Ç—å –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ Supabase', async () => {
            mockStoreState.deleteTaskAsync.mockResolvedValue(undefined)

            await testUtils.act(async () => {
                testUtils.renderWithProviders(<PlannerPage />)

            })

            const deleteButton = screen.getAllByTitle('–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É')[0]
            fireEvent.click(deleteButton)

            await testUtils.waitForState(() => {
                expect(mockStoreState.deleteTaskAsync).toHaveBeenCalledWith(mockTask.id)
            })
        })
    })

    describe('Task Display', () => {
        beforeEach(() => {
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –µ–¥–∏–Ω–æ–≥–æ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            testFramework.updateConfig(TEST_CONFIGS.INTEGRATION)
            testMocks.updateConfig(MOCK_CONFIGS.FULL)
            testMocks.setupAllMocks()
            testLogger.startTest('Integration Tests')
            mockUseAuth.mockReturnValue({
                user: mockUser,
                isLoading: false,
                isAuthenticated: true,
                requireAuth: jest.fn(),
                requireGuest: jest.fn()
            })
        })

        it('–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ä–æ—á–Ω—ã–µ –∑–∞–¥–∞—á–∏', async () => {
            mockUseAppStore.mockReturnValue({
                ...mockStoreState,
                urgentTasks: jest.fn(() => [mockTask])
            })

            await testUtils.act(async () => {
                testUtils.renderWithProviders(<PlannerPage />)

            })

            expect(screen.getByText('–°—Ä–æ—á–Ω–æ')).toBeTruthy()
            expect(screen.getByText('Test Task')).toBeTruthy()
        })

        it('–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –≤ —Ä–∞–±–æ—Ç–µ', async () => {
            mockUseAppStore.mockReturnValue({
                ...mockStoreState,
                pendingTasks: jest.fn(() => [mockTask])
            })

            await testUtils.act(async () => {
                testUtils.renderWithProviders(<PlannerPage />)

            })

            expect(screen.getByText('–í —Ä–∞–±–æ—Ç–µ')).toBeTruthy()
            expect(screen.getByText('Test Task')).toBeTruthy()
        })

        it('–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏', async () => {
            const completedTask = { ...mockTask, status: 'completed' as const }

            mockUseAppStore.mockReturnValue({
                ...mockStoreState,
                completedTasksToday: jest.fn(() => [completedTask])
            })

            await testUtils.act(async () => {
                testUtils.renderWithProviders(<PlannerPage />)

            })

            expect(screen.getByText('–í—ã–ø–æ–ª–Ω–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è')).toBeTruthy()
            expect(screen.getByText('Test Task')).toBeTruthy()
        })

        it('–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—É—Å—Ç—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è', async () => {
            await testUtils.act(async () => {
                testUtils.renderWithProviders(<PlannerPage />)

            })

            expect(screen.getByText('üéâ –ù–µ—Ç —Å—Ä–æ—á–Ω—ã—Ö –∑–∞–¥–∞—á')).toBeTruthy()
            expect(screen.getByText('‚ú® –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É')).toBeTruthy()
            expect(screen.getByText('üéØ –ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ')).toBeTruthy()
        })
    })

    describe('Error Handling', () => {
        beforeEach(() => {
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –µ–¥–∏–Ω–æ–≥–æ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            testFramework.updateConfig(TEST_CONFIGS.INTEGRATION)
            testMocks.updateConfig(MOCK_CONFIGS.FULL)
            testMocks.setupAllMocks()
            testLogger.startTest('Integration Tests')
            mockUseAuth.mockReturnValue({
                user: mockUser,
                isLoading: false,
                isAuthenticated: true,
                requireAuth: jest.fn(),
                requireGuest: jest.fn()
            })
        })

        it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏ API', async () => {
            mockStoreState.createTaskAsync.mockRejectedValue(new Error('API Error'))

            await testUtils.act(async () => {
                testUtils.renderWithProviders(<PlannerPage />)

            })

            fireEvent.click(screen.getByText('–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É'))

            fireEvent.change(screen.getByPlaceholderText('–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å?'), {
                target: { value: 'New Task' }
            })

            fireEvent.click(screen.getByText('–î–æ–±–∞–≤–∏—Ç—å'))

            await testUtils.waitForState(() => {
                expect(screen.getByText('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏')).toBeTruthy()
            })
        })
    })
})
