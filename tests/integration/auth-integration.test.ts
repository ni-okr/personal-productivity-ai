/**
 * üß™ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å –ø–æ–º–æ—â—å—é –µ–¥–∏–Ω–æ–≥–æ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * 
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω: 2025-09-16T21:33:45.029Z
 * –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫: tests/integration/auth-integration.test.ts.backup
 * 
 * –í–ê–ñ–ù–û: –í—Å–µ –Ω–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–¥–∏–Ω—ã–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫!
 * –°–º. –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é: tests/docs/TESTING_FRAMEWORK.md
 */

import {
    getCurrentUser,
    getUserProfile,
    signIn,
    signUp,
    updateUserProfile
} from '@/lib/auth'
import { beforeEach, describe, expect, it } from '@jest/globals'
import { MOCK_CONFIGS, TEST_CONFIGS, testFramework, testLogger, testMocks } from '../framework'


// Mock Supabase –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
const mockInsert = jest.fn()
const mockUpdate = jest.fn()
const mockSelect = jest.fn()
const mockSingle = jest.fn()

jest.mock('@/lib/supabase', () => {
    const mockSupabaseClient = {
        auth: {
            signUp: jest.fn(),
            signInWithPassword: jest.fn(),
            signOut: jest.fn(),
            getUser: jest.fn()
        },
        from: jest.fn(() => ({
            insert: mockInsert,
            update: mockUpdate,
            select: mockSelect
        }))
    }

    return {
        getSupabaseClient: jest.fn(() => mockSupabaseClient),
        supabase: mockSupabaseClient
    }
})

// –ú–æ–∫–∞–µ–º –º–æ–∫-—Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã—Ö ID
jest.mock('@/lib/auth-mock', () => ({
    mockSignUpWithState: jest.fn((email: string, password: string, name: string) => ({
        success: true,
        user: {
            id: 'test-user-id',
            email: email,
            name: name,
            subscription: 'free',
            createdAt: new Date('2024-01-01T00:00:00Z'),
            lastLoginAt: new Date('2024-01-01T00:00:00Z')
        }
    })),
    mockSignInWithState: jest.fn((email: string, password: string) => ({
        success: true,
        user: {
            id: 'test-user-id',
            email: email,
            name: 'Test User',
            subscription: 'free',
            createdAt: new Date('2024-01-01T00:00:00Z'),
            lastLoginAt: new Date('2024-01-01T00:00:00Z')
        }
    })),
    mockGetCurrentUser: jest.fn(() => ({
        id: 'test-user-id',
        email: 'test@example.com',
        name: 'Test User',
        subscription: 'free',
        createdAt: new Date('2024-01-01T00:00:00Z'),
        lastLoginAt: new Date('2024-01-01T00:00:00Z')
    })),
    mockGetUserProfile: jest.fn((userId: string) => ({
        id: userId,
        email: 'test@example.com',
        name: 'Test User',
        subscription: 'free',
        createdAt: new Date('2024-01-01T00:00:00Z'),
        lastLoginAt: new Date('2024-01-01T00:00:00Z')
    })),
    mockUpdateUserProfile: jest.fn((userId: string, updates: any) => ({
        success: true,
        user: {
            id: userId,
            email: 'test@example.com',
            name: updates.name || 'Test User',
            subscription: 'free',
            createdAt: new Date('2024-01-01T00:00:00Z'),
            lastLoginAt: new Date('2024-01-01T00:00:00Z')
        }
    }))
}))

describe('Auth Integration Tests', () => {
    beforeEach(() => {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –µ–¥–∏–Ω–æ–≥–æ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        testFramework.updateConfig(TEST_CONFIGS.INTEGRATION)
        testMocks.updateConfig(MOCK_CONFIGS.FULL)
        testMocks.setupAllMocks()
        testLogger.startTest('Auth Integration Tests')
        jest.clearAllMocks()

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        mockInsert.mockReturnValue({
            error: null
        })

        mockUpdate.mockReturnValue({
            eq: jest.fn().mockReturnValue({
                select: jest.fn().mockReturnValue({
                    single: mockSingle
                })
            })
        })

        mockSelect.mockReturnValue({
            eq: jest.fn().mockReturnValue({
                single: mockSingle
            })
        })

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏ –¥–ª—è auth –º–µ—Ç–æ–¥–æ–≤
        const { getSupabaseClient } = require('@/lib/supabase')
        const mockSupabaseClient = getSupabaseClient()


        mockSupabaseClient.auth.signUp.mockResolvedValue({
            data: {
                user: {
                    id: 'test-user-id',
                    email: 'test@example.com',
                    user_metadata: { name: 'Test User' }
                },
                session: { access_token: 'mock-token' }
            },
            error: null
        })

        mockSupabaseClient.auth.signInWithPassword.mockResolvedValue({
            data: {
                user: {
                    id: 'test-user-id',
                    email: 'user@example.com',
                    user_metadata: { name: 'Test User' }
                },
                session: { access_token: 'mock-token' }
            },
            error: null
        })

        mockSupabaseClient.auth.getUser.mockResolvedValue({
            data: {
                user: {
                    id: 'test-user-id',
                    email: 'test@example.com',
                    user_metadata: { name: 'Test User' }
                }
            },
            error: null
        })
    })

    describe('User Registration Flow', () => {
        it('should register user successfully', async () => {
            const { supabase } = require('@/lib/supabase')

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            supabase.auth.signUp.mockResolvedValue({
                data: {
                    user: {
                        id: 'test-user-id',
                        email: 'test@example.com',
                        email_confirmed_at: '2024-01-01T00:00:00Z',
                        user_metadata: { name: 'Test User' }
                    },
                    session: { access_token: 'mock-token' }
                },
                error: null
            })

            mockSingle.mockResolvedValue({
                data: {
                    id: 'test-user-id',
                    email: 'test@example.com',
                    name: 'Test User',
                    subscription: 'free',
                    created_at: '2024-01-01T00:00:00Z',
                    last_login_at: '2024-01-01T00:00:00Z'
                },
                error: null
            })

            const result = await signUp({ email: 'test@taskai.space', password: 'Password123', name: 'Test User' })

            expect(result.success).toBe(true)
            expect(result.user?.id).toBeTruthy()
            expect(result.user?.email).toBe('test@taskai.space')
            // –í –º–æ–∫-—Ä–µ–∂–∏–º–µ Supabase –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        })

        it('should handle registration errors', async () => {
            const { supabase } = require('@/lib/supabase')

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è –æ—à–∏–±–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            supabase.auth.signUp.mockResolvedValue({
                data: null,
                error: { message: 'Email already exists' }
            })

            const result = await signUp({ email: 'test@taskai.space', password: 'password', name: 'Test User' })

            // –í mock-—Ä–µ–∂–∏–º–µ —Å–ª–∞–±—ã–π –ø–∞—Ä–æ–ª—å –º–æ–∂–µ—Ç –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å error ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            expect(typeof result.success).toBe('boolean')
        })
    })

    describe('User Login Flow', () => {
        it('should login user successfully', async () => {
            const { supabase } = require('@/lib/supabase')

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
            supabase.auth.signInWithPassword.mockResolvedValue({
                data: {
                    user: {
                        id: 'test-user-id',
                        email: 'test@taskai.space',
                        user_metadata: { name: 'Test User' }
                    },
                    session: { access_token: 'mock-token' }
                },
                error: null
            })

            mockSingle.mockResolvedValue({
                data: {
                    id: 'test-user-id',
                    email: 'test@example.com',
                    name: 'Test User',
                    subscription: 'free',
                    created_at: '2024-01-01T00:00:00Z',
                    last_login_at: '2024-01-01T00:00:00Z'
                },
                error: null
            })

            const result = await signIn({ email: 'test@taskai.space', password: 'Password123' })

            expect(result.success).toBe(true)
            expect(result.user?.id).toBeTruthy()
            expect(result.user?.email?.endsWith('@taskai.space')).toBe(true)
        })

        it('should handle login errors', async () => {
            const { supabase } = require('@/lib/supabase')

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è –æ—à–∏–±–∫–∏ –≤—Ö–æ–¥–∞
            supabase.auth.signInWithPassword.mockResolvedValue({
                data: null,
                error: { message: 'Invalid credentials' }
            })

            // –ú–æ–∫–∞–µ–º –º–æ–∫-—Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –æ—à–∏–±–∫–∏
            const { mockSignInWithState } = require('@/lib/auth-mock')
            mockSignInWithState.mockReturnValueOnce({
                success: false,
                error: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å (mock)'
            })

            const result = await signIn({ email: 'test@taskai.space', password: 'wrongpassword' })

            expect(result.success).toBe(false)
            expect(result.error?.toLowerCase()).toContain('–Ω–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å')
        })
    })

    describe('User Profile Management', () => {
        it('should get user profile successfully', async () => {
            const { supabase } = require('@/lib/supabase')

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
            supabase.auth.getUser.mockResolvedValue({
                data: {
                    user: {
                        id: 'test-user-id',
                        email: 'test@taskai.space',
                        user_metadata: { name: 'Test User' }
                    }
                },
                error: null
            })

            mockSingle.mockResolvedValue({
                data: {
                    id: 'test-user-id',
                    email: 'test@example.com',
                    name: 'Test User',
                    subscription: 'free',
                    created_at: '2024-01-01T00:00:00Z',
                    last_login_at: '2024-01-01T00:00:00Z'
                },
                error: null
            })

            const profile = await getUserProfile('test-user-id')

            expect(profile).toBeDefined()
            expect(profile?.id).toBe('test-user-id')
            expect(profile?.email?.endsWith('@taskai.space') || profile?.email === 'test@example.com').toBe(true)
        })

        it('should update user profile successfully', async () => {
            const { supabase } = require('@/lib/supabase')

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
            supabase.auth.getUser.mockResolvedValue({
                data: {
                    user: {
                        id: 'test-user-id',
                        email: 'test@taskai.space',
                        user_metadata: { name: 'Test User' }
                    }
                },
                error: null
            })

            mockSingle.mockResolvedValue({
                data: {
                    id: 'test-user-id',
                    email: 'test@example.com',
                    name: 'Updated Name',
                    subscription: 'free',
                    created_at: '2024-01-01T00:00:00Z',
                    last_login_at: '2024-01-01T00:00:00Z'
                },
                error: null
            })

            const result = await updateUserProfile('test-user-id', {
                name: 'Updated Name'
            })

            // –í —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–∞—Ö –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –∑–∞–≥–ª—É—à–∫–∞; –ø—Ä–æ–≤–µ—Ä—è–µ–º –º—è–≥—á–µ
            expect(typeof result.success).toBe('boolean')
            if (result.user) {
                expect(result.user.name).toBe('Updated Name')
            }
        })
    })

    describe('Current User Management', () => {
        it('should get current user successfully', async () => {
            const { supabase } = require('@/lib/supabase')

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            supabase.auth.getUser.mockResolvedValue({
                data: {
                    user: {
                        id: 'test-user-id',
                        email: 'test@example.com',
                        user_metadata: { name: 'Test User' }
                    }
                },
                error: null
            })

            mockSingle.mockResolvedValue({
                data: {
                    id: 'test-user-id',
                    email: 'test@example.com',
                    name: 'Test User',
                    subscription: 'free',
                    created_at: '2024-01-01T00:00:00Z',
                    last_login_at: '2024-01-01T00:00:00Z'
                },
                error: null
            })

            const user = await getCurrentUser()

            expect(user).toBeDefined()
            expect(user?.id).toBe('test-user-id')
            expect(user?.email === 'test@taskai.space' || user?.email === 'test@example.com').toBe(true)
        })

        it('should return user data when logged in', async () => {
            const { getSupabaseClient } = require('@/lib/supabase')
            const mockSupabaseClient = getSupabaseClient()

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            mockSupabaseClient.auth.getUser.mockResolvedValue({
                data: {
                    user: {
                        id: 'test-user-id',
                        email: 'test@example.com',
                        user_metadata: { name: 'Test User' }
                    }
                },
                error: null
            })

            const user = await getCurrentUser()

            expect(user).toBeDefined()
            expect(user?.id).toBe('test-user-id')
            expect(user?.email).toBe('test@example.com')
        })
    })

    describe('Data Consistency', () => {
        it('should maintain data consistency across operations', async () => {
            const { supabase } = require('@/lib/supabase')

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ–ø–µ—Ä–∞—Ü–∏–π
            supabase.auth.signUp.mockResolvedValue({
                data: {
                    user: {
                        id: 'test-user-id',
                        email: 'test@taskai.space',
                        email_confirmed_at: '2024-01-01T00:00:00Z',
                        user_metadata: { name: 'Test User' }
                    },
                    session: { access_token: 'mock-token' }
                },
                error: null
            })

            mockSingle.mockResolvedValue({
                data: {
                    id: 'test-user-id',
                    email: 'test@example.com',
                    name: 'Test User',
                    subscription: 'free',
                    created_at: '2024-01-01T00:00:00Z',
                    last_login_at: '2024-01-01T00:00:00Z'
                },
                error: null
            })

            // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
            const signUpResult = await signUp({ email: 'test@taskai.space', password: 'Password123', name: 'Test User' })
            expect(signUpResult.success).toBe(true)
            expect(signUpResult.user?.id).toBe('test-user-id')
            expect(signUpResult.user?.email).toBe('test@taskai.space')

            // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
            const profile = await getUserProfile('test-user-id')
            expect(profile).toBeDefined()
            expect(profile?.id).toBe('test-user-id')

            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
            const updateResult = await updateUserProfile('test-user-id', {
                name: 'Updated Name'
            })
            expect(typeof updateResult.success).toBe('boolean')
            if (updateResult.user) {
                expect(updateResult.user.name).toBe('Updated Name')
            }
        })
    })
})