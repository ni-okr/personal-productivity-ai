/**
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è Supabase API
 * 
 * –≠—Ç–∏ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–µ—Ä—è—é—Ç —Ä–µ–∞–ª—å–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å Supabase –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.
 * –ò—Å–ø–æ–ª—å–∑—É—é—Ç —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏.
 */

import { addSubscriber, getActiveSubscribers, supabase, unsubscribe } from '@/lib/supabase'

describe('üóÑÔ∏è Supabase API Integration', () => {
    const testEmail = `test-${Date.now()}@example.com`
    const testEmail2 = `test-${Date.now()}-2@example.com`

    // –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
    afterEach(async () => {
        try {
            await supabase
                .from('subscriptions')
                .delete()
                .in('email', [testEmail, testEmail2])
        } catch (error) {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:', error)
        }
    })

    describe('üìß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏', () => {
        test('‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞', async () => {
            const result = await addSubscriber(testEmail)

            expect(result.success).toBe(true)
            expect(result.message).toContain('–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É')
            expect(result.data).toBeDefined()
            expect(result.data?.email).toBe(testEmail)
            expect(result.data?.is_active).toBe(true)
        }, 10000)

        test('üîÑ –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è email', async () => {
            // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –ø–µ—Ä–≤—ã–π —Ä–∞–∑
            await addSubscriber(testEmail)

            // –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≥–æ –∂–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞
            const result = await addSubscriber(testEmail)

            expect(result.success).toBe(false)
            expect(result.message).toContain('—É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω')
        }, 10000)

        test('‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ email', async () => {
            const invalidEmails = ['', 'invalid-email', 'test@', '@example.com']

            for (const email of invalidEmails) {
                const result = await addSubscriber(email)

                // API –¥–æ–ª–∂–µ–Ω –ª–∏–±–æ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å, –ª–∏–±–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                if (!result.success) {
                    expect(result.message).toBeTruthy()
                }
            }
        }, 15000)

        test('üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤', async () => {
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
            await addSubscriber(testEmail)
            await addSubscriber(testEmail2)

            const subscribers = await getActiveSubscribers()

            expect(Array.isArray(subscribers)).toBe(true)

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞—à–∏ —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ
            const testSubscribers = subscribers.filter(s =>
                s.email === testEmail || s.email === testEmail2
            )
            expect(testSubscribers.length).toBe(2)

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
            testSubscribers.forEach(subscriber => {
                expect(subscriber).toHaveProperty('email')
                expect(subscriber).toHaveProperty('created_at')
                expect(subscriber).toHaveProperty('is_active')
                expect(subscriber.is_active).toBe(true)
            })
        }, 15000)

        test('üö´ –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', async () => {
            // –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è
            await addSubscriber(testEmail)

            // –ó–∞—Ç–µ–º –æ—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è
            const result = await unsubscribe(testEmail)

            expect(result.success).toBe(true)
            expect(result.message).toContain('–æ—Ç–ø–∏—Å–∞–ª–∏—Å—å')

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–¥–ø–∏—Å—á–∏–∫ —Å—Ç–∞–ª –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º
            const { data } = await supabase
                .from('subscriptions')
                .select('is_active')
                .eq('email', testEmail)
                .single()

            expect(data?.is_active).toBe(false)
        }, 10000)
    })

    describe('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', () => {
        test('üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Supabase', async () => {
            try {
                // –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                const { error } = await supabase
                    .from('subscriptions')
                    .select('count')
                    .limit(1)

                expect(error).toBeNull()
            } catch (error) {
                throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Supabase: ${error}`)
            }
        }, 5000)

        test('üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã —Ç–∞–±–ª–∏—Ü—ã subscriptions', async () => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            const { data, error } = await supabase
                .from('subscriptions')
                .select('*')
                .limit(1)

            expect(error).toBeNull()

            if (data && data.length > 0) {
                const subscriber = data[0]
                expect(subscriber).toHaveProperty('id')
                expect(subscriber).toHaveProperty('email')
                expect(subscriber).toHaveProperty('created_at')
                expect(subscriber).toHaveProperty('is_active')
            }
        }, 5000)
    })

    describe('‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å API', () => {
        test('üöÄ –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞', async () => {
            const startTime = Date.now()

            await addSubscriber(testEmail)

            const endTime = Date.now()
            const responseTime = endTime - startTime

            // API –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—á–∞—Ç—å –±—ã—Å—Ç—Ä–æ (–º–µ–Ω–µ–µ 3 —Å–µ–∫—É–Ω–¥)
            expect(responseTime).toBeLessThan(3000)

            console.log(`‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ API: ${responseTime}ms`)
        }, 5000)

        test('üìà –ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤', async () => {
            const testEmails = Array.from({ length: 5 }, (_, i) =>
                `bulk-test-${Date.now()}-${i}@example.com`
            )

            const startTime = Date.now()

            // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            const results = await Promise.all(
                testEmails.map(email => addSubscriber(email))
            )

            const endTime = Date.now()
            const totalTime = endTime - startTime

            // –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º–∏
            results.forEach(result => {
                expect(result.success).toBe(true)
            })

            // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            await supabase
                .from('subscriptions')
                .delete()
                .in('email', testEmails)

            console.log(`‚è±Ô∏è –í—Ä–µ–º—è –º–∞—Å—Å–æ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è 5 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: ${totalTime}ms`)

            // –ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è —Ä–∞–∑—É–º–Ω–æ –±—ã—Å—Ç—Ä–æ
            expect(totalTime).toBeLessThan(10000)
        }, 15000)
    })

    describe('üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è', () => {
        test('üîí SQL –∏–Ω—ä–µ–∫—Ü–∏–∏ –∑–∞—â–∏—Ç–∞', async () => {
            const maliciousEmails = [
                "test'; DROP TABLE subscribers; --@example.com",
                "test@example.com'; DELETE FROM subscribers; --",
                "test@example.com' OR '1'='1"
            ]

            for (const email of maliciousEmails) {
                const result = await addSubscriber(email)

                // API –¥–æ–ª–∂–µ–Ω –ª–∏–±–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å, –ª–∏–±–æ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å
                expect(typeof result.success).toBe('boolean')
                expect(typeof result.message).toBe('string')
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            const { error } = await supabase
                .from('subscriptions')
                .select('count')
                .limit(1)

            expect(error).toBeNull()
        }, 10000)

        test('üìè –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª–∏–Ω–Ω—ã—Ö email –∞–¥—Ä–µ—Å–æ–≤', async () => {
            const longEmail = 'a'.repeat(240) + '@example.com' // 240 + 12 = 252 —Å–∏–º–≤–æ–ª–∞ (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 255)

            const result = await addSubscriber(longEmail)

            // API –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ email
            expect(typeof result.success).toBe('boolean')
            expect(typeof result.message).toBe('string')
        }, 5000)
    })
})
