// üß™ Integration —Ç–µ—Å—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–ø–∏—Å–æ–∫
import '@testing-library/jest-dom'
import { SubscriptionModal } from '@/components/subscription/SubscriptionModal'
import { SubscriptionStatus } from '@/components/subscription/SubscriptionStatus'
import { useSubscription } from '@/hooks/useSubscription'
import { fireEvent, render, renderHook, screen, waitFor } from '@testing-library/react'
import { beforeEach, describe, expect, it } from '@jest/globals'

// Mock useSubscription hook
jest.mock('@/hooks/useSubscription', () => ({
    useSubscription: jest.fn()
}))

// Mock fetch
global.fetch = jest.fn()

describe('Subscription Integration', () => {
    beforeEach(() => {
        jest.clearAllMocks()
    })

    describe('SubscriptionModal', () => {
        const mockPlans = [
            {
                id: 'plan-free',
                name: 'Free',
                tier: 'free',
                price: 0,
                currency: 'RUB',
                interval: 'month',
                features: ['–ë–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏'],
                limits: { tasks: 50, aiRequests: 10, storage: 100 },
                stripePriceId: null,
                isActive: true
            },
            {
                id: 'plan-premium',
                name: 'Premium',
                tier: 'premium',
                price: 999,
                currency: 'RUB',
                interval: 'month',
                features: ['–ò–ò –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫', '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞'],
                limits: { tasks: 500, aiRequests: 1000, storage: 1000 },
                stripePriceId: 'price_premium',
                isActive: true
            }
        ]

        it('–¥–æ–ª–∂–Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –ø–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–æ–∫', async () => {
            // Mock fetch –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–∞–Ω–æ–≤
            ; (global.fetch as any).mockResolvedValueOnce({
                json: () => Promise.resolve({ success: true, data: mockPlans })
            })

            const mockOnSelectPlan = jest.fn()
            const mockOnClose = jest.fn()

            render(
                <SubscriptionModal
                    isOpen={true}
                    onClose={mockOnClose}
                    currentTier="free"
                    onSelectPlan={mockOnSelectPlan}
                />
            )

            // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–∞–Ω–æ–≤
            await waitFor(() => {
                expect(screen.getByText('Free')).toBeInTheDocument()
                expect(screen.getByText('Premium')).toBeInTheDocument()
            })

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ü–µ–Ω
            expect(screen.getByText('–ë–µ—Å–ø–ª–∞—Ç–Ω–æ')).toBeInTheDocument()
            expect(screen.getByText('‚ÇΩ999')).toBeInTheDocument()
        })

        it('–¥–æ–ª–∂–Ω–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤—ã–±–æ—Ä –ø–ª–∞–Ω–∞', async () => {
            // Mock fetch –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–∞–Ω–æ–≤
            ; (global.fetch as any).mockResolvedValueOnce({
                json: () => Promise.resolve({ success: true, data: mockPlans })
            })

            const mockOnSelectPlan = jest.fn()
            const mockOnClose = jest.fn()

            render(
                <SubscriptionModal
                    isOpen={true}
                    onClose={mockOnClose}
                    currentTier="free"
                    onSelectPlan={mockOnSelectPlan}
                />
            )

            // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–∞–Ω–æ–≤
            await waitFor(() => {
                expect(screen.getByText('Premium')).toBeInTheDocument()
            })

            // –ù–∞–∂–∏–º–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ –ø–ª–∞–Ω–∞
            const selectButton = screen.getByText('–í—ã–±—Ä–∞—Ç—å –ø–ª–∞–Ω')
            fireEvent.click(selectButton)

            expect(mockOnSelectPlan).toHaveBeenCalledWith('plan-premium')
        })

        it('–¥–æ–ª–∂–Ω–∞ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω', async () => {
            // Mock fetch –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–∞–Ω–æ–≤
            ; (global.fetch as any).mockResolvedValueOnce({
                json: () => Promise.resolve({ success: true, data: mockPlans })
            })

            const mockOnSelectPlan = jest.fn()
            const mockOnClose = jest.fn()

            render(
                <SubscriptionModal
                    isOpen={true}
                    onClose={mockOnClose}
                    currentTier="premium"
                    onSelectPlan={mockOnSelectPlan}
                />
            )

            // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–∞–Ω–æ–≤
            await waitFor(() => {
                expect(screen.getByText('–¢–µ–∫—É—â–∏–π –ø–ª–∞–Ω')).toBeInTheDocument()
            })
        })
    })

    describe('SubscriptionStatus', () => {
        const mockSubscription = {
            id: 'sub-123',
            userId: 'user-123',
            tier: 'premium',
            status: 'active',
            stripeCustomerId: 'cus_123',
            stripeSubscriptionId: 'sub_123',
            currentPeriodStart: new Date('2024-01-01'),
            currentPeriodEnd: new Date('2024-02-01'),
            cancelAtPeriodEnd: false,
            createdAt: new Date('2024-01-01'),
            updatedAt: new Date('2024-01-01')
        }

        const mockPlan = {
            id: 'plan-premium',
            name: 'Premium',
            tier: 'premium',
            price: 999,
            currency: 'RUB',
            interval: 'month',
            features: ['–ò–ò –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫'],
            limits: { tasks: 500, aiRequests: 1000, storage: 1000 },
            stripePriceId: 'price_premium',
            isActive: true
        }

        it('–¥–æ–ª–∂–Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏', async () => {
            // Mock fetch –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
            ; (global.fetch as any).mockResolvedValueOnce({
                json: () => Promise.resolve({
                    success: true,
                    data: {
                        subscription: mockSubscription,
                        plan: mockPlan
                    }
                })
            })

            const mockOnUpgrade = jest.fn()

            render(
                <SubscriptionStatus
                    userId="user-123"
                    onUpgrade={mockOnUpgrade}
                />
            )

            // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
            await waitFor(() => {
                expect(screen.getByText('Premium')).toBeInTheDocument()
                expect(screen.getByText('–ê–∫—Ç–∏–≤–Ω–∞')).toBeInTheDocument()
                expect(screen.getByText('‚ÇΩ999')).toBeInTheDocument()
            })
        })

        it('–¥–æ–ª–∂–Ω–∞ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è free –ø–ª–∞–Ω–∞', async () => {
            const freeSubscription = {
                ...mockSubscription,
                tier: 'free'
            }

            const freePlan = {
                ...mockPlan,
                tier: 'free',
                price: 0
            }

                // Mock fetch –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
                ; (global.fetch as any).mockResolvedValueOnce({
                    json: () => Promise.resolve({
                        success: true,
                        data: {
                            subscription: freeSubscription,
                            plan: freePlan
                        }
                    })
                })

            const mockOnUpgrade = jest.fn()

            render(
                <SubscriptionStatus
                    userId="user-123"
                    onUpgrade={mockOnUpgrade}
                />
            )

            // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
            await waitFor(() => {
                expect(screen.getByText('–û–±–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω')).toBeInTheDocument()
            })

            // –ù–∞–∂–∏–º–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            const upgradeButton = screen.getByText('–û–±–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω')
            fireEvent.click(upgradeButton)

            expect(mockOnUpgrade).toHaveBeenCalled()
        })

        it('–¥–æ–ª–∂–Ω–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏', async () => {
            // Mock fetch —Å –æ—à–∏–±–∫–æ–π
            ; (global.fetch as any).mockResolvedValueOnce({
                json: () => Promise.resolve({
                    success: false,
                    error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏'
                })
            })

            const mockOnUpgrade = jest.fn()

            render(
                <SubscriptionStatus
                    userId="user-123"
                    onUpgrade={mockOnUpgrade}
                />
            )

            // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
            await waitFor(() => {
                expect(screen.getByText('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏')).toBeInTheDocument()
            })
        })
    })

    describe('useSubscription Hook', () => {
        it('–¥–æ–ª–∂–Ω–∞ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏', async () => {
            const mockSubscription = {
                id: 'sub-123',
                userId: 'user-123',
                tier: 'premium',
                status: 'active'
            }

            const mockPlan = {
                id: 'plan-premium',
                name: 'Premium',
                tier: 'premium',
                price: 999
            }

                // Mock fetch –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
                ; (global.fetch as any).mockResolvedValueOnce({
                    json: () => Promise.resolve({
                        success: true,
                        data: {
                            subscription: mockSubscription,
                            plan: mockPlan
                        }
                    })
                })

            const { result } = renderHook(() => useSubscription())

            // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
            await waitFor(() => {
                expect(result.current.isLoading).toBe(false)
            })

            expect(result.current.subscription).toEqual(mockSubscription)
            expect(result.current.plan).toEqual(mockPlan)
        })

        it('–¥–æ–ª–∂–Ω–∞ —Å–æ–∑–¥–∞–≤–∞—Ç—å checkout —Å–µ—Å—Å–∏—é', async () => {
            const mockCheckoutSession = {
                id: 'cs_123',
                url: 'https://checkout.stripe.com/c/pay/cs_123'
            }

                // Mock fetch –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è checkout —Å–µ—Å—Å–∏–∏
                ; (global.fetch as any).mockResolvedValueOnce({
                    json: () => Promise.resolve({
                        success: true,
                        data: mockCheckoutSession
                    })
                })

            const { result } = renderHook(() => useSubscription())

            const checkoutResult = await result.current.createCheckoutSession('plan-premium')

            expect(checkoutResult.success).toBe(true)
            expect(checkoutResult.url).toBe(mockCheckoutSession.url)
        })
    })
})
