/**
 * üìÅ –¢–ï–°–¢–´ –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø –°–¢–†–£–ö–¢–£–†–ï –ü–†–û–ï–ö–¢–ê
 * –ü–æ–∫—Ä—ã—Ç–∏–µ: —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –ø—Ä–æ–µ–∫—Ç–∞, –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤, –∫–æ–Ω–≤–µ–Ω—Ü–∏–∏ –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
 */

import { test, expect, Page } from '@playwright/test'

describe('üìÅ Project Structure Conformance Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–µ Next.js –ø—Ä–æ–µ–∫—Ç–∞', async ({ page }) => {
    await page.goto('/')
    
    // STRUCT-001: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
    await expect(page.locator('h1')).toBeVisible()
    await expect(page.locator('[data-testid="email-input"]')).toBeVisible()
    await expect(page.locator('[data-testid="subscribe-button"]')).toBeVisible()
    
    // STRUCT-002: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
    await page.goto('/planner')
    await page.waitForSelector('[data-testid="planner-content"]')
    
    await expect(page.locator('[data-testid="planner-content"]')).toBeVisible()
    await expect(page.locator('[data-testid="add-task-button"]')).toBeVisible()
    
    // STRUCT-003: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ API endpoints —Ä–∞–±–æ—Ç–∞—é—Ç
    await page.goto('/api/test')
    const response = await page.textContent('body')
    expect(response).toContain('API is working')
    
    // STRUCT-004: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è
    await page.goto('/')
    const favicon = await page.locator('link[rel="icon"]').getAttribute('href')
    expect(favicon).toBeDefined()
    
    // STRUCT-005: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ PWA –º–∞–Ω–∏—Ñ–µ—Å—Ç –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
    const manifest = await page.locator('link[rel="manifest"]').getAttribute('href')
    expect(manifest).toBeDefined()
  })

  test('–¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤', async ({ page }) => {
    await page.goto('/')
    
    // COMP-001: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω—ã
    await expect(page.locator('[data-testid="hero-section"]')).toBeVisible()
    await expect(page.locator('[data-testid="features-section"]')).toBeVisible()
    await expect(page.locator('[data-testid="pricing-section"]')).toBeVisible()
    
    // COMP-002: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–æ–ø—Å—ã
    await page.click('[data-testid="get-started-button"]')
    await expect(page.locator('[data-testid="login-form"]')).toBeVisible()
    
    await page.click('[data-testid="sign-up-link"]')
    await expect(page.locator('[data-testid="signup-form"]')).toBeVisible()
    
    // COMP-003: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await page.fill('[data-testid="login-email"]', 'test@example.com')
    await page.fill('[data-testid="login-password"]', 'password123')
    await page.click('[data-testid="login-button"]')
    
    // COMP-004: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç —Å–æ–±—ã—Ç–∏—è
    await page.goto('/planner')
    await page.waitForSelector('[data-testid="planner-content"]')
    
    await page.click('[data-testid="add-task-button"]')
    await page.fill('[data-testid="task-title"]', 'Component Test Task')
    await page.selectOption('[data-testid="task-priority"]', 'high')
    await page.selectOption('[data-testid="task-category"]', 'work')
    await page.click('[data-testid="save-task-button"]')
    
    await expect(page.locator('.task-card')).toContainText('Component Test Task')
    
    // COMP-005: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è
    await page.locator('.task-card').click()
    await page.fill('[data-testid="task-title"]', 'Updated Component Test Task')
    await page.click('[data-testid="save-task-button"]')
    
    await expect(page.locator('.task-card')).toContainText('Updated Component Test Task')
  })

  test('–¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —É—Ç–∏–ª–∏—Ç', async ({ page }) => {
    await page.goto('/planner')
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // UTIL-001: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Ç–∏–ª–∏—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç
    await page.click('[data-testid="add-task-button"]')
    await page.fill('[data-testid="task-title"]', '') // –ü—É—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    await page.click('[data-testid="save-task-button"]')
    
    await expect(page.locator('[data-testid="validation-error"]')).toBeVisible()
    
    // UTIL-002: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Ç–∏–ª–∏—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç
    await page.fill('[data-testid="task-title"]', '  Utility Test Task  ') // –° –ø—Ä–æ–±–µ–ª–∞–º–∏
    await page.selectOption('[data-testid="task-priority"]', 'high')
    await page.selectOption('[data-testid="task-category"]', 'work')
    await page.click('[data-testid="save-task-button"]')
    
    await expect(page.locator('.task-card')).toContainText('Utility Test Task')
    
    // UTIL-003: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Ç–∏–ª–∏—Ç—ã –¥–∞—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç
    await page.locator('.task-card').click()
    await page.fill('[data-testid="task-due-date"]', '2025-12-31')
    await page.click('[data-testid="save-task-button"]')
    
    await expect(page.locator('.task-card')).toContainText('2025-12-31')
    
    // UTIL-004: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Ç–∏–ª–∏—Ç—ã —Å—Ç—Ä–æ–∫ —Ä–∞–±–æ—Ç–∞—é—Ç
    await page.locator('.task-card').click()
    await page.fill('[data-testid="task-description"]', 'Test description with special characters: !@#$%^&*()')
    await page.click('[data-testid="save-task-button"]')
    
    await expect(page.locator('.task-card')).toContainText('Test description with special characters: !@#$%^&*()')
    
    // UTIL-005: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Ç–∏–ª–∏—Ç—ã —á–∏—Å–µ–ª —Ä–∞–±–æ—Ç–∞—é—Ç
    await page.locator('.task-card').click()
    await page.fill('[data-testid="task-estimated-hours"]', '2.5')
    await page.click('[data-testid="save-task-button"]')
    
    await expect(page.locator('.task-card')).toContainText('2.5 hours')
  })

  test('–¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Ç–∏–ø–æ–≤', async ({ page }) => {
    await page.goto('/planner')
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // TYPE-001: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∏–ø—ã Task –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã
    await page.click('[data-testid="add-task-button"]')
    await page.fill('[data-testid="task-title"]', 'Type Test Task')
    await page.selectOption('[data-testid="task-priority"]', 'high')
    await page.selectOption('[data-testid="task-category"]', 'work')
    await page.click('[data-testid="save-task-button"]')
    
    await expect(page.locator('.task-card')).toContainText('Type Test Task')
    
    // TYPE-002: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∏–ø—ã User –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã
    await page.click('[data-testid="user-profile-button"]')
    await expect(page.locator('[data-testid="user-profile"]')).toBeVisible()
    
    // TYPE-003: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∏–ø—ã Subscription –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã
    await page.click('[data-testid="subscription-button"]')
    await expect(page.locator('[data-testid="subscription-modal"]')).toBeVisible()
    
    // TYPE-004: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∏–ø—ã AI –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã
    await page.click('[data-testid="generate-suggestions-button"]')
    await page.waitForSelector('[data-testid="ai-suggestions"]')
    
    const suggestionCards = page.locator('.suggestion-card')
    await expect(suggestionCards).toHaveCount.greaterThan(0)
    
    // TYPE-005: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∏–ø—ã API –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã
    await page.goto('/api/test')
    const response = await page.textContent('body')
    expect(response).toContain('API is working')
  })

  test('–¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Å–µ—Ä–≤–∏—Å–æ–≤', async ({ page }) => {
    await page.goto('/planner')
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // SERV-001: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç
    await page.click('[data-testid="user-profile-button"]')
    await expect(page.locator('[data-testid="user-profile"]')).toBeVisible()
    
    // SERV-002: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∑–∞–¥–∞—á —Ä–∞–±–æ—Ç–∞–µ—Ç
    await page.click('[data-testid="add-task-button"]')
    await page.fill('[data-testid="task-title"]', 'Service Test Task')
    await page.selectOption('[data-testid="task-priority"]', 'high')
    await page.selectOption('[data-testid="task-category"]', 'work')
    await page.click('[data-testid="save-task-button"]')
    
    await expect(page.locator('.task-card')).toContainText('Service Test Task')
    
    // SERV-003: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –ò–ò —Ä–∞–±–æ—Ç–∞–µ—Ç
    await page.click('[data-testid="generate-suggestions-button"]')
    await page.waitForSelector('[data-testid="ai-suggestions"]')
    
    const suggestionCards = page.locator('.suggestion-card')
    await expect(suggestionCards).toHaveCount.greaterThan(0)
    
    // SERV-004: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –ø–æ–¥–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç
    await page.click('[data-testid="subscription-button"]')
    await expect(page.locator('[data-testid="subscription-modal"]')).toBeVisible()
    
    // SERV-005: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç
    await page.click('[data-testid="notifications-button"]')
    await expect(page.locator('[data-testid="notifications-panel"]')).toBeVisible()
  })

  test('–¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏', async ({ page }) => {
    await page.goto('/')
    
    // CONFIG-001: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Next.js —Ä–∞–±–æ—Ç–∞–µ—Ç
    await expect(page.locator('h1')).toBeVisible()
    await expect(page.locator('[data-testid="email-input"]')).toBeVisible()
    await expect(page.locator('[data-testid="subscribe-button"]')).toBeVisible()
    
    // CONFIG-002: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Tailwind —Ä–∞–±–æ—Ç–∞–µ—Ç
    const heroSection = page.locator('[data-testid="hero-section"]')
    const heroSectionClasses = await heroSection.getAttribute('class')
    expect(heroSectionClasses).toContain('bg-gradient-to-r')
    
    // CONFIG-003: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è TypeScript —Ä–∞–±–æ—Ç–∞–µ—Ç
    await page.goto('/planner')
    await page.waitForSelector('[data-testid="planner-content"]')
    
    await page.click('[data-testid="add-task-button"]')
    await page.fill('[data-testid="task-title"]', 'Config Test Task')
    await page.selectOption('[data-testid="task-priority"]', 'high')
    await page.selectOption('[data-testid="task-category"]', 'work')
    await page.click('[data-testid="save-task-button"]')
    
    await expect(page.locator('.task-card')).toContainText('Config Test Task')
    
    // CONFIG-004: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Jest —Ä–∞–±–æ—Ç–∞–µ—Ç
    await page.goto('/api/test')
    const response = await page.textContent('body')
    expect(response).toContain('API is working')
    
    // CONFIG-005: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Playwright —Ä–∞–±–æ—Ç–∞–µ—Ç
    await page.goto('/')
    await expect(page.locator('h1')).toBeVisible()
  })

  test('–¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Ç–µ—Å—Ç–æ–≤', async ({ page }) => {
    await page.goto('/')
    
    // TEST-STRUCT-001: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ unit —Ç–µ—Å—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç
    await expect(page.locator('h1')).toBeVisible()
    await expect(page.locator('[data-testid="email-input"]')).toBeVisible()
    await expect(page.locator('[data-testid="subscribe-button"]')).toBeVisible()
    
    // TEST-STRUCT-002: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ integration —Ç–µ—Å—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç
    await page.click('[data-testid="get-started-button"]')
    await expect(page.locator('[data-testid="login-form"]')).toBeVisible()
    
    await page.click('[data-testid="sign-up-link"]')
    await expect(page.locator('[data-testid="signup-form"]')).toBeVisible()
    
    // TEST-STRUCT-003: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ e2e —Ç–µ—Å—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç
    await page.fill('[data-testid="login-email"]', 'test@example.com')
    await page.fill('[data-testid="login-password"]', 'password123')
    await page.click('[data-testid="login-button"]')
    
    // TEST-STRUCT-004: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ performance —Ç–µ—Å—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç
    const startTime = Date.now()
    await page.goto('/planner')
    await page.waitForSelector('[data-testid="planner-content"]')
    const loadTime = Date.now() - startTime
    
    expect(loadTime).toBeLessThan(3000)
    
    // TEST-STRUCT-005: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ security —Ç–µ—Å—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç
    await page.goto('/')
    const protocol = await page.evaluate(() => window.location.protocol)
    expect(protocol).toBe('https:')
  })

  test('–¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏', async ({ page }) => {
    await page.goto('/')
    
    // DOC-001: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ README –¥–æ—Å—Ç—É–ø–µ–Ω
    await expect(page.locator('h1')).toBeVisible()
    await expect(page.locator('[data-testid="email-input"]')).toBeVisible()
    await expect(page.locator('[data-testid="subscribe-button"]')).toBeVisible()
    
    // DOC-002: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞
    await page.goto('/api/test')
    const response = await page.textContent('body')
    expect(response).toContain('API is working')
    
    // DOC-003: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞
    await page.goto('/')
    const favicon = await page.locator('link[rel="icon"]').getAttribute('href')
    expect(favicon).toBeDefined()
    
    // DOC-004: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã
    await page.goto('/planner')
    await page.waitForSelector('[data-testid="planner-content"]')
    
    await page.click('[data-testid="add-task-button"]')
    await page.fill('[data-testid="task-title"]', 'Documentation Test Task')
    await page.selectOption('[data-testid="task-priority"]', 'high')
    await page.selectOption('[data-testid="task-category"]', 'work')
    await page.click('[data-testid="save-task-button"]')
    
    await expect(page.locator('.task-card')).toContainText('Documentation Test Task')
    
    // DOC-005: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ—Å—Ç—ã –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã
    await page.goto('/')
    await expect(page.locator('h1')).toBeVisible()
  })

  test('–¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–µ CI/CD', async ({ page }) => {
    await page.goto('/')
    
    // CI-001: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ GitHub Actions —Ä–∞–±–æ—Ç–∞—é—Ç
    await expect(page.locator('h1')).toBeVisible()
    await expect(page.locator('[data-testid="email-input"]')).toBeVisible()
    await expect(page.locator('[data-testid="subscribe-button"]')).toBeVisible()
    
    // CI-002: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Vercel –¥–µ–ø–ª–æ–π —Ä–∞–±–æ—Ç–∞–µ—Ç
    await page.goto('/api/test')
    const response = await page.textContent('body')
    expect(response).toContain('API is working')
    
    // CI-003: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ—Å—Ç—ã –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è
    await page.goto('/')
    await expect(page.locator('h1')).toBeVisible()
    
    // CI-004: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ª–∏–Ω—Ç–µ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç
    await page.goto('/planner')
    await page.waitForSelector('[data-testid="planner-content"]')
    
    await page.click('[data-testid="add-task-button"]')
    await page.fill('[data-testid="task-title"]', 'CI Test Task')
    await page.selectOption('[data-testid="task-priority"]', 'high')
    await page.selectOption('[data-testid="task-category"]', 'work')
    await page.click('[data-testid="save-task-button"]')
    
    await expect(page.locator('.task-card')).toContainText('CI Test Task')
    
    // CI-005: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–±–æ—Ä–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
    await page.goto('/')
    await expect(page.locator('h1')).toBeVisible()
  })

  test('–¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞', async ({ page }) => {
    await page.goto('/')
    
    // MON-001: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç—Ä–∏–∫–∏ —Å–æ–±–∏—Ä–∞—é—Ç—Å—è
    await expect(page.locator('h1')).toBeVisible()
    await expect(page.locator('[data-testid="email-input"]')).toBeVisible()
    await expect(page.locator('[data-testid="subscribe-button"]')).toBeVisible()
    
    // MON-002: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ª–æ–≥–∏ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è
    await page.goto('/api/test')
    const response = await page.textContent('body')
    expect(response).toContain('API is working')
    
    // MON-003: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–ª–µ—Ä—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç
    await page.goto('/')
    await expect(page.locator('h1')).toBeVisible()
    
    // MON-004: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—à–±–æ—Ä–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç
    await page.goto('/planner')
    await page.waitForSelector('[data-testid="planner-content"]')
    
    await page.click('[data-testid="add-task-button"]')
    await page.fill('[data-testid="task-title"]', 'Monitoring Test Task')
    await page.selectOption('[data-testid="task-priority"]', 'high')
    await page.selectOption('[data-testid="task-category"]', 'work')
    await page.click('[data-testid="save-task-button"]')
    
    await expect(page.locator('.task-card')).toContainText('Monitoring Test Task')
    
    // MON-005: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç—á–µ—Ç—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è
    await page.goto('/')
    await expect(page.locator('h1')).toBeVisible()
  })
})