/**
 * üß¨ –¢–ï–°–¢–´ –ú–£–¢–ê–¶–ò–û–ù–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
 * –ü–æ–∫—Ä—ã—Ç–∏–µ: –∫–∞—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤, –ø–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞, —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
 */

import { test, expect, Page } from '@playwright/test'

describe('üî¨ Basic Mutation Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞—Ç—å –º—É—Ç–∞—Ü–∏–∏ –≤ –ª–æ–≥–∏–∫–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏', async ({ page }) => {
    await page.goto('/')
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é email
    const emailInput = page.locator('[data-testid="email-input"]')
    const subscribeButton = page.locator('[data-testid="subscribe-button"]')
    
    // –í–∞–ª–∏–¥–Ω—ã–π email
    await emailInput.fill('test@example.com')
    await subscribeButton.click()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç
    const statusElement = page.locator('[data-testid="subscription-status"]')
    await expect(statusElement).toBeVisible()
    
    // –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π email
    await emailInput.fill('invalid-email')
    await subscribeButton.click()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π email
    const errorMessage = page.locator('.error-message')
    if (await errorMessage.count() > 0) {
      const errorText = await errorMessage.textContent()
      expect(errorText).toContain('email')
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞—Ç—å –º—É—Ç–∞—Ü–∏–∏ –≤ –ª–æ–≥–∏–∫–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏', async ({ page }) => {
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    const links = page.locator('a')
    const linkCount = await links.count()
    
    for (let i = 0; i < linkCount; i++) {
      const link = links.nth(i)
      const href = await link.getAttribute('href')
      const isVisible = await link.isVisible()
      
      if (isVisible && href && !href.startsWith('http')) {
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –ø–æ —Å—Å—ã–ª–∫–µ
        await link.click()
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
        await expect(page.locator('body')).toBeVisible()
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥
        await page.goBack()
      }
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞—Ç—å –º—É—Ç–∞—Ü–∏–∏ –≤ –ª–æ–≥–∏–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è', async ({ page }) => {
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
      localStorage.setItem('auth-token', 'mock-token')
      localStorage.setItem('user', JSON.stringify({
        id: 'user-1',
        email: 'test@example.com',
        name: 'Test User',
        subscription: 'free'
      }))
    })
    
    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–¥–∞–ª–∞
    const modal = page.locator('[data-testid="task-modal"]')
    await expect(modal).not.toBeVisible()
    
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª
    await page.click('[data-testid="add-task-button"]')
    await expect(modal).toBeVisible()
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª
    await page.keyboard.press('Escape')
    await expect(modal).not.toBeVisible()
  })
})

describe('üéØ Conditional Mutation Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞—Ç—å –º—É—Ç–∞—Ü–∏–∏ –≤ —É—Å–ª–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–µ', async ({ page }) => {
    await page.goto('/')
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —É—Å–ª–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
    const states = [
      { email: '', expected: 'empty' },
      { email: 'test@example.com', expected: 'valid' },
      { email: 'invalid-email', expected: 'invalid' }
    ]
    
    for (const state of states) {
      const emailInput = page.locator('[data-testid="email-input"]')
      const subscribeButton = page.locator('[data-testid="subscribe-button"]')
      
      await emailInput.fill(state.email)
      await subscribeButton.click()
      
      if (state.expected === 'valid') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π email –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è
        const statusElement = page.locator('[data-testid="subscription-status"]')
        await expect(statusElement).toBeVisible()
      } else if (state.expected === 'invalid') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π email –æ—Ç–∫–ª–æ–Ω—è–µ—Ç—Å—è
        const errorMessage = page.locator('.error-message')
        if (await errorMessage.count() > 0) {
          const errorText = await errorMessage.textContent()
          expect(errorText).toContain('email')
        }
      } else if (state.expected === 'empty') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—É—Å—Ç–æ–π email –æ—Ç–∫–ª–æ–Ω—è–µ—Ç—Å—è
        const errorMessage = page.locator('.error-message')
        if (await errorMessage.count() > 0) {
          const errorText = await errorMessage.textContent()
          expect(errorText).toContain('–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ')
        }
      }
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞—Ç—å –º—É—Ç–∞—Ü–∏–∏ –≤ –ª–æ–≥–∏–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏', async ({ page }) => {
    await page.goto('/planner')
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const authStates = [
      { user: null, expected: 'redirect' },
      { user: { id: '', email: '', name: '' }, expected: 'error' },
      { user: { id: 'user-1', email: 'test@example.com', name: 'Test User', subscription: 'free' }, expected: 'success' }
    ]
    
    for (const authState of authStates) {
      await page.evaluate((userState) => {
        if (userState.user) {
          localStorage.setItem('user', JSON.stringify(userState.user))
          localStorage.setItem('auth-token', 'mock-token')
        } else {
          localStorage.removeItem('user')
          localStorage.removeItem('auth-token')
        }
      }, authState)
      
      await page.reload()
      
      if (authState.expected === 'success') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç –∫–æ–Ω—Ç–µ–Ω—Ç
        await expect(page.locator('[data-testid="planner-content"]')).toBeVisible()
      } else if (authState.expected === 'redirect') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è
        await expect(page.locator('body')).toBeVisible()
      } else if (authState.expected === 'error') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—ã–∑—ã–≤–∞—é—Ç –æ—à–∏–±–∫—É
        await expect(page.locator('body')).toBeVisible()
      }
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞—Ç—å –º—É—Ç–∞—Ü–∏–∏ –≤ –ª–æ–≥–∏–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫', async ({ page }) => {
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
      localStorage.setItem('auth-token', 'mock-token')
      localStorage.setItem('user', JSON.stringify({
        id: 'user-1',
        email: 'test@example.com',
        name: 'Test User',
        subscription: 'free'
      }))
    })
    
    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –ø–æ–¥–ø–∏—Å–æ–∫
    const subscriptionTypes = ['free', 'premium', 'pro']
    
    for (const subscriptionType of subscriptionTypes) {
      await page.evaluate((type) => {
        const user = JSON.parse(localStorage.getItem('user') || '{}')
        user.subscription = type
        localStorage.setItem('user', JSON.stringify(user))
      }, subscriptionType)
      
      await page.reload()
      await page.waitForSelector('[data-testid="planner-content"]')
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–Ω—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –ø–æ–¥–ø–∏—Å–æ–∫
      await expect(page.locator('[data-testid="planner-content"]')).toBeVisible()
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏
      if (subscriptionType === 'premium' || subscriptionType === 'pro') {
        const aiSection = page.locator('[data-testid="ai-section"]')
        if (await aiSection.count() > 0) {
          await expect(aiSection).toBeVisible()
        }
      }
    }
  })
})

describe('üîÑ Loop Mutation Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞—Ç—å –º—É—Ç–∞—Ü–∏–∏ –≤ —Ü–∏–∫–ª–∞—Ö –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö', async ({ page }) => {
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
      localStorage.setItem('auth-token', 'mock-token')
      localStorage.setItem('user', JSON.stringify({
        id: 'user-1',
        email: 'test@example.com',
        name: 'Test User',
        subscription: 'free'
      }))
    })
    
    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á
    const taskCount = 5
    for (let i = 0; i < taskCount; i++) {
      await page.click('[data-testid="add-task-button"]')
      await page.fill('[data-testid="task-title"]', `Task ${i}`)
      await page.click('[data-testid="save-task-button"]')
      await page.waitForTimeout(100)
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∑–∞–¥–∞—á–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è
    const taskCards = page.locator('.task-card')
    const loadedTaskCount = await taskCards.count()
    expect(loadedTaskCount).toBeGreaterThan(0)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–Ω–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–µ–π
    for (let i = 0; i < loadedTaskCount; i++) {
      const taskCard = taskCards.nth(i)
      await expect(taskCard).toBeVisible()
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ –∏–º–µ–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
      const title = taskCard.locator('[data-testid="task-title"]')
      if (await title.count() > 0) {
        await expect(title).toBeVisible()
      }
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞—Ç—å –º—É—Ç–∞—Ü–∏–∏ –≤ —Ü–∏–∫–ª–∞—Ö –≤–∞–ª–∏–¥–∞—Ü–∏–∏', async ({ page }) => {
    await page.goto('/')
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π
    const testCases = [
      { email: 'test1@example.com', expected: 'valid' },
      { email: 'test2@example.com', expected: 'valid' },
      { email: 'invalid1', expected: 'invalid' },
      { email: 'invalid2', expected: 'invalid' },
      { email: '', expected: 'empty' }
    ]
    
    for (const testCase of testCases) {
      const emailInput = page.locator('[data-testid="email-input"]')
      const subscribeButton = page.locator('[data-testid="subscribe-button"]')
      
      await emailInput.fill(testCase.email)
      await subscribeButton.click()
      
      if (testCase.expected === 'valid') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π email –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è
        const statusElement = page.locator('[data-testid="subscription-status"]')
        await expect(statusElement).toBeVisible()
      } else if (testCase.expected === 'invalid') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π email –æ—Ç–∫–ª–æ–Ω—è–µ—Ç—Å—è
        const errorMessage = page.locator('.error-message')
        if (await errorMessage.count() > 0) {
          const errorText = await errorMessage.textContent()
          expect(errorText).toContain('email')
        }
      } else if (testCase.expected === 'empty') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—É—Å—Ç–æ–π email –æ—Ç–∫–ª–æ–Ω—è–µ—Ç—Å—è
        const errorMessage = page.locator('.error-message')
        if (await errorMessage.count() > 0) {
          const errorText = await errorMessage.textContent()
          expect(errorText).toContain('–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ')
        }
      }
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞—Ç—å –º—É—Ç–∞—Ü–∏–∏ –≤ —Ü–∏–∫–ª–∞—Ö —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞', async ({ page }) => {
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const elements = page.locator('h1, h2, h3, p, button, a, input')
    const elementCount = await elements.count()
    
    for (let i = 0; i < elementCount; i++) {
      const element = elements.nth(i)
      const isVisible = await element.isVisible()
      
      if (isVisible) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –∏–º–µ–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
        const tagName = await element.evaluate(el => el.tagName.toLowerCase())
        
        if (tagName === 'input') {
          const type = await element.getAttribute('type')
          expect(type).toBeTruthy()
        } else if (tagName === 'button') {
          const type = await element.getAttribute('type')
          expect(type).toBeTruthy()
        } else if (tagName === 'a') {
          const href = await element.getAttribute('href')
          expect(href).toBeTruthy()
        }
      }
    }
  })
})

describe('üîÄ Branch Mutation Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞—Ç—å –º—É—Ç–∞—Ü–∏–∏ –≤ –≤–µ—Ç–≤–ª–µ–Ω–∏—è—Ö', async ({ page }) => {
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
      localStorage.setItem('auth-token', 'mock-token')
      localStorage.setItem('user', JSON.stringify({
        id: 'user-1',
        email: 'test@example.com',
        name: 'Test User',
        subscription: 'free'
      }))
    })
    
    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–µ—Ç–≤–ª–µ–Ω–∏—è –≤ –ª–æ–≥–∏–∫–µ –∑–∞–¥–∞—á
    const taskStates = [
      { title: 'Task 1', description: 'Description 1', completed: false },
      { title: 'Task 2', description: 'Description 2', completed: true },
      { title: 'Task 3', description: '', completed: false }
    ]
    
    for (const taskState of taskStates) {
      await page.click('[data-testid="add-task-button"]')
      await page.fill('[data-testid="task-title"]', taskState.title)
      
      if (taskState.description) {
        await page.fill('[data-testid="task-description"]', taskState.description)
      }
      
      await page.click('[data-testid="save-task-button"]')
      await page.waitForTimeout(100)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞
      const taskCards = page.locator('.task-card')
      const taskCount = await taskCards.count()
      expect(taskCount).toBeGreaterThan(0)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      const lastTask = taskCards.last()
      await expect(lastTask).toBeVisible()
      
      if (taskState.completed) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞
        const completedIndicator = lastTask.locator('[data-testid="completed-indicator"]')
        if (await completedIndicator.count() > 0) {
          await expect(completedIndicator).toBeVisible()
        }
      }
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞—Ç—å –º—É—Ç–∞—Ü–∏–∏ –≤ —É—Å–ª–æ–≤–Ω—ã—Ö —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞—Ö', async ({ page }) => {
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
      localStorage.setItem('auth-token', 'mock-token')
      localStorage.setItem('user', JSON.stringify({
        id: 'user-1',
        email: 'test@example.com',
        name: 'Test User',
        subscription: 'free'
      }))
    })
    
    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —É—Å–ª–æ–≤–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
    const states = [
      { hasTasks: false, expected: 'empty' },
      { hasTasks: true, expected: 'populated' }
    ]
    
    for (const state of states) {
      if (state.hasTasks) {
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
        await page.click('[data-testid="add-task-button"]')
        await page.fill('[data-testid="task-title"]', 'Test Task')
        await page.click('[data-testid="save-task-button"]')
        await page.waitForTimeout(100)
      }
      
      if (state.expected === 'empty') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—É—Å—Ç–æ–º —Å–ø–∏—Å–∫–µ
        const emptyMessage = page.locator('[data-testid="empty-message"]')
        if (await emptyMessage.count() > 0) {
          await expect(emptyMessage).toBeVisible()
        }
      } else if (state.expected === 'populated') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –∑–∞–¥–∞—á–∏
        const taskCards = page.locator('.task-card')
        const taskCount = await taskCards.count()
        expect(taskCount).toBeGreaterThan(0)
      }
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞—Ç—å –º—É—Ç–∞—Ü–∏–∏ –≤ –ª–æ–≥–∏–∫–µ –æ—à–∏–±–æ–∫', async ({ page }) => {
    await page.goto('/')
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫
    const errorTypes = [
      { input: '', type: 'empty' },
      { input: 'invalid-email', type: 'invalid' },
      { input: 'a'.repeat(1000), type: 'too-long' }
    ]
    
    for (const errorType of errorTypes) {
      const emailInput = page.locator('[data-testid="email-input"]')
      const subscribeButton = page.locator('[data-testid="subscribe-button"]')
      
      await emailInput.fill(errorType.input)
      await subscribeButton.click()
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      const errorMessage = page.locator('.error-message')
      if (await errorMessage.count() > 0) {
        const errorText = await errorMessage.textContent()
        
        if (errorType.type === 'empty') {
          expect(errorText).toContain('–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ')
        } else if (errorType.type === 'invalid') {
          expect(errorText).toContain('email')
        } else if (errorType.type === 'too-long') {
          expect(errorText).toContain('–¥–ª–∏–Ω–Ω')
        }
      }
    }
  })
})

describe('üéØ Boundary Mutation Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞—Ç—å –º—É—Ç–∞—Ü–∏–∏ –≤ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö', async ({ page }) => {
    await page.goto('/')
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è email
    const boundaryCases = [
      { email: 'a@b.co', expected: 'valid' }, // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–∞–ª–∏–¥–Ω—ã–π email
      { email: 'test@example.com', expected: 'valid' }, // –û–±—ã—á–Ω—ã–π email
      { email: 'a'.repeat(100) + '@example.com', expected: 'valid' }, // –î–ª–∏–Ω–Ω—ã–π –ª–æ–∫–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å
      { email: 'test@' + 'a'.repeat(100) + '.com', expected: 'valid' }, // –î–ª–∏–Ω–Ω—ã–π –¥–æ–º–µ–Ω
      { email: 'a@b', expected: 'invalid' }, // –ù–µ–ø–æ–ª–Ω—ã–π –¥–æ–º–µ–Ω
      { email: '@example.com', expected: 'invalid' }, // –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å
      { email: 'test@', expected: 'invalid' } // –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–æ–º–µ–Ω
    ]
    
    for (const boundaryCase of boundaryCases) {
      const emailInput = page.locator('[data-testid="email-input"]')
      const subscribeButton = page.locator('[data-testid="subscribe-button"]')
      
      await emailInput.fill(boundaryCase.email)
      await subscribeButton.click()
      
      if (boundaryCase.expected === 'valid') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π email –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è
        const statusElement = page.locator('[data-testid="subscription-status"]')
        await expect(statusElement).toBeVisible()
      } else if (boundaryCase.expected === 'invalid') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π email –æ—Ç–∫–ª–æ–Ω—è–µ—Ç—Å—è
        const errorMessage = page.locator('.error-message')
        if (await errorMessage.count() > 0) {
          const errorText = await errorMessage.textContent()
          expect(errorText).toContain('email')
        }
      }
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞—Ç—å –º—É—Ç–∞—Ü–∏–∏ –≤ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö –∑–∞–¥–∞—á', async ({ page }) => {
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
      localStorage.setItem('auth-token', 'mock-token')
      localStorage.setItem('user', JSON.stringify({
        id: 'user-1',
        email: 'test@example.com',
        name: 'Test User',
        subscription: 'free'
      }))
    })
    
    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –∑–∞–¥–∞—á
    const boundaryCases = [
      { title: 'A', description: 'B', expected: 'valid' }, // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      { title: 'A'.repeat(1000), description: 'B'.repeat(1000), expected: 'valid' }, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      { title: '', description: 'Description', expected: 'invalid' }, // –ü—É—Å—Ç–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
      { title: 'Title', description: '', expected: 'valid' }, // –ü—É—Å—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
      { title: 'A'.repeat(10000), description: 'B', expected: 'invalid' } // –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    ]
    
    for (const boundaryCase of boundaryCases) {
      await page.click('[data-testid="add-task-button"]')
      await page.fill('[data-testid="task-title"]', boundaryCase.title)
      await page.fill('[data-testid="task-description"]', boundaryCase.description)
      await page.click('[data-testid="save-task-button"]')
      
      if (boundaryCase.expected === 'valid') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞
        const taskCards = page.locator('.task-card')
        const taskCount = await taskCards.count()
        expect(taskCount).toBeGreaterThan(0)
      } else if (boundaryCase.expected === 'invalid') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –æ—à–∏–±–∫–∞
        const errorMessage = page.locator('.error-message')
        if (await errorMessage.count() > 0) {
          const errorText = await errorMessage.textContent()
          expect(errorText).toContain('–æ—à–∏–±–∫–∞')
        }
      }
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞—Ç—å –º—É—Ç–∞—Ü–∏–∏ –≤ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏', async ({ page }) => {
    await page.goto('/')
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const performanceTests = [
      { actionCount: 1, expected: 'fast' },
      { actionCount: 10, expected: 'fast' },
      { actionCount: 100, expected: 'slow' }
    ]
    
    for (const performanceTest of performanceTests) {
      const startTime = Date.now()
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è
      for (let i = 0; i < performanceTest.actionCount; i++) {
        await page.fill('[data-testid="email-input"]', `test${i}@example.com`)
        await page.click('[data-testid="subscribe-button"]')
        await page.waitForTimeout(10)
      }
      
      const endTime = Date.now()
      const totalTime = endTime - startTime
      
      if (performanceTest.expected === 'fast') {
        // –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ–ª–∂–Ω—ã –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –±—ã—Å—Ç—Ä–æ
        expect(totalTime).toBeLessThan(5000) // 5 —Å–µ–∫—É–Ω–¥
      } else if (performanceTest.expected === 'slow') {
        // –ú–µ–¥–ª–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –º–æ–≥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –¥–æ–ª—å—à–µ
        expect(totalTime).toBeLessThan(30000) // 30 —Å–µ–∫—É–Ω–¥
      }
    }
  })
})