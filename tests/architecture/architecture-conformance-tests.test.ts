/**
 * üèóÔ∏è –¢–ï–°–¢–´ –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ï
 * –ü–æ–∫—Ä—ã—Ç–∏–µ: —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–º –ø—Ä–∏–Ω—Ü–∏–ø–∞–º, SOLID, –ø–∞—Ç—Ç–µ—Ä–Ω—ã, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
 */

import { test, expect, Page } from '@playwright/test'

describe('üèóÔ∏è Architecture Conformance Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ø—Ä–∏–Ω—Ü–∏–ø–∞–º SOLID', async ({ page }) => {
    await page.goto('/')
    
    // ARCH-001: Single Responsibility Principle (SRP)
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–∂–¥—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–º–µ–µ—Ç –æ–¥–Ω—É –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å
    await expect(page.locator('[data-testid="hero-section"]')).toBeVisible()
    await expect(page.locator('[data-testid="features-section"]')).toBeVisible()
    await expect(page.locator('[data-testid="pricing-section"]')).toBeVisible()
    
    // ARCH-002: Open/Closed Principle (OCP)
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ—Ç–∫—Ä—ã—Ç—ã –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è, –∑–∞–∫—Ä—ã—Ç—ã –¥–ª—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
    await page.click('[data-testid="get-started-button"]')
    await expect(page.locator('[data-testid="login-form"]')).toBeVisible()
    
    await page.click('[data-testid="sign-up-link"]')
    await expect(page.locator('[data-testid="signup-form"]')).toBeVisible()
    
    // ARCH-003: Liskov Substitution Principle (LSP)
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–¥—Ç–∏–ø—ã –º–æ–≥—É—Ç –∑–∞–º–µ–Ω—è—Ç—å –±–∞–∑–æ–≤—ã–µ —Ç–∏–ø—ã
    await page.click('[data-testid="sign-in-link"]')
    await expect(page.locator('[data-testid="login-form"]')).toBeVisible()
    
    // ARCH-004: Interface Segregation Principle (ISP)
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –ø–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    await page.fill('[data-testid="login-email"]', 'test@example.com')
    await page.fill('[data-testid="login-password"]', 'password123')
    await page.click('[data-testid="login-button"]')
    
    // ARCH-005: Dependency Inversion Principle (DIP)
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã
    await page.goto('/planner')
    await page.waitForSelector('[data-testid="planner-content"]')
    
    await expect(page.locator('[data-testid="planner-content"]')).toBeVisible()
    await expect(page.locator('[data-testid="add-task-button"]')).toBeVisible()
  })

  test('–¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è', async ({ page }) => {
    await page.goto('/')
    
    // ARCH-006: MVC Pattern
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ Model, View, Controller
    await expect(page.locator('[data-testid="hero-section"]')).toBeVisible() // View
    await page.click('[data-testid="get-started-button"]') // Controller
    await expect(page.locator('[data-testid="login-form"]')).toBeVisible() // View
    
    // ARCH-007: Observer Pattern
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–µ–∞–≥–∏—Ä—É—é—Ç –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await page.fill('[data-testid="login-email"]', 'test@example.com')
    await page.fill('[data-testid="login-password"]', 'password123')
    await page.click('[data-testid="login-button"]')
    
    // ARCH-008: Factory Pattern
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—ä–µ–∫—Ç—ã —Å–æ–∑–¥–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫–∏
    await page.goto('/planner')
    await page.waitForSelector('[data-testid="planner-content"]')
    
    await page.click('[data-testid="add-task-button"]')
    await page.fill('[data-testid="task-title"]', 'Test Task')
    await page.selectOption('[data-testid="task-priority"]', 'high')
    await page.selectOption('[data-testid="task-category"]', 'work')
    await page.click('[data-testid="save-task-button"]')
    
    await expect(page.locator('.task-card')).toContainText('Test Task')
    
    // ARCH-009: Singleton Pattern
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–∏–Ω–≥–ª—Ç–æ–Ω—ã
    await page.evaluate(() => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Supabase –∫–ª–∏–µ–Ω—Ç - —Å–∏–Ω–≥–ª—Ç–æ–Ω
      const supabase1 = window.supabase
      const supabase2 = window.supabase
      expect(supabase1).toBe(supabase2)
    })
    
    // ARCH-010: Strategy Pattern
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –º–æ–≥—É—Ç –±—ã—Ç—å –∑–∞–º–µ–Ω–µ–Ω—ã
    await page.click('[data-testid="smart-sort-button"]')
    await page.waitForSelector('[data-testid="sorting-complete"]')
    
    await page.click('[data-testid="generate-suggestions-button"]')
    await page.waitForSelector('[data-testid="ai-suggestions"]')
  })

  test('–¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ø—Ä–∏–Ω—Ü–∏–ø–∞–º —á–∏—Å—Ç–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã', async ({ page }) => {
    await page.goto('/')
    
    // ARCH-011: Separation of Concerns
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –º–µ–∂–¥—É —Å–ª–æ—è–º–∏
    await expect(page.locator('[data-testid="hero-section"]')).toBeVisible() // Presentation Layer
    await page.click('[data-testid="get-started-button"]') // Application Layer
    await expect(page.locator('[data-testid="login-form"]')).toBeVisible() // Presentation Layer
    
    // ARCH-012: Dependency Rule
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –≤–Ω—É—Ç—Ä—å
    await page.fill('[data-testid="login-email"]', 'test@example.com')
    await page.fill('[data-testid="login-password"]', 'password123')
    await page.click('[data-testid="login-button"]')
    
    // ARCH-013: Interface Segregation
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –ø–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    await page.goto('/planner')
    await page.waitForSelector('[data-testid="planner-content"]')
    
    await page.click('[data-testid="add-task-button"]')
    await page.fill('[data-testid="task-title"]', 'Test Task')
    await page.selectOption('[data-testid="task-priority"]', 'high')
    await page.selectOption('[data-testid="task-category"]', 'work')
    await page.click('[data-testid="save-task-button"]')
    
    await expect(page.locator('.task-card')).toContainText('Test Task')
    
    // ARCH-014: Single Responsibility
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–∂–¥—ã–π —Å–ª–æ–π –∏–º–µ–µ—Ç –æ–¥–Ω—É –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å
    await page.click('[data-testid="analyze-productivity-button"]')
    await page.waitForSelector('[data-testid="productivity-analysis"]')
    
    await expect(page.locator('[data-testid="productivity-score"]')).toBeVisible()
    await expect(page.locator('[data-testid="productivity-insights"]')).toBeVisible()
    await expect(page.locator('[data-testid="productivity-recommendations"]')).toBeVisible()
    
    // ARCH-015: Open/Closed
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –æ—Ç–∫—Ä—ã—Ç–∞ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    await page.click('[data-testid="generate-suggestions-button"]')
    await page.waitForSelector('[data-testid="ai-suggestions"]')
    
    const suggestionCards = page.locator('.suggestion-card')
    await expect(suggestionCards).toHaveCount.greaterThan(0)
  })

  test('–¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ø—Ä–∏–Ω—Ü–∏–ø–∞–º –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã', async ({ page }) => {
    await page.goto('/')
    
    // ARCH-016: Service Independence
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã
    await expect(page.locator('[data-testid="hero-section"]')).toBeVisible()
    await page.click('[data-testid="get-started-button"]')
    await expect(page.locator('[data-testid="login-form"]')).toBeVisible()
    
    // ARCH-017: API Gateway
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ API Gateway —Ä–∞–±–æ—Ç–∞–µ—Ç
    await page.fill('[data-testid="login-email"]', 'test@example.com')
    await page.fill('[data-testid="login-password"]', 'password123')
    await page.click('[data-testid="login-button"]')
    
    // ARCH-018: Service Discovery
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–∏—Å—ã –º–æ–≥—É—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥–∞
    await page.goto('/planner')
    await page.waitForSelector('[data-testid="planner-content"]')
    
    await page.click('[data-testid="add-task-button"]')
    await page.fill('[data-testid="task-title"]', 'Test Task')
    await page.selectOption('[data-testid="task-priority"]', 'high')
    await page.selectOption('[data-testid="task-category"]', 'work')
    await page.click('[data-testid="save-task-button"]')
    
    await expect(page.locator('.task-card')).toContainText('Test Task')
    
    // ARCH-019: Circuit Breaker
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Circuit Breaker —Ä–∞–±–æ—Ç–∞–µ—Ç
    await page.click('[data-testid="smart-sort-button"]')
    await page.waitForSelector('[data-testid="sorting-complete"]')
    
    // ARCH-020: Load Balancing
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Load Balancing —Ä–∞–±–æ—Ç–∞–µ—Ç
    await page.click('[data-testid="generate-suggestions-button"]')
    await page.waitForSelector('[data-testid="ai-suggestions"]')
  })

  test('–¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ø—Ä–∏–Ω—Ü–∏–ø–∞–º event-driven –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã', async ({ page }) => {
    await page.goto('/')
    
    // ARCH-021: Event Sourcing
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–±—ã—Ç–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è
    await expect(page.locator('[data-testid="hero-section"]')).toBeVisible()
    await page.click('[data-testid="get-started-button"]')
    await expect(page.locator('[data-testid="login-form"]')).toBeVisible()
    
    // ARCH-022: CQRS
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –∏ –∑–∞–ø—Ä–æ—Å–æ–≤
    await page.fill('[data-testid="login-email"]', 'test@example.com')
    await page.fill('[data-testid="login-password"]', 'password123')
    await page.click('[data-testid="login-button"]')
    
    // ARCH-023: Event Bus
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Event Bus —Ä–∞–±–æ—Ç–∞–µ—Ç
    await page.goto('/planner')
    await page.waitForSelector('[data-testid="planner-content"]')
    
    await page.click('[data-testid="add-task-button"]')
    await page.fill('[data-testid="task-title"]', 'Test Task')
    await page.selectOption('[data-testid="task-priority"]', 'high')
    await page.selectOption('[data-testid="task-category"]', 'work')
    await page.click('[data-testid="save-task-button"]')
    
    await expect(page.locator('.task-card')).toContainText('Test Task')
    
    // ARCH-024: Event Handlers
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Event Handlers —Ä–∞–±–æ—Ç–∞—é—Ç
    await page.click('[data-testid="smart-sort-button"]')
    await page.waitForSelector('[data-testid="sorting-complete"]')
    
    // ARCH-025: Event Store
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Event Store —Ä–∞–±–æ—Ç–∞–µ—Ç
    await page.click('[data-testid="generate-suggestions-button"]')
    await page.waitForSelector('[data-testid="ai-suggestions"]')
  })
})

describe('üîß Design Patterns Implementation Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω Repository', async ({ page }) => {
    await page.goto('/planner')
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // REPO-001: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Repository –∞–±—Å—Ç—Ä–∞–≥–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º
    await page.click('[data-testid="add-task-button"]')
    await page.fill('[data-testid="task-title"]', 'Repository Test Task')
    await page.selectOption('[data-testid="task-priority"]', 'high')
    await page.selectOption('[data-testid="task-category"]', 'work')
    await page.click('[data-testid="save-task-button"]')
    
    await expect(page.locator('.task-card')).toContainText('Repository Test Task')
    
    // REPO-002: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Repository –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    await page.locator('.task-card').click()
    await page.fill('[data-testid="task-title"]', 'Updated Repository Test Task')
    await page.click('[data-testid="save-task-button"]')
    
    await expect(page.locator('.task-card')).toContainText('Updated Repository Test Task')
    
    // REPO-003: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Repository –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏
    await page.locator('.task-card').locator('[data-testid="delete-task-button"]').click()
    await page.click('[data-testid="confirm-delete-button"]')
    await expect(page.locator('.task-card')).not.toContainText('Updated Repository Test Task')
  })

  test('–¥–æ–ª–∂–µ–Ω —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω Command', async ({ page }) => {
    await page.goto('/planner')
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // CMD-001: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—ã –∏–Ω–∫–∞–ø—Å—É–ª–∏—Ä—É—é—Ç –∑–∞–ø—Ä–æ—Å—ã
    await page.click('[data-testid="add-task-button"]')
    await page.fill('[data-testid="task-title"]', 'Command Test Task')
    await page.selectOption('[data-testid="task-priority"]', 'high')
    await page.selectOption('[data-testid="task-category"]', 'work')
    await page.click('[data-testid="save-task-button"]')
    
    await expect(page.locator('.task-card')).toContainText('Command Test Task')
    
    // CMD-002: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –æ—Ç–º–µ–Ω—É
    await page.locator('.task-card').click()
    await page.fill('[data-testid="task-title"]', 'Updated Command Test Task')
    await page.click('[data-testid="save-task-button"]')
    
    await expect(page.locator('.task-card')).toContainText('Updated Command Test Task')
    
    // CMD-003: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    await page.locator('.task-card').locator('[data-testid="complete-task-button"]').click()
    await expect(page.locator('.task-card').locator('[data-testid="task-completed"]')).toBeChecked()
  })

  test('–¥–æ–ª–∂–µ–Ω —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω Observer', async ({ page }) => {
    await page.goto('/planner')
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // OBS-001: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Observer —É–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
    await page.click('[data-testid="add-task-button"]')
    await page.fill('[data-testid="task-title"]', 'Observer Test Task')
    await page.selectOption('[data-testid="task-priority"]', 'high')
    await page.selectOption('[data-testid="task-category"]', 'work')
    await page.click('[data-testid="save-task-button"]')
    
    await expect(page.locator('.task-card')).toContainText('Observer Test Task')
    
    // OBS-002: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Observer –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É
    await page.click('[data-testid="smart-sort-button"]')
    await page.waitForSelector('[data-testid="sorting-complete"]')
    
    // OBS-003: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Observer –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ—Ç–ø–∏—Å–∫—É
    await page.click('[data-testid="generate-suggestions-button"]')
    await page.waitForSelector('[data-testid="ai-suggestions"]')
  })

  test('–¥–æ–ª–∂–µ–Ω —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω Decorator', async ({ page }) => {
    await page.goto('/planner')
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // DEC-001: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Decorator –¥–æ–±–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    await page.click('[data-testid="add-task-button"]')
    await page.fill('[data-testid="task-title"]', 'Decorator Test Task')
    await page.selectOption('[data-testid="task-priority"]', 'high')
    await page.selectOption('[data-testid="task-category"]', 'work')
    await page.click('[data-testid="save-task-button"]')
    
    await expect(page.locator('.task-card')).toContainText('Decorator Test Task')
    
    // DEC-002: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Decorator –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–æ–º–ø–æ–∑–∏—Ü–∏—é
    await page.click('[data-testid="smart-sort-button"]')
    await page.waitForSelector('[data-testid="sorting-complete"]')
    
    // DEC-003: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Decorator –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    await page.click('[data-testid="generate-suggestions-button"]')
    await page.waitForSelector('[data-testid="ai-suggestions"]')
  })

  test('–¥–æ–ª–∂–µ–Ω —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω Facade', async ({ page }) => {
    await page.goto('/planner')
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // FAC-001: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Facade —É–ø—Ä–æ—â–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    await page.click('[data-testid="add-task-button"]')
    await page.fill('[data-testid="task-title"]', 'Facade Test Task')
    await page.selectOption('[data-testid="task-priority"]', 'high')
    await page.selectOption('[data-testid="task-category"]', 'work')
    await page.click('[data-testid="save-task-button"]')
    
    await expect(page.locator('.task-card')).toContainText('Facade Test Task')
    
    // FAC-002: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Facade —Å–∫—Ä—ã–≤–∞–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å
    await page.click('[data-testid="smart-sort-button"]')
    await page.waitForSelector('[data-testid="sorting-complete"]')
    
    // FAC-003: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Facade –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –µ–¥–∏–Ω—É—é —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞
    await page.click('[data-testid="generate-suggestions-button"]')
    await page.waitForSelector('[data-testid="ai-suggestions"]')
  })
})

describe('üèõÔ∏è Architectural Quality Attributes Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å –º–æ–¥—É–ª—å–Ω–æ—Å—Ç—å', async ({ page }) => {
    await page.goto('/')
    
    // MOD-001: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥—É–ª–∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã
    await expect(page.locator('[data-testid="hero-section"]')).toBeVisible()
    await page.click('[data-testid="get-started-button"]')
    await expect(page.locator('[data-testid="login-form"]')).toBeVisible()
    
    // MOD-002: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥—É–ª–∏ –∏–º–µ—é—Ç —á–µ—Ç–∫–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
    await page.fill('[data-testid="login-email"]', 'test@example.com')
    await page.fill('[data-testid="login-password"]', 'password123')
    await page.click('[data-testid="login-button"]')
    
    // MOD-003: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥—É–ª–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –∑–∞–º–µ–Ω–µ–Ω—ã
    await page.goto('/planner')
    await page.waitForSelector('[data-testid="planner-content"]')
    
    await page.click('[data-testid="add-task-button"]')
    await page.fill('[data-testid="task-title"]', 'Modularity Test Task')
    await page.selectOption('[data-testid="task-priority"]', 'high')
    await page.selectOption('[data-testid="task-category"]', 'work')
    await page.click('[data-testid="save-task-button"]')
    
    await expect(page.locator('.task-card')).toContainText('Modularity Test Task')
  })

  test('–¥–æ–ª–∂–µ–Ω –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å —Ä–∞—Å—à–∏—Ä—è–µ–º–æ—Å—Ç—å', async ({ page }) => {
    await page.goto('/planner')
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // EXT-001: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∞
    await page.click('[data-testid="add-task-button"]')
    await page.fill('[data-testid="task-title"]', 'Extensibility Test Task')
    await page.selectOption('[data-testid="task-priority"]', 'high')
    await page.selectOption('[data-testid="task-category"]', 'work')
    await page.click('[data-testid="save-task-button"]')
    
    await expect(page.locator('.task-card')).toContainText('Extensibility Test Task')
    
    // EXT-002: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω—ã
    await page.click('[data-testid="smart-sort-button"]')
    await page.waitForSelector('[data-testid="sorting-complete"]')
    
    // EXT-003: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ –Ω–∞—Ä—É—à–∞—é—Ç—Å—è
    await page.click('[data-testid="generate-suggestions-button"]')
    await page.waitForSelector('[data-testid="ai-suggestions"]')
  })

  test('–¥–æ–ª–∂–µ–Ω –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å', async ({ page }) => {
    await page.goto('/planner')
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // TEST-001: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ
    await page.click('[data-testid="add-task-button"]')
    await page.fill('[data-testid="task-title"]', 'Testability Test Task')
    await page.selectOption('[data-testid="task-priority"]', 'high')
    await page.selectOption('[data-testid="task-category"]', 'work')
    await page.click('[data-testid="save-task-button"]')
    
    await expect(page.locator('.task-card')).toContainText('Testability Test Task')
    
    // TEST-002: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –º–æ–∫–∏—Ä–æ–≤–∞–Ω—ã
    await page.click('[data-testid="smart-sort-button"]')
    await page.waitForSelector('[data-testid="sorting-complete"]')
    
    // TEST-003: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ
    await page.click('[data-testid="generate-suggestions-button"]')
    await page.waitForSelector('[data-testid="ai-suggestions"]')
  })

  test('–¥–æ–ª–∂–µ–Ω –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ—Å—Ç—å', async ({ page }) => {
    await page.goto('/planner')
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // MAIN-001: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–¥ –ª–µ–≥–∫–æ —á–∏—Ç–∞–µ—Ç—Å—è
    await page.click('[data-testid="add-task-button"]')
    await page.fill('[data-testid="task-title"]', 'Maintainability Test Task')
    await page.selectOption('[data-testid="task-priority"]', 'high')
    await page.selectOption('[data-testid="task-category"]', 'work')
    await page.click('[data-testid="save-task-button"]')
    
    await expect(page.locator('.task-card')).toContainText('Maintainability Test Task')
    
    // MAIN-002: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–¥ –ª–µ–≥–∫–æ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç—Å—è
    await page.locator('.task-card').click()
    await page.fill('[data-testid="task-title"]', 'Updated Maintainability Test Task')
    await page.click('[data-testid="save-task-button"]')
    
    await expect(page.locator('.task-card')).toContainText('Updated Maintainability Test Task')
    
    // MAIN-003: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–¥ –ª–µ–≥–∫–æ –æ—Ç–ª–∞–∂–∏–≤–∞–µ—Ç—Å—è
    await page.click('[data-testid="smart-sort-button"]')
    await page.waitForSelector('[data-testid="sorting-complete"]')
  })

  test('–¥–æ–ª–∂–µ–Ω –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', async ({ page }) => {
    await page.goto('/planner')
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // PERF-001: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –±—ã—Å—Ç—Ä–æ
    const startTime = Date.now()
    await page.click('[data-testid="add-task-button"]')
    await page.fill('[data-testid="task-title"]', 'Performance Test Task')
    await page.selectOption('[data-testid="task-priority"]', 'high')
    await page.selectOption('[data-testid="task-category"]', 'work')
    await page.click('[data-testid="save-task-button"]')
    const operationTime = Date.now() - startTime
    
    expect(operationTime).toBeLessThan(2000)
    await expect(page.locator('.task-card')).toContainText('Performance Test Task')
    
    // PERF-002: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ—Å—É—Ä—Å—ã —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ
    await page.click('[data-testid="smart-sort-button"]')
    await page.waitForSelector('[data-testid="sorting-complete"]')
    
    // PERF-003: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ—Ç—Å—è
    await page.click('[data-testid="generate-suggestions-button"]')
    await page.waitForSelector('[data-testid="ai-suggestions"]')
  })
})