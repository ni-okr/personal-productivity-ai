/**
 * üé® –¢–ï–°–¢–´ UI
 * –ü–æ–∫—Ä—ã—Ç–∏–µ: —Ñ–æ—Ä–º—ã, –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç—å, —ç–ª–µ–º–µ–Ω—Ç—ã, –ø–æ–ª—è –≤–≤–æ–¥–∞
 */

import { test, expect, Page } from '@playwright/test'

describe('üìù Form Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Ñ–æ—Ä–º—É –ø–æ–¥–ø–∏—Å–∫–∏', async ({ page }) => {
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–æ—Ä–º–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –≤–∏–¥–Ω–∞
    const form = page.locator('form')
    await expect(form).toBeVisible()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –ø–æ–ª–µ email
    const emailInput = page.locator('[data-testid="email-input"]')
    await expect(emailInput).toBeVisible()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    const subscribeButton = page.locator('[data-testid="subscribe-button"]')
    await expect(subscribeButton).toBeVisible()
  })

  test('–¥–æ–ª–∂–µ–Ω –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ä–º—É –ø–æ–¥–ø–∏—Å–∫–∏', async ({ page }) => {
    await page.goto('/')
    
    // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—É—Å—Ç—É—é —Ñ–æ—Ä–º—É
    await page.click('[data-testid="subscribe-button"]')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—è–≤–∏–ª–∞—Å—å –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    const errorMessage = page.locator('.error-message')
    if (await errorMessage.count() > 0) {
      await expect(errorMessage).toBeVisible()
    }
    
    // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ä–º—É —Å –Ω–µ–≤–µ—Ä–Ω—ã–º email
    await page.fill('[data-testid="email-input"]', 'invalid-email')
    await page.click('[data-testid="subscribe-button"]')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—è–≤–∏–ª–∞—Å—å –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    if (await errorMessage.count() > 0) {
      const errorText = await errorMessage.textContent()
      expect(errorText).toContain('email')
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ä–º—ã', async ({ page }) => {
    await page.goto('/')
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    await page.fill('[data-testid="email-input"]', 'test@example.com')
    await page.click('[data-testid="subscribe-button"]')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—è–≤–∏–ª–æ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
    const statusElement = page.locator('[data-testid="subscription-status"]')
    await expect(statusElement).toBeVisible()
  })

  test('–¥–æ–ª–∂–µ–Ω —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å —Ñ–æ—Ä–º—É –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏', async ({ page }) => {
    await page.goto('/')
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
    await page.fill('[data-testid="email-input"]', 'test@example.com')
    await page.click('[data-testid="subscribe-button"]')
    
    // –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await page.waitForTimeout(1000)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª–µ –æ—á–∏—Å—Ç–∏–ª–æ—Å—å
    const emailInput = page.locator('[data-testid="email-input"]')
    const value = await emailInput.inputValue()
    expect(value).toBe('')
  })
})

describe('üñ±Ô∏è Clickability Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–ª–∏–∫–∏ –ø–æ –∫–Ω–æ–ø–∫–∞–º', async ({ page }) => {
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏
    const subscribeButton = page.locator('[data-testid="subscribe-button"]')
    await subscribeButton.click()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ —Å—Ä–∞–±–æ—Ç–∞–ª–∞
    const statusElement = page.locator('[data-testid="subscription-status"]')
    if (await statusElement.count() > 0) {
      await expect(statusElement).toBeVisible()
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–ª–∏–∫–∏ –ø–æ —Å—Å—ã–ª–∫–∞–º', async ({ page }) => {
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∏–∫–∏ –ø–æ —Å—Å—ã–ª–∫–∞–º
    const links = page.locator('a')
    const linkCount = await links.count()
    
    for (let i = 0; i < linkCount; i++) {
      const link = links.nth(i)
      const href = await link.getAttribute('href')
      const isVisible = await link.isVisible()
      
      if (isVisible && href && !href.startsWith('http')) {
        // –ö–ª–∏–∫–∞–µ–º –ø–æ —Å—Å—ã–ª–∫–µ
        await link.click()
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
        await expect(page.locator('body')).toBeVisible()
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥
        await page.goBack()
      }
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–ª–∏–∫–∏ –ø–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º —ç–ª–µ–º–µ–Ω—Ç–∞–º', async ({ page }) => {
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
      localStorage.setItem('auth-token', 'mock-token')
      localStorage.setItem('user', JSON.stringify({
        id: 'user-1',
        email: 'test@example.com',
        name: 'Test User',
        subscription: 'free'
      }))
    })
    
    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
    const addButton = page.locator('[data-testid="add-task-button"]')
    await addButton.click()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥–∞–ª –æ—Ç–∫—Ä—ã–ª—Å—è
    await expect(page.locator('[data-testid="task-modal"]')).toBeVisible()
  })
})

describe('üìã Input Field Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤–≤–æ–¥ –≤ –ø–æ–ª—è email', async ({ page }) => {
    await page.goto('/')
    
    const emailInput = page.locator('[data-testid="email-input"]')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤–≤–æ–¥
    await emailInput.fill('test@example.com')
    const value = await emailInput.inputValue()
    expect(value).toBe('test@example.com')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª–µ –æ—á–∏—â–∞–µ—Ç—Å—è
    await emailInput.fill('')
    const emptyValue = await emailInput.inputValue()
    expect(emptyValue).toBe('')
  })

  test('–¥–æ–ª–∂–µ–Ω –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—è email', async ({ page }) => {
    await page.goto('/')
    
    const emailInput = page.locator('[data-testid="email-input"]')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    const validEmails = [
      'test@example.com',
      'user.name@domain.co.uk',
      'user+tag@example.org'
    ]
    
    const invalidEmails = [
      'invalid-email',
      '@example.com',
      'test@',
      'test..test@example.com'
    ]
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ email
    for (const email of validEmails) {
      await emailInput.fill(email)
      const value = await emailInput.inputValue()
      expect(value).toBe(email)
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ email
    for (const email of invalidEmails) {
      await emailInput.fill(email)
      const value = await emailInput.inputValue()
      expect(value).toBe(email) // –ü–æ–ª–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤–≤–æ–¥, –Ω–æ –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —Å—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –ø–æ–ª—è—Ö –≤–≤–æ–¥–∞', async ({ page }) => {
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
      localStorage.setItem('auth-token', 'mock-token')
      localStorage.setItem('user', JSON.stringify({
        id: 'user-1',
        email: 'test@example.com',
        name: 'Test User',
        subscription: 'free'
      }))
    })
    
    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
    await page.click('[data-testid="add-task-button"]')
    await expect(page.locator('[data-testid="task-modal"]')).toBeVisible()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–≤–æ–¥ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    const specialChars = [
      'Test Task with Special Chars: !@#$%^&*()',
      '–¢–µ—Å—Ç —Å —Ä—É—Å—Å–∫–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏',
      'Test with emoji üöÄ',
      'Test with unicode: Œ±Œ≤Œ≥Œ¥Œµ'
    ]
    
    for (const chars of specialChars) {
      const titleInput = page.locator('[data-testid="task-title"]')
      await titleInput.fill(chars)
      
      const value = await titleInput.inputValue()
      expect(value).toBe(chars)
    }
  })
})

describe('üéõÔ∏è UI Element Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã', async ({ page }) => {
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    await expect(page.locator('h1')).toBeVisible()
    await expect(page.locator('[data-testid="email-input"]')).toBeVisible()
    await expect(page.locator('[data-testid="subscribe-button"]')).toBeVisible()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
    const emailInput = page.locator('[data-testid="email-input"]')
    const inputType = await emailInput.getAttribute('type')
    expect(inputType).toBe('email')
    
    const subscribeButton = page.locator('[data-testid="subscribe-button"]')
    const buttonType = await subscribeButton.getAttribute('type')
    expect(buttonType).toBe('submit')
  })

  test('–¥–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ', async ({ page }) => {
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—è–¥–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const elements = page.locator('h1, [data-testid="email-input"], [data-testid="subscribe-button"]')
    const elementCount = await elements.count()
    
    for (let i = 0; i < elementCount; i++) {
      const element = elements.nth(i)
      const isVisible = await element.isVisible()
      expect(isVisible).toBe(true)
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Å—Ç–∏–ª—è–º–∏', async ({ page }) => {
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–º–µ—é—Ç —Å—Ç–∏–ª–∏
    const elements = page.locator('h1, button, input')
    const elementCount = await elements.count()
    
    for (let i = 0; i < elementCount; i++) {
      const element = elements.nth(i)
      const isVisible = await element.isVisible()
      
      if (isVisible) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –∏–º–µ–µ—Ç —Ä–∞–∑–º–µ—Ä
        const boundingBox = await element.boundingBox()
        if (boundingBox) {
          expect(boundingBox.width).toBeGreaterThan(0)
          expect(boundingBox.height).toBeGreaterThan(0)
        }
      }
    }
  })
})

describe('üîÑ State Management Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —Ñ–æ—Ä–º—ã', async ({ page }) => {
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const emailInput = page.locator('[data-testid="email-input"]')
    const initialValue = await emailInput.inputValue()
    expect(initialValue).toBe('')
    
    // –ò–∑–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await emailInput.fill('test@example.com')
    const newValue = await emailInput.inputValue()
    expect(newValue).toBe('test@example.com')
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await emailInput.fill('')
    const resetValue = await emailInput.inputValue()
    expect(resetValue).toBe('')
  })

  test('–¥–æ–ª–∂–µ–Ω —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω', async ({ page }) => {
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
      localStorage.setItem('auth-token', 'mock-token')
      localStorage.setItem('user', JSON.stringify({
        id: 'user-1',
        email: 'test@example.com',
        name: 'Test User',
        subscription: 'free'
      }))
    })
    
    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥–∞–ª –∑–∞–∫—Ä—ã—Ç
    const modal = page.locator('[data-testid="task-modal"]')
    await expect(modal).not.toBeVisible()
    
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª
    await page.click('[data-testid="add-task-button"]')
    await expect(modal).toBeVisible()
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª
    await page.keyboard.press('Escape')
    await expect(modal).not.toBeVisible()
  })

  test('–¥–æ–ª–∂–µ–Ω —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∑–∞–≥—Ä—É–∑–∫–∏', async ({ page }) => {
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏
    const loadingIndicator = page.locator('[aria-label="loading"], .loading, [data-testid="loading"]')
    if (await loadingIndicator.count() > 0) {
      await expect(loadingIndicator).not.toBeVisible()
    }
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É
    await page.fill('[data-testid="email-input"]', 'test@example.com')
    await page.click('[data-testid="subscribe-button"]')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—è–≤–∏–ª—Å—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if (await loadingIndicator.count() > 0) {
      await expect(loadingIndicator).toBeVisible()
    }
  })
})

describe('üì± Responsive UI Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫ —Ä–∞–∑–Ω—ã–º —Ä–∞–∑–º–µ—Ä–∞–º —ç–∫—Ä–∞–Ω–∞', async ({ page }) => {
    const viewports = [
      { width: 320, height: 568 }, // iPhone SE
      { width: 375, height: 667 }, // iPhone 8
      { width: 768, height: 1024 }, // iPad
      { width: 1024, height: 768 }, // Desktop
      { width: 1920, height: 1080 } // Large Desktop
    ]
    
    for (const viewport of viewports) {
      await page.setViewportSize(viewport)
      await page.goto('/')
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤–∏–¥–Ω—ã
      await expect(page.locator('h1')).toBeVisible()
      await expect(page.locator('[data-testid="email-input"]')).toBeVisible()
      await expect(page.locator('[data-testid="subscribe-button"]')).toBeVisible()
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ–º–µ—â–∞–µ—Ç—Å—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ
      const body = page.locator('body')
      const scrollWidth = await body.evaluate(el => el.scrollWidth)
      const clientWidth = await body.evaluate(el => el.clientWidth)
      
      expect(scrollWidth).toBeLessThanOrEqual(clientWidth * 1.2) // 20% –¥–æ–ø—É—Å–∫
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å touch –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö', async ({ page }) => {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–±–∏–ª—å–Ω—ã–π viewport
    await page.setViewportSize({ width: 375, height: 667 })
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º touch –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
    const subscribeButton = page.locator('[data-testid="subscribe-button"]')
    await subscribeButton.tap()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ —Å—Ä–∞–±–æ—Ç–∞–ª–∞
    const statusElement = page.locator('[data-testid="subscription-status"]')
    if (await statusElement.count() > 0) {
      await expect(statusElement).toBeVisible()
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å keyboard –Ω–∞–≤–∏–≥–∞—Ü–∏—é', async ({ page }) => {
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é —Å Tab
    await page.keyboard.press('Tab')
    let focusedElement = page.locator(':focus')
    await expect(focusedElement).toBeVisible()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –Ω–∞–∑–∞–¥ —Å Shift+Tab
    await page.keyboard.press('Shift+Tab')
    focusedElement = page.locator(':focus')
    await expect(focusedElement).toBeVisible()
  })
})

describe('üé® Visual Design Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–π –¥–∏–∑–∞–π–Ω', async ({ page }) => {
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —Å—Ç–∏–ª—å
    const buttons = page.locator('button')
    const buttonCount = await buttons.count()
    
    for (let i = 0; i < buttonCount; i++) {
      const button = buttons.nth(i)
      const isVisible = await button.isVisible()
      
      if (isVisible) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –∏–º–µ–µ—Ç —Ä–∞–∑—É–º–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        const boundingBox = await button.boundingBox()
        if (boundingBox) {
          expect(boundingBox.width).toBeGreaterThan(0)
          expect(boundingBox.height).toBeGreaterThan(0)
        }
      }
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —á–∏—Ç–∞–µ–º—ã–µ —à—Ä–∏—Ñ—Ç—ã', async ({ page }) => {
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç —á–∏—Ç–∞–µ–º
    const textElements = page.locator('h1, h2, h3, p, span, div')
    const elementCount = await textElements.count()
    
    for (let i = 0; i < elementCount; i++) {
      const element = textElements.nth(i)
      const text = await element.textContent()
      const isVisible = await element.isVisible()
      
      if (isVisible && text && text.trim()) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –Ω–µ —Å–ª–∏—à–∫–æ–º –º–µ–ª–∫–∏–π
        const fontSize = await element.evaluate(el => {
          return window.getComputedStyle(el).fontSize
        })
        
        const fontSizeValue = parseFloat(fontSize)
        expect(fontSizeValue).toBeGreaterThan(10) // –ú–∏–Ω–∏–º—É–º 10px
      }
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ª–æ–≥–∏—á–Ω—É—é —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É', async ({ page }) => {
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –∫–æ–Ω—Ç—Ä–∞—Å—Ç –º–µ–∂–¥—É —Ç–µ–∫—Å—Ç–æ–º –∏ —Ñ–æ–Ω–æ–º
    const textElements = page.locator('h1, h2, h3, p')
    const elementCount = await textElements.count()
    
    for (let i = 0; i < elementCount; i++) {
      const element = textElements.nth(i)
      const isVisible = await element.isVisible()
      
      if (isVisible) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –∏–º–µ–µ—Ç —Ü–≤–µ—Ç
        const color = await element.evaluate(el => {
          return window.getComputedStyle(el).color
        })
        
        expect(color).not.toBe('rgba(0, 0, 0, 0)') // –ù–µ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π
        expect(color).not.toBe('transparent')
      }
    }
  })
})