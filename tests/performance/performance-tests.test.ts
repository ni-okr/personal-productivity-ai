/**
 * ‚ö° –¢–ï–°–¢–´ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò
 * –ü–æ–∫—Ä—ã—Ç–∏–µ: Core Web Vitals, –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */

import { test, expect, Page } from '@playwright/test'

describe('üöÄ Core Web Vitals Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å LCP –º–µ–Ω–µ–µ 2.5 —Å–µ–∫—É–Ω–¥', async ({ page }) => {
    await page.goto('/')
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    await page.waitForLoadState('networkidle')
    
    // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const metrics = await page.evaluate(() => {
      return new Promise((resolve) => {
        new PerformanceObserver((list) => {
          const entries = list.getEntries()
          const lcpEntry = entries.find(entry => entry.entryType === 'largest-contentful-paint')
          if (lcpEntry) {
            resolve({
              lcp: lcpEntry.startTime,
              fcp: entries.find(entry => entry.entryType === 'paint' && entry.name === 'first-contentful-paint')?.startTime,
              fid: entries.find(entry => entry.entryType === 'first-input')?.processingStart,
              cls: entries.find(entry => entry.entryType === 'layout-shift')?.value
            })
          }
        }).observe({ entryTypes: ['largest-contentful-paint', 'paint', 'first-input', 'layout-shift'] })
        
        // Fallback –µ—Å–ª–∏ –º–µ—Ç—Ä–∏–∫–∏ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å
        setTimeout(() => {
          resolve({
            lcp: 0,
            fcp: 0,
            fid: 0,
            cls: 0
          })
        }, 5000)
      })
    })
    
    // LCP –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω–µ–µ 2.5 —Å–µ–∫—É–Ω–¥
    expect(metrics.lcp).toBeLessThan(2500)
  })

  test('–¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å FID –º–µ–Ω–µ–µ 100 –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥', async ({ page }) => {
    await page.goto('/')
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    await page.waitForLoadState('networkidle')
    
    // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const metrics = await page.evaluate(() => {
      return new Promise((resolve) => {
        new PerformanceObserver((list) => {
          const entries = list.getEntries()
          const fidEntry = entries.find(entry => entry.entryType === 'first-input')
          if (fidEntry) {
            resolve({
              fid: fidEntry.processingStart - fidEntry.startTime
            })
          }
        }).observe({ entryTypes: ['first-input'] })
        
        // Fallback
        setTimeout(() => {
          resolve({ fid: 0 })
        }, 5000)
      })
    })
    
    // FID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω–µ–µ 100 –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥
    expect(metrics.fid).toBeLessThan(100)
  })

  test('–¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å CLS –º–µ–Ω–µ–µ 0.1', async ({ page }) => {
    await page.goto('/')
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    await page.waitForLoadState('networkidle')
    
    // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const metrics = await page.evaluate(() => {
      return new Promise((resolve) => {
        let cls = 0
        new PerformanceObserver((list) => {
          const entries = list.getEntries()
          entries.forEach(entry => {
            if (entry.entryType === 'layout-shift' && !entry.hadRecentInput) {
              cls += entry.value
            }
          })
          resolve({ cls })
        }).observe({ entryTypes: ['layout-shift'] })
        
        // Fallback
        setTimeout(() => {
          resolve({ cls })
        }, 5000)
      })
    })
    
    // CLS –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω–µ–µ 0.1
    expect(metrics.cls).toBeLessThan(0.1)
  })

  test('–¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å FCP –º–µ–Ω–µ–µ 1.8 —Å–µ–∫—É–Ω–¥', async ({ page }) => {
    await page.goto('/')
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    await page.waitForLoadState('networkidle')
    
    // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const metrics = await page.evaluate(() => {
      return new Promise((resolve) => {
        new PerformanceObserver((list) => {
          const entries = list.getEntries()
          const fcpEntry = entries.find(entry => entry.entryType === 'paint' && entry.name === 'first-contentful-paint')
          if (fcpEntry) {
            resolve({
              fcp: fcpEntry.startTime
            })
          }
        }).observe({ entryTypes: ['paint'] })
        
        // Fallback
        setTimeout(() => {
          resolve({ fcp: 0 })
        }, 5000)
      })
    })
    
    // FCP –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω–µ–µ 1.8 —Å–µ–∫—É–Ω–¥
    expect(metrics.fcp).toBeLessThan(1800)
  })
})

describe('üìä Performance Metrics Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 3 —Å–µ–∫—É–Ω–¥—ã', async ({ page }) => {
    const startTime = Date.now()
    await page.goto('/')
    await page.waitForLoadState('networkidle')
    const loadTime = Date.now() - startTime
    
    // –°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 3 —Å–µ–∫—É–Ω–¥—ã
    expect(loadTime).toBeLessThan(3000)
  })

  test('–¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ä–∞–∑–º–µ—Ä DOM –º–µ–Ω–µ–µ 1500 —É–∑–ª–æ–≤', async ({ page }) => {
    await page.goto('/')
    await page.waitForLoadState('networkidle')
    
    const domSize = await page.evaluate(() => {
      return document.querySelectorAll('*').length
    })
    
    // DOM –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–µ–Ω–µ–µ 1500 —É–∑–ª–æ–≤
    expect(domSize).toBeLessThan(1500)
  })

  test('–¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –≥–ª—É–±–∏–Ω—É DOM –º–µ–Ω–µ–µ 32 —É—Ä–æ–≤–Ω–µ–π', async ({ page }) => {
    await page.goto('/')
    await page.waitForLoadState('networkidle')
    
    const maxDepth = await page.evaluate(() => {
      let maxDepth = 0
      
      function getDepth(element, currentDepth = 0) {
        maxDepth = Math.max(maxDepth, currentDepth)
        for (const child of element.children) {
          getDepth(child, currentDepth + 1)
        }
      }
      
      getDepth(document.body)
      return maxDepth
    })
    
    // –ì–ª—É–±–∏–Ω–∞ DOM –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω–µ–µ 32 —É—Ä–æ–≤–Ω–µ–π
    expect(maxDepth).toBeLessThan(32)
  })

  test('–¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –º–µ–Ω–µ–µ 50 HTTP –∑–∞–ø—Ä–æ—Å–æ–≤', async ({ page }) => {
    const requests = []
    page.on('request', request => {
      requests.push(request.url())
    })
    
    await page.goto('/')
    await page.waitForLoadState('networkidle')
    
    // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω–µ–µ 50 HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
    expect(requests.length).toBeLessThan(50)
  })

  test('–¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä —Ä–µ—Å—É—Ä—Å–æ–≤ –º–µ–Ω–µ–µ 2MB', async ({ page }) => {
    const responses = []
    page.on('response', response => {
      responses.push(response)
    })
    
    await page.goto('/')
    await page.waitForLoadState('networkidle')
    
    const totalSize = await page.evaluate(() => {
      return new Promise((resolve) => {
        let totalSize = 0
        const observer = new PerformanceObserver((list) => {
          const entries = list.getEntries()
          entries.forEach(entry => {
            if (entry.transferSize) {
              totalSize += entry.transferSize
            }
          })
          resolve(totalSize)
        })
        observer.observe({ entryTypes: ['resource'] })
        
        // Fallback
        setTimeout(() => {
          resolve(totalSize)
        }, 5000)
      })
    })
    
    // –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω–µ–µ 2MB
    expect(totalSize).toBeLessThan(2 * 1024 * 1024)
  })
})

describe('üéØ Memory Usage Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ–Ω–µ–µ 50MB –ø–∞–º—è—Ç–∏', async ({ page }) => {
    await page.goto('/')
    await page.waitForLoadState('networkidle')
    
    const memoryUsage = await page.evaluate(() => {
      if ('memory' in performance) {
        return (performance as any).memory.usedJSHeapSize
      }
      return 0
    })
    
    // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω–µ–µ 50MB
    expect(memoryUsage).toBeLessThan(50 * 1024 * 1024)
  })

  test('–¥–æ–ª–∂–µ–Ω –æ—Å–≤–æ–±–æ–∂–¥–∞—Ç—å –ø–∞–º—è—Ç—å –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏', async ({ page }) => {
    await page.goto('/')
    await page.waitForLoadState('networkidle')
    
    const initialMemory = await page.evaluate(() => {
      if ('memory' in performance) {
        return (performance as any).memory.usedJSHeapSize
      }
      return 0
    })
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –¥—Ä—É–≥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await page.goto('/planner')
    await page.waitForLoadState('networkidle')
    
    const afterNavigationMemory = await page.evaluate(() => {
      if ('memory' in performance) {
        return (performance as any).memory.usedJSHeapSize
      }
      return 0
    })
    
    // –ü–∞–º—è—Ç—å –Ω–µ –¥–æ–ª–∂–Ω–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å—Å—è
    expect(afterNavigationMemory - initialMemory).toBeLessThan(10 * 1024 * 1024)
  })

  test('–¥–æ–ª–∂–µ–Ω –æ—á–∏—â–∞—Ç—å event listeners', async ({ page }) => {
    await page.goto('/')
    await page.waitForLoadState('networkidle')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏ –≤ event listeners
    const eventListeners = await page.evaluate(() => {
      const elements = document.querySelectorAll('*')
      let totalListeners = 0
      
      elements.forEach(element => {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ event listeners
        // –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        totalListeners += element.attributes.length
      })
      
      return totalListeners
    })
    
    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–∑—É–º–Ω—ã–º
    expect(eventListeners).toBeLessThan(1000)
  })
})

describe('üîÑ Rendering Performance Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω —Ä–µ–Ω–¥–µ—Ä–∏—Ç—å—Å—è –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ UI', async ({ page }) => {
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á
    const longTasks = await page.evaluate(() => {
      return new Promise((resolve) => {
        const tasks = []
        new PerformanceObserver((list) => {
          const entries = list.getEntries()
          entries.forEach(entry => {
            if (entry.duration > 50) { // –ó–∞–¥–∞—á–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –±–æ–ª–µ–µ 50ms
              tasks.push(entry.duration)
            }
          })
          resolve(tasks)
        }).observe({ entryTypes: ['longtask'] })
        
        // Fallback
        setTimeout(() => {
          resolve(tasks)
        }, 5000)
      })
    })
    
    // –ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á
    expect(longTasks.length).toBe(0)
  })

  test('–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å requestAnimationFrame –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π', async ({ page }) => {
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–Ω–∏–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç requestAnimationFrame
    const animationFrames = await page.evaluate(() => {
      return new Promise((resolve) => {
        let frameCount = 0
        let startTime = Date.now()
        
        function countFrames() {
          frameCount++
          if (Date.now() - startTime < 1000) {
            requestAnimationFrame(countFrames)
          } else {
            resolve(frameCount)
          }
        }
        
        requestAnimationFrame(countFrames)
      })
    })
    
    // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–∑—É–º–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–¥—Ä–æ–≤
    expect(animationFrames).toBeGreaterThan(30) // 30 FPS
    expect(animationFrames).toBeLessThan(120) // 120 FPS
  })

  test('–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å CSS transforms –≤–º–µ—Å—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è layout', async ({ page }) => {
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è CSS transforms
    const styles = await page.evaluate(() => {
      const elements = document.querySelectorAll('*')
      let transformCount = 0
      let layoutCount = 0
      
      elements.forEach(element => {
        const computedStyle = window.getComputedStyle(element)
        if (computedStyle.transform !== 'none') {
          transformCount++
        }
        if (computedStyle.position !== 'static') {
          layoutCount++
        }
      })
      
      return { transformCount, layoutCount }
    })
    
    // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ transforms —á–µ–º layout changes
    expect(styles.transformCount).toBeGreaterThan(0)
  })
})

describe('üì± Mobile Performance Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –±—ã—Å—Ç—Ä–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö', async ({ page }) => {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–±–∏–ª—å–Ω—ã–π viewport
    await page.setViewportSize({ width: 375, height: 667 })
    
    const startTime = Date.now()
    await page.goto('/')
    await page.waitForLoadState('networkidle')
    const loadTime = Date.now() - startTime
    
    // –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –±—ã—Å—Ç—Ä–µ–µ
    expect(loadTime).toBeLessThan(2000)
  })

  test('–¥–æ–ª–∂–µ–Ω –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤', async ({ page }) => {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–±–∏–ª—å–Ω—ã–π viewport
    await page.setViewportSize({ width: 375, height: 667 })
    
    await page.goto('/')
    await page.waitForLoadState('networkidle')
    
    const images = page.locator('img')
    const imageCount = await images.count()
    
    for (let i = 0; i < imageCount; i++) {
      const img = images.nth(i)
      const src = await img.getAttribute('src')
      const srcset = await img.getAttribute('srcset')
      
      // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å srcset –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ —ç–∫—Ä–∞–Ω–∞
      if (src && !srcset) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ
        const boundingBox = await img.boundingBox()
        if (boundingBox) {
          expect(boundingBox.width).toBeLessThan(400) // –ù–µ –±–æ–ª—å—à–µ —à–∏—Ä–∏–Ω—ã —ç–∫—Ä–∞–Ω–∞
        }
      }
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å touch-friendly —Ä–∞–∑–º–µ—Ä—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤', async ({ page }) => {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–±–∏–ª—å–Ω—ã–π viewport
    await page.setViewportSize({ width: 375, height: 667 })
    
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
      localStorage.setItem('auth-token', 'mock-token')
      localStorage.setItem('user', JSON.stringify({
        id: 'user-1',
        email: 'test@example.com',
        name: 'Test User',
        subscription: 'free'
      }))
    })
    
    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')
    
    const buttons = page.locator('button')
    const buttonCount = await buttons.count()
    
    for (let i = 0; i < buttonCount; i++) {
      const button = buttons.nth(i)
      const boundingBox = await button.boundingBox()
      
      if (boundingBox) {
        // –ö–Ω–æ–ø–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 44x44 –ø–∏–∫—Å–µ–ª–µ–π –¥–ª—è touch
        expect(boundingBox.width).toBeGreaterThanOrEqual(44)
        expect(boundingBox.height).toBeGreaterThanOrEqual(44)
      }
    }
  })
})

describe('üåê Network Performance Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTTP/2', async ({ page }) => {
    const responses = []
    page.on('response', response => {
      responses.push(response)
    })
    
    await page.goto('/')
    await page.waitForLoadState('networkidle')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è HTTP/2
    const httpVersion = await page.evaluate(() => {
      return new Promise((resolve) => {
        const observer = new PerformanceObserver((list) => {
          const entries = list.getEntries()
          const resource = entries.find(entry => entry.entryType === 'resource')
          if (resource) {
            resolve(resource.nextHopProtocol)
          }
        })
        observer.observe({ entryTypes: ['resource'] })
        
        // Fallback
        setTimeout(() => {
          resolve('unknown')
        }, 5000)
      })
    })
    
    // –î–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è HTTP/2 –∏–ª–∏ –≤—ã—à–µ
    expect(httpVersion).toMatch(/h2|h3/)
  })

  test('–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å gzip —Å–∂–∞—Ç–∏–µ', async ({ page }) => {
    const responses = []
    page.on('response', response => {
      responses.push(response)
    })
    
    await page.goto('/')
    await page.waitForLoadState('networkidle')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–∂–∞—Ç–∏–µ
    const compressedResponses = responses.filter(response => {
      const contentEncoding = response.headers()['content-encoding']
      return contentEncoding && (contentEncoding.includes('gzip') || contentEncoding.includes('br'))
    })
    
    // –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–∂–∞—Ç—ã
    expect(compressedResponses.length).toBeGreaterThan(responses.length * 0.5)
  })

  test('–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å CDN –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤', async ({ page }) => {
    const requests = []
    page.on('request', request => {
      requests.push(request.url())
    })
    
    await page.goto('/')
    await page.waitForLoadState('networkidle')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è —Å CDN
    const cdnRequests = requests.filter(url => {
      return url.includes('cdn') || url.includes('static') || url.includes('assets')
    })
    
    // –î–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø—Ä–æ—Å—ã –∫ CDN
    expect(cdnRequests.length).toBeGreaterThan(0)
  })
})

describe('üîß Bundle Size Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ä–∞–∑—É–º–Ω—ã–π —Ä–∞–∑–º–µ—Ä JavaScript –±–∞–Ω–¥–ª–∞', async ({ page }) => {
    const responses = []
    page.on('response', response => {
      if (response.url().includes('.js')) {
        responses.push(response)
      }
    })
    
    await page.goto('/')
    await page.waitForLoadState('networkidle')
    
    let totalJSSize = 0
    for (const response of responses) {
      const contentLength = response.headers()['content-length']
      if (contentLength) {
        totalJSSize += parseInt(contentLength)
      }
    }
    
    // –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä JavaScript –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω–µ–µ 500KB
    expect(totalJSSize).toBeLessThan(500 * 1024)
  })

  test('–¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ä–∞–∑—É–º–Ω—ã–π —Ä–∞–∑–º–µ—Ä CSS –±–∞–Ω–¥–ª–∞', async ({ page }) => {
    const responses = []
    page.on('response', response => {
      if (response.url().includes('.css')) {
        responses.push(response)
      }
    })
    
    await page.goto('/')
    await page.waitForLoadState('networkidle')
    
    let totalCSSSize = 0
    for (const response of responses) {
      const contentLength = response.headers()['content-length']
      if (contentLength) {
        totalCSSSize += parseInt(contentLength)
      }
    }
    
    // –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä CSS –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω–µ–µ 100KB
    expect(totalCSSSize).toBeLessThan(100 * 1024)
  })

  test('–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å tree shaking', async ({ page }) => {
    await page.goto('/')
    await page.waitForLoadState('networkidle')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –º–æ–¥—É–ª–∏
    const unusedModules = await page.evaluate(() => {
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ webpack bundle analyzer
      // –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
      return 0
    })
    
    // –ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –º–æ–¥—É–ª–µ–π
    expect(unusedModules).toBe(0)
  })
})