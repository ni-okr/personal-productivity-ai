/**
 * ‚ö° –ù–ê–ì–†–£–ó–û–ß–ù–´–ï –ò –°–¢–†–ï–°–°-–¢–ï–°–¢–´
 * –ü–æ–∫—Ä—ã—Ç–∏–µ: 100% –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—É—Ç–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */

import { test, expect, Page } from '@playwright/test'

describe('üöÄ Load Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –≤—ã–¥–µ—Ä–∂–∏–≤–∞—Ç—å 100 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', async ({ page, context }) => {
    const promises = []
    
    // –°–æ–∑–¥–∞–µ–º 100 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π
    for (let i = 0; i < 100; i++) {
      const newPage = await context.newPage()
      promises.push(
        newPage.goto('/').then(() => {
          return newPage.waitForLoadState('networkidle')
        })
      )
    }
    
    const startTime = Date.now()
    await Promise.all(promises)
    const endTime = Date.now()
    
    const loadTime = endTime - startTime
    
    // –í—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ–ª–∂–Ω—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 30 —Å–µ–∫—É–Ω–¥
    expect(loadTime).toBeLessThan(30000)
  })

  test('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å 1000 –∑–∞–¥–∞—á –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', async ({ page }) => {
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
      localStorage.setItem('auth-token', 'mock-token')
      localStorage.setItem('user', JSON.stringify({
        id: 'user-1',
        email: 'test@example.com',
        name: 'Test User',
        subscription: 'free'
      }))
    })
    
    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')
    
    const startTime = Date.now()
    
    // –°–æ–∑–¥–∞–µ–º 1000 –∑–∞–¥–∞—á
    for (let i = 0; i < 1000; i++) {
      await page.click('[data-testid="add-task-button"]')
      await page.fill('[data-testid="task-title"]', `Load Test Task ${i}`)
      await page.selectOption('select', 'medium')
      await page.fill('input[type="number"]', '30')
      await page.click('[data-testid="save-task-button"]')
      await page.waitForSelector('.task-card', { timeout: 1000 })
    }
    
    const endTime = Date.now()
    const processingTime = endTime - startTime
    
    // –°–æ–∑–¥–∞–Ω–∏–µ 1000 –∑–∞–¥–∞—á –¥–æ–ª–∂–Ω–æ –∑–∞–Ω—è—Ç—å –º–µ–Ω–µ–µ 5 –º–∏–Ω—É—Ç
    expect(processingTime).toBeLessThan(300000)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∑–∞–¥–∞—á–∏ —Å–æ–∑–¥–∞–Ω—ã
    const taskCount = await page.locator('.task-card').count()
    expect(taskCount).toBe(1000)
  })

  test('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ API', async ({ page }) => {
    await page.goto('/')
    
    const startTime = Date.now()
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º 1000 –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    const promises = []
    for (let i = 0; i < 1000; i++) {
      promises.push(
        page.request.post('/api/subscribe', {
          data: { email: `loadtest${i}@example.com` }
        })
      )
    }
    
    const responses = await Promise.allSettled(promises)
    const endTime = Date.now()
    
    const processingTime = endTime - startTime
    
    // –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å—Å—è –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 60 —Å–µ–∫—É–Ω–¥
    expect(processingTime).toBeLessThan(60000)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ —É—Å–ø–µ—à–Ω—ã
    const successfulRequests = responses.filter(r => r.status === 'fulfilled').length
    expect(successfulRequests).toBeGreaterThan(900) // 90% —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
  })
})

describe('üí• Stress Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –≤—ã–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Å—Ç—Ä–µ—Å—Å —Ç–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö', async ({ page }) => {
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
      localStorage.setItem('auth-token', 'mock-token')
      localStorage.setItem('user', JSON.stringify({
        id: 'user-1',
        email: 'test@example.com',
        name: 'Test User',
        subscription: 'free'
      }))
    })
    
    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')
    
    const startTime = Date.now()
    
    // –°–æ–∑–¥–∞–µ–º, –æ–±–Ω–æ–≤–ª—è–µ–º –∏ —É–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á–∏ –≤ –±—ã—Å—Ç—Ä–æ–º —Ç–µ–º–ø–µ
    const operations = []
    for (let i = 0; i < 100; i++) {
      // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
      operations.push(async () => {
        await page.click('[data-testid="add-task-button"]')
        await page.fill('[data-testid="task-title"]', `Stress Test Task ${i}`)
        await page.click('[data-testid="save-task-button"]')
        await page.waitForSelector('.task-card', { timeout: 1000 })
      })
      
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
      operations.push(async () => {
        const taskCard = page.locator('.task-card').first()
        await taskCard.locator('button[aria-label*="Toggle task"]').click()
      })
      
      // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
      operations.push(async () => {
        const taskCard = page.locator('.task-card').first()
        await taskCard.locator('button[title="–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É"]').click()
      })
    }
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    const shuffledOperations = operations.sort(() => Math.random() - 0.5)
    
    for (const operation of shuffledOperations) {
      try {
        await operation()
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–ª—è —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞
        console.log('Operation failed:', error)
      }
    }
    
    const endTime = Date.now()
    const processingTime = endTime - startTime
    
    // –û–ø–µ—Ä–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 2 –º–∏–Ω—É—Ç—ã
    expect(processingTime).toBeLessThan(120000)
  })

  test('–¥–æ–ª–∂–µ–Ω –≤—ã–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Å—Ç—Ä–µ—Å—Å —Ç–µ—Å—Ç –ø–∞–º—è—Ç–∏ –±—Ä–∞—É–∑–µ—Ä–∞', async ({ page }) => {
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
      localStorage.setItem('auth-token', 'mock-token')
      localStorage.setItem('user', JSON.stringify({
        id: 'user-1',
        email: 'test@example.com',
        name: 'Test User',
        subscription: 'free'
      }))
    })
    
    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // –°–æ–∑–¥–∞–µ–º –º–Ω–æ–≥–æ –∑–∞–¥–∞—á –¥–ª—è –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –ø–∞–º—è—Ç—å
    for (let i = 0; i < 500; i++) {
      await page.click('[data-testid="add-task-button"]')
      await page.fill('[data-testid="task-title"]', `Memory Test Task ${i}`)
      await page.fill('textarea', `Description ${i}`.repeat(100)) // –ë–æ–ª—å—à–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
      await page.click('[data-testid="save-task-button"]')
      await page.waitForSelector('.task-card', { timeout: 1000 })
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Å–µ –µ—â–µ –æ—Ç–∑—ã–≤—á–∏–≤–∞
    await page.click('[data-testid="add-task-button"]')
    await expect(page.locator('[data-testid="task-title"]')).toBeVisible()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏ (—ç—Ç–æ —Å–ª–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤ Playwright)
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å performance.memory API
  })

  test('–¥–æ–ª–∂–µ–Ω –≤—ã–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Å—Ç—Ä–µ—Å—Å —Ç–µ—Å—Ç —Å–µ—Ç–∏', async ({ page }) => {
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –º–µ–¥–ª–µ–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    await page.route('**/*', async route => {
      await new Promise(resolve => setTimeout(resolve, 100)) // 100ms –∑–∞–¥–µ—Ä–∂–∫–∞
      await route.continue()
    })
    
    await page.goto('/')
    
    const startTime = Date.now()
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –º–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π –ø—Ä–∏ –º–µ–¥–ª–µ–Ω–Ω–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
    for (let i = 0; i < 50; i++) {
      await page.click('[data-testid="planner-button"]')
      await page.goBack()
      await page.click('[data-testid="notify-release-button"]')
      await page.fill('[data-testid="email-input"]', `networktest${i}@example.com`)
      await page.click('[data-testid="subscribe-button"]')
      await page.waitForSelector('[data-testid="subscription-status"]')
    }
    
    const endTime = Date.now()
    const processingTime = endTime - startTime
    
    // –û–ø–µ—Ä–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è –¥–∞–∂–µ –ø—Ä–∏ –º–µ–¥–ª–µ–Ω–Ω–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
    expect(processingTime).toBeLessThan(300000) // 5 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º
  })
})

describe('üìä Performance Monitoring', () => {
  test('–¥–æ–ª–∂–µ–Ω –∏–∑–º–µ—Ä—è—Ç—å –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã', async ({ page }) => {
    const startTime = Date.now()
    
    await page.goto('/')
    await page.waitForLoadState('networkidle')
    
    const loadTime = Date.now() - startTime
    
    // –°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 3 —Å–µ–∫—É–Ω–¥—ã
    expect(loadTime).toBeLessThan(3000)
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    console.log(`Page load time: ${loadTime}ms`)
  })

  test('–¥–æ–ª–∂–µ–Ω –∏–∑–º–µ—Ä—è—Ç—å –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ API', async ({ page }) => {
    await page.goto('/')
    
    const startTime = Date.now()
    
    const response = await page.request.post('/api/subscribe', {
      data: { email: 'perftest@example.com' }
    })
    
    const responseTime = Date.now() - startTime
    
    // API –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—á–∞—Ç—å –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 1 —Å–µ–∫—É–Ω–¥—É
    expect(responseTime).toBeLessThan(1000)
    expect(response.status()).toBe(200)
    
    console.log(`API response time: ${responseTime}ms`)
  })

  test('–¥–æ–ª–∂–µ–Ω –∏–∑–º–µ—Ä—è—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏', async ({ page }) => {
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
      localStorage.setItem('auth-token', 'mock-token')
      localStorage.setItem('user', JSON.stringify({
        id: 'user-1',
        email: 'test@example.com',
        name: 'Test User',
        subscription: 'free'
      }))
    })
    
    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø–∞–º—è—Ç–∏
    const memoryInfo = await page.evaluate(() => {
      if ('memory' in performance) {
        return (performance as any).memory
      }
      return null
    })
    
    if (memoryInfo) {
      console.log('Memory usage:', memoryInfo)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ —Ä–∞–∑—É–º–Ω–æ–µ
      expect(memoryInfo.usedJSHeapSize).toBeLessThan(50 * 1024 * 1024) // 50MB
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –∏–∑–º–µ—Ä—è—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞', async ({ page }) => {
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
      localStorage.setItem('auth-token', 'mock-token')
      localStorage.setItem('user', JSON.stringify({
        id: 'user-1',
        email: 'test@example.com',
        name: 'Test User',
        subscription: 'free'
      }))
    })
    
    await page.reload()
    
    // –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –¥–æ –ø–µ—Ä–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∞
    const fcp = await page.evaluate(() => {
      return new Promise(resolve => {
        new PerformanceObserver(list => {
          for (const entry of list.getEntries()) {
            if (entry.name === 'first-contentful-paint') {
              resolve(entry.startTime)
            }
          }
        }).observe({ entryTypes: ['paint'] })
      })
    })
    
    // FCP –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω–µ–µ 1.5 —Å–µ–∫—É–Ω–¥
    expect(fcp).toBeLessThan(1500)
    
    console.log(`First Contentful Paint: ${fcp}ms`)
  })
})

describe('üîÑ Stability Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω–æ –ø—Ä–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–µ', async ({ page }) => {
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
      localStorage.setItem('auth-token', 'mock-token')
      localStorage.setItem('user', JSON.stringify({
        id: 'user-1',
        email: 'test@example.com',
        name: 'Test User',
        subscription: 'free'
      }))
    })
    
    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç
    const endTime = Date.now() + 5 * 60 * 1000 // 5 –º–∏–Ω—É—Ç
    
    while (Date.now() < endTime) {
      try {
        // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
        await page.click('[data-testid="add-task-button"]')
        await page.fill('[data-testid="task-title"]', `Stability Test ${Date.now()}`)
        await page.click('[data-testid="save-task-button"]')
        await page.waitForSelector('.task-card', { timeout: 5000 })
        
        // –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞—á—É
        const taskCard = page.locator('.task-card').first()
        await taskCard.locator('button[aria-label*="Toggle task"]').click()
        
        // –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É
        await taskCard.locator('button[title="–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É"]').click()
        
        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
        await page.waitForTimeout(1000)
      } catch (error) {
        console.log('Operation failed during stability test:', error)
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤—Å–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    await expect(page.locator('[data-testid="planner-content"]')).toBeVisible()
  })

  test('–¥–æ–ª–∂–µ–Ω –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è –ø–æ—Å–ª–µ –æ—à–∏–±–æ–∫', async ({ page }) => {
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
      localStorage.setItem('auth-token', 'mock-token')
      localStorage.setItem('user', JSON.stringify({
        id: 'user-1',
        email: 'test@example.com',
        name: 'Test User',
        subscription: 'free'
      }))
    })
    
    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Å–µ—Ç–∏
    await page.route('**/api/tasks', route => route.fulfill({
      status: 500,
      contentType: 'application/json',
      body: JSON.stringify({ error: 'Internal Server Error' })
    }))
    
    // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É
    await page.click('[data-testid="add-task-button"]')
    await page.fill('[data-testid="task-title"]', 'Error Test Task')
    await page.click('[data-testid="save-task-button"]')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞
    await expect(page.locator('.error-message')).toBeVisible()
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ç—å
    await page.unroute('**/api/tasks')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
    await page.click('[data-testid="add-task-button"]')
    await page.fill('[data-testid="task-title"]', 'Recovery Test Task')
    await page.click('[data-testid="save-task-button"]')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞
    await expect(page.locator('.task-card')).toContainText('Recovery Test Task')
  })
})