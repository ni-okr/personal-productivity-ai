/**
 * üèóÔ∏è –¢–ï–°–¢–´ –î–û–ú–ï–ù–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê
 * –ü–æ–∫—Ä—ã—Ç–∏–µ: –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞, –ø—Ä–µ–¥–º–µ—Ç–Ω–∞—è –æ–±–ª–∞—Å—Ç—å, –¥–æ–º–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞
 */

import { test, expect, Page } from '@playwright/test'

describe('üíº Business Domain Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ–º–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏', async ({ page }) => {
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
      localStorage.setItem('auth-token', 'mock-token')
      localStorage.setItem('user', JSON.stringify({
        id: 'user-1',
        email: 'test@example.com',
        name: 'Test User',
        subscription: 'free'
      }))
    })
    
    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // –î–æ–º–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏
    const taskDomainRules = [
      {
        rule: '–ó–∞–¥–∞—á–∞ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä',
        test: async () => {
          await page.click('[data-testid="add-task-button"]')
          await page.fill('[data-testid="task-title"]', 'Test Task 1')
          await page.click('[data-testid="save-task-button"]')
          
          await page.click('[data-testid="add-task-button"]')
          await page.fill('[data-testid="task-title"]', 'Test Task 2')
          await page.click('[data-testid="save-task-button"]')
          
          const taskCards = page.locator('.task-card')
          await expect(taskCards).toHaveCount(2)
          
          const firstTaskId = await taskCards.first().getAttribute('data-task-id')
          const secondTaskId = await taskCards.nth(1).getAttribute('data-task-id')
          
          expect(firstTaskId).not.toBe(secondTaskId)
        }
      },
      {
        rule: '–ó–∞–¥–∞—á–∞ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ',
        test: async () => {
          await page.click('[data-testid="add-task-button"]')
          await page.fill('[data-testid="task-title"]', '')
          await page.click('[data-testid="save-task-button"]')
          
          await expect(page.locator('[data-testid="title-error"]')).toBeVisible()
        }
      },
      {
        rule: '–ó–∞–¥–∞—á–∞ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏–∑ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ —Å–ø–∏—Å–∫–∞',
        test: async () => {
          await page.click('[data-testid="add-task-button"]')
          await page.fill('[data-testid="task-title"]', 'Test Task')
          await page.selectOption('[data-testid="task-priority"]', 'invalid-priority')
          await page.click('[data-testid="save-task-button"]')
          
          await expect(page.locator('[data-testid="priority-error"]')).toBeVisible()
        }
      },
      {
        rule: '–ó–∞–¥–∞—á–∞ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ —Å–ø–∏—Å–∫–∞',
        test: async () => {
          await page.click('[data-testid="add-task-button"]')
          await page.fill('[data-testid="task-title"]', 'Test Task')
          await page.selectOption('[data-testid="task-category"]', 'invalid-category')
          await page.click('[data-testid="save-task-button"]')
          
          await expect(page.locator('[data-testid="category-error"]')).toBeVisible()
        }
      },
      {
        rule: '–ó–∞–¥–∞—á–∞ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –¥–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –±—É–¥—É—â–µ–º',
        test: async () => {
          await page.click('[data-testid="add-task-button"]')
          await page.fill('[data-testid="task-title"]', 'Test Task')
          await page.fill('[data-testid="task-due-date"]', '2023-01-01')
          await page.click('[data-testid="save-task-button"]')
          
          await expect(page.locator('[data-testid="due-date-error"]')).toBeVisible()
        }
      },
      {
        rule: '–ó–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è',
        test: async () => {
          await page.click('[data-testid="add-task-button"]')
          await page.fill('[data-testid="task-title"]', 'Test Task')
          await page.click('[data-testid="save-task-button"]')
          
          const taskCard = page.locator('.task-card').last()
          await taskCard.locator('[data-testid="complete-task-button"]').click()
          
          await expect(taskCard.locator('[data-testid="task-completed"]')).toBeChecked()
        }
      },
      {
        rule: '–£–¥–∞–ª–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞',
        test: async () => {
          await page.click('[data-testid="add-task-button"]')
          await page.fill('[data-testid="task-title"]', 'Test Task to Delete')
          await page.click('[data-testid="save-task-button"]')
          
          const taskCard = page.locator('.task-card').last()
          await taskCard.locator('[data-testid="delete-task-button"]').click()
          await page.click('[data-testid="confirm-delete"]')
          
          await expect(page.locator('.task-card')).not.toContainText('Test Task to Delete')
        }
      }
    ]
    
    for (const domainRule of taskDomainRules) {
      await domainRule.test()
    }
  })

  test('–¥–æ–ª–∂–µ–Ω —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ–º–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞—á', async ({ page }) => {
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
      localStorage.setItem('auth-token', 'mock-token')
      localStorage.setItem('user', JSON.stringify({
        id: 'user-1',
        email: 'test@example.com',
        name: 'Test User',
        subscription: 'free'
      }))
    })
    
    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // –î–æ–º–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞—á
    const prioritizationRules = [
      {
        rule: '–ó–∞–¥–∞—á–∏ —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –¥–æ–ª–∂–Ω—ã –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø–µ—Ä–≤—ã–º–∏',
        test: async () => {
          // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
          await page.click('[data-testid="add-task-button"]')
          await page.fill('[data-testid="task-title"]', 'Low Priority Task')
          await page.selectOption('[data-testid="task-priority"]', 'low')
          await page.click('[data-testid="save-task-button"]')
          
          await page.click('[data-testid="add-task-button"]')
          await page.fill('[data-testid="task-title"]', 'High Priority Task')
          await page.selectOption('[data-testid="task-priority"]', 'high')
          await page.click('[data-testid="save-task-button"]')
          
          await page.click('[data-testid="add-task-button"]')
          await page.fill('[data-testid="task-title"]', 'Medium Priority Task')
          await page.selectOption('[data-testid="task-priority"]', 'medium')
          await page.click('[data-testid="save-task-button"]')
          
          // –í–∫–ª—é—á–∞–µ–º —É–º–Ω—É—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
          await page.click('[data-testid="smart-sort-button"]')
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –∑–∞–¥–∞—á
          const taskCards = page.locator('.task-card')
          const firstTask = taskCards.first()
          const secondTask = taskCards.nth(1)
          const thirdTask = taskCards.nth(2)
          
          await expect(firstTask).toContainText('High Priority Task')
          await expect(secondTask).toContainText('Medium Priority Task')
          await expect(thirdTask).toContainText('Low Priority Task')
        }
      },
      {
        rule: '–ó–∞–¥–∞—á–∏ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –¥–æ–ª–∂–Ω—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ –¥–∞—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è',
        test: async () => {
          // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –Ω–æ —Ä–∞–∑–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏
          await page.click('[data-testid="add-task-button"]')
          await page.fill('[data-testid="task-title"]', 'Task Due Later')
          await page.selectOption('[data-testid="task-priority"]', 'high')
          await page.fill('[data-testid="task-due-date"]', '2024-12-31')
          await page.click('[data-testid="save-task-button"]')
          
          await page.click('[data-testid="add-task-button"]')
          await page.fill('[data-testid="task-title"]', 'Task Due Earlier')
          await page.selectOption('[data-testid="task-priority"]', 'high')
          await page.fill('[data-testid="task-due-date"]', '2024-12-01')
          await page.click('[data-testid="save-task-button"]')
          
          // –í–∫–ª—é—á–∞–µ–º —É–º–Ω—É—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
          await page.click('[data-testid="smart-sort-button"]')
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –∑–∞–¥–∞—á
          const taskCards = page.locator('.task-card')
          const firstTask = taskCards.first()
          const secondTask = taskCards.nth(1)
          
          await expect(firstTask).toContainText('Task Due Earlier')
          await expect(secondTask).toContainText('Task Due Later')
        }
      },
      {
        rule: '–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–Ω—ã –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –∫–æ–Ω—Ü–µ —Å–ø–∏—Å–∫–∞',
        test: async () => {
          // –°–æ–∑–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é –∏ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é –∑–∞–¥–∞—á–∏
          await page.click('[data-testid="add-task-button"]')
          await page.fill('[data-testid="task-title"]', 'Completed Task')
          await page.selectOption('[data-testid="task-priority"]', 'high')
          await page.check('[data-testid="task-completed"]')
          await page.click('[data-testid="save-task-button"]')
          
          await page.click('[data-testid="add-task-button"]')
          await page.fill('[data-testid="task-title"]', 'Pending Task')
          await page.selectOption('[data-testid="task-priority"]', 'low')
          await page.click('[data-testid="save-task-button"]')
          
          // –í–∫–ª—é—á–∞–µ–º —É–º–Ω—É—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
          await page.click('[data-testid="smart-sort-button"]')
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –∑–∞–¥–∞—á
          const taskCards = page.locator('.task-card')
          const firstTask = taskCards.first()
          const lastTask = taskCards.last()
          
          await expect(firstTask).toContainText('Pending Task')
          await expect(lastTask).toContainText('Completed Task')
        }
      }
    ]
    
    for (const prioritizationRule of prioritizationRules) {
      await prioritizationRule.test()
    }
  })

  test('–¥–æ–ª–∂–µ–Ω —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ–º–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –ò–ò –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞', async ({ page }) => {
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
      localStorage.setItem('auth-token', 'mock-token')
      localStorage.setItem('user', JSON.stringify({
        id: 'user-1',
        email: 'test@example.com',
        name: 'Test User',
        subscription: 'free'
      }))
    })
    
    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // –î–æ–º–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –ò–ò –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    const aiPlannerRules = [
      {
        rule: '–ò–ò –¥–æ–ª–∂–µ–Ω –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        test: async () => {
          // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
          await page.click('[data-testid="add-task-button"]')
          await page.fill('[data-testid="task-title"]', 'Task 1')
          await page.selectOption('[data-testid="task-priority"]', 'high')
          await page.click('[data-testid="save-task-button"]')
          
          await page.click('[data-testid="add-task-button"]')
          await page.fill('[data-testid="task-title"]', 'Task 2')
          await page.selectOption('[data-testid="task-priority"]', 'medium')
          await page.click('[data-testid="save-task-button"]')
          
          // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
          await page.click('[data-testid="analyze-productivity-button"]')
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω
          const analysisSection = page.locator('[data-testid="productivity-analysis"]')
          await expect(analysisSection).toBeVisible()
          
          const score = page.locator('[data-testid="productivity-score"]')
          await expect(score).toBeVisible()
          
          const insights = page.locator('[data-testid="productivity-insights"]')
          await expect(insights).toBeVisible()
        }
      },
      {
        rule: '–ò–ò –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å —É–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏',
        test: async () => {
          // –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
          await page.click('[data-testid="generate-suggestions-button"]')
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã
          const suggestionsSection = page.locator('[data-testid="ai-suggestions"]')
          await expect(suggestionsSection).toBeVisible()
          
          const suggestionCards = page.locator('.suggestion-card')
          await expect(suggestionCards).toHaveCount.greaterThan(0)
        }
      },
      {
        rule: '–ò–ò –¥–æ–ª–∂–µ–Ω –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á',
        test: async () => {
          // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
          await page.click('[data-testid="add-task-button"]')
          await page.fill('[data-testid="task-title"]', 'Task for Time Optimization')
          await page.selectOption('[data-testid="task-priority"]', 'high')
          await page.fill('[data-testid="task-duration"]', '120') // 2 —á–∞—Å–∞
          await page.click('[data-testid="save-task-button"]')
          
          // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –≤—Ä–µ–º–µ–Ω–∏
          await page.click('[data-testid="optimize-time-button"]')
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ
          const timeOptimizationSection = page.locator('[data-testid="time-optimization"]')
          await expect(timeOptimizationSection).toBeVisible()
          
          const optimalTimeSlots = page.locator('[data-testid="optimal-time-slot"]')
          await expect(optimalTimeSlots).toHaveCount.greaterThan(0)
        }
      },
      {
        rule: '–ò–ò –¥–æ–ª–∂–µ–Ω —É—á–∏—Ç—ã–≤–∞—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        test: async () => {
          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          await page.click('[data-testid="user-preferences-button"]')
          
          await page.fill('[data-testid="preferred-work-hours-start"]', '09:00')
          await page.fill('[data-testid="preferred-work-hours-end"]', '17:00')
          await page.selectOption('[data-testid="preferred-break-duration"]', '15')
          await page.selectOption('[data-testid="preferred-task-duration"]', '60')
          
          await page.click('[data-testid="save-preferences-button"]')
          
          // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É —Å —É—á–µ—Ç–æ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
          await page.click('[data-testid="add-task-button"]')
          await page.fill('[data-testid="task-title"]', 'Task with User Preferences')
          await page.selectOption('[data-testid="task-priority"]', 'high')
          await page.click('[data-testid="save-task-button"]')
          
          // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
          await page.click('[data-testid="plan-with-preferences-button"]')
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–ª–∞–Ω —É—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
          const planSection = page.locator('[data-testid="ai-plan"]')
          await expect(planSection).toBeVisible()
          
          const planItems = page.locator('.plan-item')
          await expect(planItems).toHaveCount.greaterThan(0)
        }
      }
    ]
    
    for (const aiPlannerRule of aiPlannerRules) {
      await aiPlannerRule.test()
    }
  })
})

describe('üîê Security Domain Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ–º–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏', async ({ page }) => {
    await page.goto('/')
    
    // –î–æ–º–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    const securityRules = [
      {
        rule: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫—É',
        test: async () => {
          // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫—É –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
          await page.goto('/planner')
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–µ–ª —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
          await expect(page.locator('[data-testid="login-form"]')).toBeVisible()
        }
      },
      {
        rule: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–≤–æ–∏–º –¥–∞–Ω–Ω—ã–º',
        test: async () => {
          // –ú–æ–∫–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
          await page.evaluate(() => {
            localStorage.setItem('auth-token', 'mock-token')
            localStorage.setItem('user', JSON.stringify({
              id: 'user-1',
              email: 'test@example.com',
              name: 'Test User',
              subscription: 'free'
            }))
          })
          
          await page.goto('/planner')
          await page.waitForSelector('[data-testid="planner-content"]')
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∑–∞–¥–∞—á–∏
          const taskCards = page.locator('.task-card')
          await expect(taskCards).toHaveCount(0) // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –¥–æ–ª–∂–µ–Ω –≤–∏–¥–µ—Ç—å —á—É–∂–∏–µ –∑–∞–¥–∞—á–∏
        }
      },
      {
        rule: '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
        test: async () => {
          await page.goto('/')
          
          // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ª–∞–±—ã–µ –ø–∞—Ä–æ–ª–∏
          const weakPasswords = ['123456', 'password', 'qwerty', 'abc123']
          
          for (const password of weakPasswords) {
            await page.fill('[data-testid="password"]', password)
            await page.click('[data-testid="register-button"]')
            
            await expect(page.locator('[data-testid="password-error"]')).toBeVisible()
          }
          
          // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å
          await page.fill('[data-testid="password"]', 'StrongPassword123!')
          await page.click('[data-testid="register-button"]')
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—à–∏–±–∫–∏ –Ω–µ—Ç
          await expect(page.locator('[data-testid="password-error"]')).not.toBeVisible()
        }
      },
      {
        rule: 'Email –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º',
        test: async () => {
          await page.goto('/')
          
          // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ email
          const invalidEmails = ['invalid-email', '@example.com', 'test@', 'test.example.com']
          
          for (const email of invalidEmails) {
            await page.fill('[data-testid="email"]', email)
            await page.click('[data-testid="register-button"]')
            
            await expect(page.locator('[data-testid="email-error"]')).toBeVisible()
          }
          
          // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–π email
          await page.fill('[data-testid="email"]', 'test@example.com')
          await page.click('[data-testid="register-button"]')
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—à–∏–±–∫–∏ –Ω–µ—Ç
          await expect(page.locator('[data-testid="email-error"]')).not.toBeVisible()
        }
      }
    ]
    
    for (const securityRule of securityRules) {
      await securityRule.test()
    }
  })
})

describe('üí∞ Business Domain Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ–º–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –ø–æ–¥–ø–∏—Å–æ–∫', async ({ page }) => {
    await page.goto('/')
    
    // –î–æ–º–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –ø–æ–¥–ø–∏—Å–æ–∫
    const subscriptionRules = [
      {
        rule: '–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è',
        test: async () => {
          // –ú–æ–∫–∞–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
          await page.evaluate(() => {
            localStorage.setItem('subscription', JSON.stringify({
              plan: 'free',
              features: ['basic-tasks', 'basic-ai'],
              limits: {
                tasks: 50,
                aiRequests: 100
              },
              status: 'active'
            }))
          })
          
          await page.goto('/planner')
          await page.waitForSelector('[data-testid="planner-content"]')
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
          const taskLimit = page.locator('[data-testid="task-limit"]')
          await expect(taskLimit).toContainText('50')
          
          const aiLimit = page.locator('[data-testid="ai-limit"]')
          await expect(aiLimit).toContainText('100')
        }
      },
      {
        rule: '–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–Ω–∏–º–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è',
        test: async () => {
          // –ú–æ–∫–∞–µ–º –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É
          await page.evaluate(() => {
            localStorage.setItem('subscription', JSON.stringify({
              plan: 'premium',
              features: ['unlimited-tasks', 'advanced-ai', 'priority-support'],
              limits: {
                tasks: -1, // -1 –æ–∑–Ω–∞—á–∞–µ—Ç –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
                aiRequests: -1
              },
              status: 'active'
            }))
          })
          
          await page.goto('/planner')
          await page.waitForSelector('[data-testid="planner-content"]')
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–Ω—è—Ç—ã
          const taskLimit = page.locator('[data-testid="task-limit"]')
          await expect(taskLimit).toContainText('Unlimited')
          
          const aiLimit = page.locator('[data-testid="ai-limit"]')
          await expect(aiLimit).toContainText('Unlimited')
        }
      },
      {
        rule: '–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ–ª–∂–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–µ–≤–∞—Ç—å—Å—è',
        test: async () => {
          // –ú–æ–∫–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø—Ä–æ–¥–ª–µ–Ω–∏–µ–º
          await page.evaluate(() => {
            localStorage.setItem('subscription', JSON.stringify({
              plan: 'premium',
              features: ['unlimited-tasks', 'advanced-ai', 'priority-support'],
              autoRenew: true,
              nextBillingDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),
              status: 'active'
            }))
          })
          
          await page.goto('/planner')
          await page.waitForSelector('[data-testid="planner-content"]')
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞
          const subscriptionStatus = page.locator('[data-testid="subscription-status"]')
          await expect(subscriptionStatus).toContainText('Active')
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ø–∏—Å–∞–Ω–∏—è
          const nextBillingDate = page.locator('[data-testid="next-billing-date"]')
          await expect(nextBillingDate).toBeVisible()
        }
      },
      {
        rule: '–û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–æ–ª–∂–Ω–∞ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –¥–æ—Å—Ç—É–ø –¥–æ –∫–æ–Ω—Ü–∞ –ø–µ—Ä–∏–æ–¥–∞',
        test: async () => {
          // –ú–æ–∫–∞–µ–º –æ—Ç–º–µ–Ω–µ–Ω–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
          await page.evaluate(() => {
            localStorage.setItem('subscription', JSON.stringify({
              plan: 'premium',
              features: ['unlimited-tasks', 'advanced-ai', 'priority-support'],
              autoRenew: false,
              nextBillingDate: new Date(Date.now() + 15 * 24 * 60 * 60 * 1000).toISOString(),
              status: 'cancelled'
            }))
          })
          
          await page.goto('/planner')
          await page.waitForSelector('[data-testid="planner-content"]')
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–æ—Å—Ç—É–ø —Å–æ—Ö—Ä–∞–Ω–µ–Ω
          const subscriptionStatus = page.locator('[data-testid="subscription-status"]')
          await expect(subscriptionStatus).toContainText('Active until')
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
          const premiumFeatures = page.locator('[data-testid="premium-features"]')
          await expect(premiumFeatures).toBeVisible()
        }
      }
    ]
    
    for (const subscriptionRule of subscriptionRules) {
      await subscriptionRule.test()
    }
  })
})

describe('üìä Analytics Domain Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ–º–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏', async ({ page }) => {
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
      localStorage.setItem('auth-token', 'mock-token')
      localStorage.setItem('user', JSON.stringify({
        id: 'user-1',
        email: 'test@example.com',
        name: 'Test User',
        subscription: 'free'
      }))
    })
    
    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // –î–æ–º–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    const analyticsRules = [
      {
        rule: '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á',
        test: async () => {
          // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
          await page.click('[data-testid="add-task-button"]')
          await page.fill('[data-testid="task-title"]', 'Analytics Test Task')
          await page.click('[data-testid="save-task-button"]')
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–±—ã—Ç–∏–µ –æ—Ç—Å–ª–µ–∂–µ–Ω–æ
          const analyticsData = await page.evaluate(() => {
            return localStorage.getItem('analytics-task-created')
          })
          
          expect(analyticsData).toBeDefined()
        }
      },
      {
        rule: '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á',
        test: async () => {
          // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
          await page.click('[data-testid="add-task-button"]')
          await page.fill('[data-testid="task-title"]', 'Task to Complete')
          await page.click('[data-testid="save-task-button"]')
          
          // –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞—á—É
          const taskCard = page.locator('.task-card').last()
          await taskCard.locator('[data-testid="complete-task-button"]').click()
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–±—ã—Ç–∏–µ –æ—Ç—Å–ª–µ–∂–µ–Ω–æ
          const analyticsData = await page.evaluate(() => {
            return localStorage.getItem('analytics-task-completed')
          })
          
          expect(analyticsData).toBeDefined()
        }
      },
      {
        rule: '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ò–ò —Ñ—É–Ω–∫—Ü–∏–π',
        test: async () => {
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ò–ò —Ñ—É–Ω–∫—Ü–∏—é
          await page.click('[data-testid="generate-suggestions-button"]')
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–±—ã—Ç–∏–µ –æ—Ç—Å–ª–µ–∂–µ–Ω–æ
          const analyticsData = await page.evaluate(() => {
            return localStorage.getItem('analytics-ai-usage')
          })
          
          expect(analyticsData).toBeDefined()
        }
      },
      {
        rule: '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
        test: async () => {
          // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫
          await page.click('[data-testid="add-task-button"]')
          await page.fill('[data-testid="task-title"]', 'Task 1')
          await page.click('[data-testid="save-task-button"]')
          
          await page.click('[data-testid="add-task-button"]')
          await page.fill('[data-testid="task-title"]', 'Task 2')
          await page.click('[data-testid="save-task-button"]')
          
          // –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫
          await page.click('[data-testid="calculate-metrics-button"]')
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç—Ä–∏–∫–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã
          const metricsSection = page.locator('[data-testid="productivity-metrics"]')
          await expect(metricsSection).toBeVisible()
          
          const taskCount = page.locator('[data-testid="task-count"]')
          await expect(taskCount).toContainText('2')
          
          const completionRate = page.locator('[data-testid="completion-rate"]')
          await expect(completionRate).toBeVisible()
        }
      }
    ]
    
    for (const analyticsRule of analyticsRules) {
      await analyticsRule.test()
    }
  })
})