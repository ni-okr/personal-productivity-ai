/**
 * üß™ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å –ø–æ–º–æ—â—å—é –µ–¥–∏–Ω–æ–≥–æ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * 
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω: 2025-09-16T21:33:45.026Z
 * –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫: tests/unit/monetization.test.ts.backup
 * 
 * –í–ê–ñ–ù–û: –í—Å–µ –Ω–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–¥–∏–Ω—ã–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫!
 * –°–º. –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é: tests/docs/TESTING_FRAMEWORK.md
 */

// üß™ Unit —Ç–µ—Å—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏
import { getSubscriptionPlan, getSubscriptionPlans } from '@/lib/subscriptions'
import { createPaymentSession, getTinkoffPriceId } from '@/lib/tinkoff'
import { beforeEach, describe, expect, it } from '@jest/globals'
import { testFramework, testLogger, testMocks, testUtils, TEST_CONFIGS, MOCK_CONFIGS } from '../framework'


describe('Monetization System', () => {
    beforeEach(() => {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –µ–¥–∏–Ω–æ–≥–æ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    testFramework.updateConfig(TEST_CONFIGS.UNIT)
    testMocks.updateConfig(MOCK_CONFIGS.MINIMAL)
    testMocks.setupAllMocks()
    testLogger.startTest('Test Suite')
        jest.clearAllMocks()
    })

    describe('Subscription Plans - Revenue Validation', () => {
        it('–¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –¥–ª—è –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏', () => {
            const plans = getSubscriptionPlans()

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –ø–ª–∞–Ω—ã –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ü–µ–Ω—ã
            const freePlan = plans.find(p => p.tier === 'free')
            const premiumPlan = plans.find(p => p.tier === 'premium')
            const proPlan = plans.find(p => p.tier === 'pro')
            const enterprisePlan = plans.find(p => p.tier === 'enterprise')

            // Free –ø–ª–∞–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º
            expect(freePlan?.price).toBe(0)
            expect(freePlan?.currency).toBe('RUB')

            // Premium –ø–ª–∞–Ω - 999 —Ä—É–±–ª–µ–π –≤ –º–µ—Å—è—Ü
            expect(premiumPlan?.price).toBe(99900) // –≤ –∫–æ–ø–µ–π–∫–∞—Ö
            expect(premiumPlan?.currency).toBe('RUB')
            expect(premiumPlan?.interval).toBe('month')

            // Pro –ø–ª–∞–Ω - 1999 —Ä—É–±–ª–µ–π –≤ –º–µ—Å—è—Ü
            expect(proPlan?.price).toBe(199900) // –≤ –∫–æ–ø–µ–π–∫–∞—Ö
            expect(proPlan?.currency).toBe('RUB')
            expect(proPlan?.interval).toBe('month')

            // Enterprise –ø–ª–∞–Ω - 4999 —Ä—É–±–ª–µ–π –≤ –º–µ—Å—è—Ü
            expect(enterprisePlan?.price).toBe(499900) // –≤ –∫–æ–ø–µ–π–∫–∞—Ö
            expect(enterprisePlan?.currency).toBe('RUB')
            expect(enterprisePlan?.interval).toBe('month')
        })

        it('–¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ª–∏–º–∏—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–ª–∞–Ω–∞', () => {
            const plans = getSubscriptionPlans()

            plans.forEach(plan => {
                expect(plan.limits).toBeDefined()
                // -1 –æ–∑–Ω–∞—á–∞–µ—Ç –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —á–∏—Å–ª–æ
                expect(typeof plan.limits.tasks).toBe('number')
                expect(typeof plan.limits.aiRequests).toBe('number')
                expect(typeof plan.limits.storage).toBe('number')
            })

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—é –ª–∏–º–∏—Ç–æ–≤ (–∏—Å–∫–ª—é—á–∞–µ–º -1 –∫–∞–∫ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ)
            const freePlan = plans.find(p => p.tier === 'free')
            const premiumPlan = plans.find(p => p.tier === 'premium')
            const proPlan = plans.find(p => p.tier === 'pro')
            const enterprisePlan = plans.find(p => p.tier === 'enterprise')

            expect(premiumPlan?.limits.tasks).toBeGreaterThan(freePlan?.limits.tasks || 0)
            // pro –∏ enterprise –∏–º–µ—é—Ç –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ (-1), –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–Ω–∏ –Ω–µ –º–µ–Ω—å—à–µ
            expect(proPlan?.limits.tasks).toBeLessThanOrEqual(0) // -1 <= 0 (–Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ)
            expect(enterprisePlan?.limits.tasks).toBeLessThanOrEqual(0) // -1 <= 0 (–Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ)
        })

        it('–¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¢–∏–Ω—å–∫–æ—Ñ—Ñ ID –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π', () => {
            const plans = getSubscriptionPlans()

            plans.forEach(plan => {
                if (plan.tier === 'free') {
                    expect(plan.tinkoffPriceId).toBe('')
                } else {
                    expect(plan.tinkoffPriceId).toMatch(/^tinkoff_/)
                    expect(plan.tinkoffPriceId).toContain(plan.tier)
                }
            })
        })
    })

    describe('Payment Processing - Revenue Flow', () => {
        it('–¥–æ–ª–∂–Ω–∞ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–ª–∞—Ç–µ–∂–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Å—É–º–º–∞–º–∏', async () => {
            const paymentData = {
                userId: 'user-123',
                planId: 'plan-premium',
                amount: 999,
                currency: 'RUB',
                description: '–ü–æ–¥–ø–∏—Å–∫–∞ Premium',
                paymentMethod: 'bank_transfer' as const
            }

            const result = await createPaymentSession(paymentData)

            expect(result.success).toBe(true)
            expect(result.data).toBeDefined()
            expect(result.data?.amount).toBe(999)
            expect(result.data?.currency).toBe('RUB')
            expect(result.data?.paymentMethod).toBe('bank_transfer')
        })

        it('–¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –¥–ª—è –ø–ª–∞–Ω–æ–≤', () => {
            const premiumPrice = getTinkoffPriceId('plan-premium')
            const proPrice = getTinkoffPriceId('plan-pro')
            const enterprisePrice = getTinkoffPriceId('plan-enterprise')

            expect(premiumPrice).toEqual({
                tinkoffPriceId: 'bank_transfer_premium_monthly',
                amount: 999,
                currency: 'RUB'
            })

            expect(proPrice).toEqual({
                tinkoffPriceId: 'bank_transfer_pro_monthly',
                amount: 1999,
                currency: 'RUB'
            })

            expect(enterprisePrice).toEqual({
                tinkoffPriceId: 'bank_transfer_enterprise_monthly',
                amount: 4999,
                currency: 'RUB'
            })
        })
    })

    describe('Revenue Calculations', () => {
        it('–¥–æ–ª–∂–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å –º–µ—Å—è—á–Ω—É—é –≤—ã—Ä—É—á–∫—É', () => {
            const plans = getSubscriptionPlans()

            // –°–∏–º—É–ª–∏—Ä—É–µ–º 100 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –∫–∞–∂–¥–æ–º –ø–ª–∞–Ω–µ
            const usersPerPlan = 100
            const monthlyRevenue = plans.reduce((total, plan) => {
                return total + (plan.price * usersPerPlan)
            }, 0)

            // –û–∂–∏–¥–∞–µ–º–∞—è –≤—ã—Ä—É—á–∫–∞: 0 + 99900*100 + 199900*100 + 499900*100 = 79,970,000 –∫–æ–ø–µ–µ–∫ = 799,700 —Ä—É–±–ª–µ–π
            const expectedRevenue = 0 + 99900 * 100 + 199900 * 100 + 499900 * 100
            expect(monthlyRevenue).toBe(expectedRevenue)
        })

        it('–¥–æ–ª–∂–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å –≥–æ–¥–æ–≤—É—é –≤—ã—Ä—É—á–∫—É', () => {
            const plans = getSubscriptionPlans()

            const usersPerPlan = 100
            const monthlyRevenue = plans.reduce((total, plan) => {
                return total + (plan.price * usersPerPlan)
            }, 0)

            const yearlyRevenue = monthlyRevenue * 12
            const expectedYearlyRevenue = (0 + 99900 * 100 + 199900 * 100 + 499900 * 100) * 12
            expect(yearlyRevenue).toBe(expectedYearlyRevenue)
        })
    })

    describe('Business Logic Validation', () => {
        it('–¥–æ–ª–∂–Ω–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—é —Ü–µ–Ω', () => {
            const plans = getSubscriptionPlans()
            const paidPlans = plans.filter(p => p.tier !== 'free')

            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ü–µ–Ω–µ
            const sortedPlans = paidPlans.sort((a, b) => a.price - b.price)

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ü–µ–Ω—ã —Ä–∞—Å—Ç—É—Ç
            for (let i = 1; i < sortedPlans.length; i++) {
                expect(sortedPlans[i].price).toBeGreaterThan(sortedPlans[i - 1].price)
            }
        })

        it('–¥–æ–ª–∂–Ω–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—é –ª–∏–º–∏—Ç–æ–≤', () => {
            const plans = getSubscriptionPlans()
            const sortedPlans = plans.sort((a, b) => a.price - b.price)

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ª–∏–º–∏—Ç—ã —Ä–∞—Å—Ç—É—Ç —Å —Ü–µ–Ω–æ–π (–∏—Å–∫–ª—é—á–∞–µ–º -1 –∫–∞–∫ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ)
            for (let i = 1; i < sortedPlans.length; i++) {
                const current = sortedPlans[i].limits
                const previous = sortedPlans[i - 1].limits

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–±–∞ –ª–∏–º–∏—Ç–∞ –Ω–µ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ (-1)
                if (current.tasks !== -1 && previous.tasks !== -1) {
                    expect(current.tasks).toBeGreaterThanOrEqual(previous.tasks)
                }
                if (current.aiRequests !== -1 && previous.aiRequests !== -1) {
                    expect(current.aiRequests).toBeGreaterThanOrEqual(previous.aiRequests)
                }
                if (current.storage !== -1 && previous.storage !== -1) {
                    expect(current.storage).toBeGreaterThanOrEqual(previous.storage)
                }
            }
        })

        it('–¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å —Ä–∞–∑—É–º–Ω—ã–µ —Ü–µ–Ω—ã –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —Ä—ã–Ω–∫–∞', () => {
            const plans = getSubscriptionPlans()
            const paidPlans = plans.filter(p => p.tier !== 'free')

            paidPlans.forEach(plan => {
                const priceInRubles = plan.price / 100

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ü–µ–Ω—ã —Ä–∞–∑—É–º–Ω—ã–µ –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —Ä—ã–Ω–∫–∞
                expect(priceInRubles).toBeGreaterThan(0)
                expect(priceInRubles).toBeLessThan(10000) // –ù–µ –±–æ–ª—å—à–µ 10,000 —Ä—É–±–ª–µ–π

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ü–µ–Ω—ã –∫—Ä–∞—Ç–Ω—ã–µ 1 —Ä—É–±–ª—é
                expect(priceInRubles % 1).toBe(0)
            })
        })
    })

    describe('Conversion Funnel Validation', () => {
        it('–¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏', () => {
            const freePlan = getSubscriptionPlan('free')

            expect(freePlan).toBeDefined()
            expect(freePlan?.features).toContain('–î–æ 50 –∑–∞–¥–∞—á')
            expect(freePlan?.features).toContain('–ë–∞–∑–æ–≤—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫')
            expect(freePlan?.features).toContain('–ü—Å–µ–≤–¥–æ-–ò–ò —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏')
            expect(freePlan?.features).toContain('–ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ')
        })

        it('–¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å —á–µ—Ç–∫–∏–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø–ª–∞—Ç–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤', () => {
            const freePlan = getSubscriptionPlan('free')
            const premiumPlan = getSubscriptionPlan('premium')

            expect(premiumPlan?.features).toContain('OpenAI GPT-4o Mini')
            expect(premiumPlan?.features).toContain('–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞')
            expect(premiumPlan?.features).toContain('–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞')
            expect(premiumPlan?.features).toContain('–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö')
        })

        it('–¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ª–∏–º–∏—Ç—ã –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Å–∏–∏', () => {
            const freePlan = getSubscriptionPlan('free')
            const premiumPlan = getSubscriptionPlan('premium')

            // Free –ø–ª–∞–Ω –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞—Å—Ç–∞–≤—è—Ç –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ Premium
            expect(freePlan?.limits.tasks).toBe(50)
            expect(freePlan?.limits.aiRequests).toBe(0)

            // Premium –ø–ª–∞–Ω –¥–æ–ª–∂–µ–Ω —Å–Ω—è—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
            expect(premiumPlan?.limits.tasks).toBe(500)
            expect(premiumPlan?.limits.aiRequests).toBe(1000)
        })
    })
})
