import { testLogger, testMocks } from '../framework'

/**
 * üß™ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å –ø–æ–º–æ—â—å—é –µ–¥–∏–Ω–æ–≥–æ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * 
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω: 2025-09-16T21:33:45.026Z
 * –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫: tests/unit/auth.test.ts.backup
 * 
 * –í–ê–ñ–ù–û: –í—Å–µ –Ω–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–¥–∏–Ω—ã–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫!
 * –°–º. –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é: tests/docs/TESTING_FRAMEWORK.md
 */

// üß™ Integration —Ç–µ—Å—Ç—ã –¥–ª—è auth.ts —Å mock —Ä–µ–∂–∏–º–æ–º
import {
    confirmEmail,
    getCurrentUser,
    getUserProfile,
    resetPassword,
    signIn,
    signInWithGitHub,
    signInWithGoogle,
    signOut,
    signUp,
    updatePassword,
    updateUserProfile
} from '@/lib/auth'

// Mock console.log –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–æ–≤
let mockConsoleLog: jest.SpyInstance

describe('Auth Integration (Mock Mode)', () => {
    const mockUserData = {
        email: 'test@example.test',
        password: 'Password123',
        name: 'Test User'
    }

    beforeEach(async () => {
        mockConsoleLog = jest.spyOn(console, 'log').mockImplementation()
        // –û—á–∏—â–∞–µ–º mock –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º
        const { clearMockUsers } = await import('@/lib/auth-mock')
        clearMockUsers()
    })

    afterEach(() => {
        testMocks.clearAllMocks()
        testLogger.endTest('Test Suite', true)
        mockConsoleLog.mockRestore()
    })

    describe('signUp', () => {
        it('–¥–æ–ª–∂–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –≤ mock —Ä–µ–∂–∏–º–µ', async () => {
            const result = await signUp(mockUserData)

            expect(result.success).toBe(true)
            expect(result.user).toBeDefined()
            expect(result.user?.email).toBe(mockUserData.email)
            expect(result.user?.name).toBe(mockUserData.name)
            expect(result.user?.subscription).toBe('free')
            expect(result.message).toBe('Mock —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞')
        })

        it('–¥–æ–ª–∂–Ω–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ mock —Ä–µ–∂–∏–º–µ', async () => {
            // –°–Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await signUp(mockUserData)

            // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≥–æ –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–Ω–æ–≤–∞
            const result = await signUp(mockUserData)

            expect(result.success).toBe(false)
            expect(result.error).toBe('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (mock)')
        })

        it('–¥–æ–ª–∂–Ω–∞ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –≤ mock —Ä–µ–∂–∏–º–µ', async () => {
            await signUp(mockUserData)

            expect(mockConsoleLog).toHaveBeenCalledWith(
                'üß™ MOCK –†–ï–ñ–ò–ú: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Supabase'
            )
        })
    })

    describe('signIn', () => {
        beforeEach(async () => {
            // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –≤—Ö–æ–¥–∞
            await signUp(mockUserData)
        })

        it('–¥–æ–ª–∂–Ω–∞ –≤—Ö–æ–¥–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –≤ mock —Ä–µ–∂–∏–º–µ', async () => {
            const result = await signIn({
                email: mockUserData.email,
                password: mockUserData.password
            })

            expect(result.success).toBe(true)
            expect(result.user).toBeDefined()
            expect(result.user?.email).toBe(mockUserData.email)
            expect(result.message).toBe('Mock –≤—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω')
        })

        it('–¥–æ–ª–∂–Ω–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –≤—Ö–æ–¥–∞ –≤ mock —Ä–µ–∂–∏–º–µ', async () => {
            const result = await signIn({
                email: mockUserData.email,
                password: 'wrongpassword'
            })

            expect(result.success).toBe(false)
            expect(result.error).toBe('–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å (mock)')
        })

        it('–¥–æ–ª–∂–Ω–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ mock —Ä–µ–∂–∏–º–µ', async () => {
            const result = await signIn({
                email: 'nonexistent@example.test',
                password: mockUserData.password
            })

            expect(result.success).toBe(false)
            expect(result.error).toBe('–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å (mock)')
        })

        it('–¥–æ–ª–∂–Ω–∞ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –≤ mock —Ä–µ–∂–∏–º–µ', async () => {
            await signIn({
                email: mockUserData.email,
                password: mockUserData.password
            })

            expect(mockConsoleLog).toHaveBeenCalledWith(
                'üß™ MOCK –†–ï–ñ–ò–ú: –í—Ö–æ–¥ –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Supabase'
            )
        })
    })

    describe('signOut', () => {
        beforeEach(async () => {
            // –°–æ–∑–¥–∞–µ–º –∏ –≤—Ö–æ–¥–∏–º –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            await signUp(mockUserData)
        })

        it('–¥–æ–ª–∂–Ω–∞ –≤—ã—Ö–æ–¥–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –≤ mock —Ä–µ–∂–∏–º–µ', async () => {
            const result = await signOut()

            expect(result.success).toBe(true)
            expect(result.message).toBe('Mock –≤—ã—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω')
        })

        it('–¥–æ–ª–∂–Ω–∞ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –≤ mock —Ä–µ–∂–∏–º–µ', async () => {
            await signOut()

            expect(mockConsoleLog).toHaveBeenCalledWith(
                'üß™ MOCK –†–ï–ñ–ò–ú: –í—ã—Ö–æ–¥ –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Supabase'
            )
        })
    })

    describe('getCurrentUser', () => {
        beforeEach(async () => {
            // –û—á–∏—â–∞–µ–º mock –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º
            await signOut()
        })

        it('–¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å null –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ mock —Ä–µ–∂–∏–º–µ', async () => {
            const result = await getCurrentUser()

            expect(result).toBeNull()
        })

        it('–¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ mock —Ä–µ–∂–∏–º–µ', async () => {
            await signUp(mockUserData)

            const result = await getCurrentUser()

            expect(result).toBeDefined()
            expect(result?.email).toBe(mockUserData.email)
        })
    })

    describe('getUserProfile', () => {
        beforeEach(async () => {
            await signUp(mockUserData)
        })

        it('–¥–æ–ª–∂–Ω–∞ –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ mock —Ä–µ–∂–∏–º–µ', async () => {
            const result = await getUserProfile(mockUserData.email)

            expect(result.success).toBe(true)
            expect(result.user).toBeDefined()
            expect(result.user?.email).toBe(mockUserData.email)
            expect(result.user?.name).toBe(mockUserData.name)
        })

        it('–¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –æ—à–∏–±–∫—É –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ mock —Ä–µ–∂–∏–º–µ', async () => {
            const result = await getUserProfile('nonexistent@example.test')

            expect(result.success).toBe(false)
            expect(result.error).toBe('–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
        })

        it('–¥–æ–ª–∂–Ω–∞ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –≤ mock —Ä–µ–∂–∏–º–µ', async () => {
            await getUserProfile(mockUserData.email)

            expect(mockConsoleLog).toHaveBeenCalledWith(
                'üß™ MOCK –†–ï–ñ–ò–ú: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Supabase'
            )
        })
    })

    describe('updateUserProfile', () => {
        beforeEach(async () => {
            await signUp(mockUserData)
        })

        it('–¥–æ–ª–∂–Ω–∞ –æ–±–Ω–æ–≤–ª—è—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ mock —Ä–µ–∂–∏–º–µ', async () => {
            const updates = {
                name: 'Updated Name',
                subscription: 'premium' as const
            }

            const result = await updateUserProfile(mockUserData.email, updates)

            expect(result.success).toBe(true)
            expect(result.user).toBeDefined()
            expect(result.user?.name).toBe(updates.name)
            expect(result.user?.subscription).toBe(updates.subscription)
        })

        it('–¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –æ—à–∏–±–∫—É –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ mock —Ä–µ–∂–∏–º–µ', async () => {
            const updates = { name: 'Updated Name' }
            const result = await updateUserProfile('nonexistent@example.test', updates)

            expect(result.success).toBe(false)
            expect(result.error).toBe('–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
        })

        it('–¥–æ–ª–∂–Ω–∞ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –≤ mock —Ä–µ–∂–∏–º–µ', async () => {
            const updates = { name: 'Updated Name' }
            await updateUserProfile(mockUserData.email, updates)

            expect(mockConsoleLog).toHaveBeenCalledWith(
                'üß™ MOCK –†–ï–ñ–ò–ú: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Supabase'
            )
        })
    })

    describe('resetPassword', () => {
        it('–¥–æ–ª–∂–Ω–∞ —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å –≤ mock —Ä–µ–∂–∏–º–µ', async () => {
            const result = await resetPassword(mockUserData.email)

            expect(result.success).toBe(true)
            expect(result.message).toBe('Mock –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Å–±—Ä–æ—Å—É –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã')
        })

        it('–¥–æ–ª–∂–Ω–∞ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –≤ mock —Ä–µ–∂–∏–º–µ', async () => {
            await resetPassword(mockUserData.email)

            expect(mockConsoleLog).toHaveBeenCalledWith(
                'üß™ MOCK –†–ï–ñ–ò–ú: –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Supabase'
            )
        })
    })

    describe('updatePassword', () => {
        beforeEach(async () => {
            await signUp(mockUserData)
        })

        it('–¥–æ–ª–∂–Ω–∞ –æ–±–Ω–æ–≤–ª—è—Ç—å –ø–∞—Ä–æ–ª—å –≤ mock —Ä–µ–∂–∏–º–µ', async () => {
            const result = await updatePassword('NewPassword123')

            expect(result.success).toBe(true)
            expect(result.message).toBe('Mock –ø–∞—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ')
        })

        it('–¥–æ–ª–∂–Ω–∞ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –≤ mock —Ä–µ–∂–∏–º–µ', async () => {
            await updatePassword('NewPassword123')

            expect(mockConsoleLog).toHaveBeenCalledWith(
                'üß™ MOCK –†–ï–ñ–ò–ú: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Supabase'
            )
        })
    })

    describe('confirmEmail', () => {
        it('–¥–æ–ª–∂–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å email –≤ mock —Ä–µ–∂–∏–º–µ', async () => {
            const result = await confirmEmail('test-token')

            expect(result.success).toBe(true)
            expect(result.message).toBe('Mock email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ')
        })

        it('–¥–æ–ª–∂–Ω–∞ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –≤ mock —Ä–µ–∂–∏–º–µ', async () => {
            await confirmEmail('test-token')

            expect(mockConsoleLog).toHaveBeenCalledWith(
                'üß™ MOCK –†–ï–ñ–ò–ú: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Supabase'
            )
        })
    })

    describe('OAuth –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã', () => {
        it('–¥–æ–ª–∂–Ω–∞ –≤—Ö–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ Google –≤ mock —Ä–µ–∂–∏–º–µ', async () => {
            const result = await signInWithGoogle()

            expect(result.success).toBe(true)
            expect(result.message).toBe('Mock –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ Google —É—Å–ø–µ—à–µ–Ω')
        })

        it('–¥–æ–ª–∂–Ω–∞ –≤—Ö–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ GitHub –≤ mock —Ä–µ–∂–∏–º–µ', async () => {
            const result = await signInWithGitHub()

            expect(result.success).toBe(true)
            expect(result.message).toBe('Mock –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ GitHub —É—Å–ø–µ—à–µ–Ω')
        })

        it('–¥–æ–ª–∂–Ω–∞ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å OAuth –¥–µ–π—Å—Ç–≤–∏—è –≤ mock —Ä–µ–∂–∏–º–µ', async () => {
            await signInWithGoogle()

            expect(mockConsoleLog).toHaveBeenCalledWith(
                'üß™ MOCK –†–ï–ñ–ò–ú: –í—Ö–æ–¥ —á–µ—Ä–µ–∑ Google –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Supabase'
            )

            await signInWithGitHub()

            expect(mockConsoleLog).toHaveBeenCalledWith(
                'üß™ MOCK –†–ï–ñ–ò–ú: –í—Ö–æ–¥ —á–µ—Ä–µ–∑ GitHub –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Supabase'
            )
        })
    })

    describe('–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö', () => {
        it('–¥–æ–ª–∂–Ω–∞ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', async () => {
            const invalidData = {
                email: 'invalid-email',
                password: '123', // –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –ø–∞—Ä–æ–ª—å
                name: ''
            }

            const result = await signUp(invalidData)

            expect(result.success).toBe(false)
            expect(result.error).toBeDefined()
        })

        it('–¥–æ–ª–∂–Ω–∞ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –≤—Ö–æ–¥–µ', async () => {
            const invalidData = {
                email: 'invalid-email',
                password: ''
            }

            const result = await signIn(invalidData)

            expect(result.success).toBe(false)
            expect(result.error).toBeDefined()
        })
    })

    describe('–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫', () => {
        it('–¥–æ–ª–∂–Ω–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏', async () => {
            const invalidData = {
                email: '',
                password: '',
                name: ''
            }

            const result = await signUp(invalidData)

            expect(result.success).toBe(false)
            expect(result.error).toBeDefined()
        })

        it('–¥–æ–ª–∂–Ω–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏', async () => {
            const result = await getUserProfile('nonexistent@example.test')

            expect(result.success).toBe(false)
            expect(result.error).toBe('–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
        })
    })
})
