import { testUtils } from '../framework'

/**
 * üß™ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å –ø–æ–º–æ—â—å—é –µ–¥–∏–Ω–æ–≥–æ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * 
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω: 2025-09-16T21:33:45.028Z
 * –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫: tests/unit/Button.test.tsx.backup
 * 
 * –í–ê–ñ–ù–û: –í—Å–µ –Ω–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–¥–∏–Ω—ã–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫!
 * –°–º. –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é: tests/docs/TESTING_FRAMEWORK.md
 */

import { Button } from '@/components/ui/Button'
import '@testing-library/jest-dom'
import { fireEvent, screen } from '@testing-library/react'

describe('Button Component', () => {
    test('—Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è —Å —Ç–µ–∫—Å—Ç–æ–º', () => {
        testUtils.renderWithProviders(<Button>–¢–µ—Å—Ç–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞</Button>)
        expect(screen.getByText('–¢–µ—Å—Ç–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞')).toBeTruthy()
    })

    test('–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–ª–∏–∫–∏', () => {
        const handleClick = jest.fn()
        testUtils.renderWithProviders(<Button onClick={handleClick}>–ö–ª–∏–∫–Ω–∏ –º–µ–Ω—è</Button>)

        fireEvent.click(screen.getByText('–ö–ª–∏–∫–Ω–∏ –º–µ–Ω—è'))
        expect(handleClick).toHaveBeenCalledTimes(1)
    })

    test('–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏', () => {
        testUtils.renderWithProviders(<Button isLoading>–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è</Button>)

        // –ö–Ω–æ–ø–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∞
        expect(screen.getByRole('button')).toBeDisabled()

        // –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏–Ω–Ω–µ—Ä
        expect(document.querySelector('.animate-spin')).toBeTruthy()
    })

    test('–ø—Ä–∏–º–µ–Ω—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å—Ç–∏–ª–µ–π', () => {
        const { rerender } = testUtils.renderWithProviders(<Button variant="primary">Primary</Button>)
        expect(screen.getByRole('button')).toHaveClass('bg-indigo-600')

        rerender(<Button variant="secondary">Secondary</Button>)
        expect(screen.getByRole('button')).toHaveClass('bg-gray-100')

        rerender(<Button variant="danger">Danger</Button>)
        expect(screen.getByRole('button')).toHaveClass('bg-red-600')
    })

    test('–ø—Ä–∏–º–µ–Ω—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã', () => {
        const { rerender } = testUtils.renderWithProviders(<Button size="sm">Small</Button>)
        expect(screen.getByRole('button')).toHaveClass('px-3', 'py-1.5')

        rerender(<Button size="md">Medium</Button>)
        expect(screen.getByRole('button')).toHaveClass('px-4', 'py-2')

        rerender(<Button size="lg">Large</Button>)
        expect(screen.getByRole('button')).toHaveClass('px-6', 'py-3')
    })

    test('–æ—Ç–∫–ª—é—á–∞–µ—Ç—Å—è –ø—Ä–∏ disabled', () => {
        testUtils.renderWithProviders(<Button disabled>–û—Ç–∫–ª—é—á–µ–Ω–∞</Button>)
        expect(screen.getByRole('button')).toBeDisabled()
    })

    test('–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–∫–æ–Ω–∫–∏', () => {
        const leftIcon = <span data-testid="left-icon">‚Üê</span>
        const rightIcon = <span data-testid="right-icon">‚Üí</span>

        testUtils.renderWithProviders(
            <Button leftIcon={leftIcon} rightIcon={rightIcon}>
                –° –∏–∫–æ–Ω–∫–∞–º–∏
            </Button>
        )

        expect(screen.getByTestId('left-icon')).toBeTruthy()
        expect(screen.getByTestId('right-icon')).toBeTruthy()
    })
})
