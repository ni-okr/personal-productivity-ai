/**
 * üß™ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å –ø–æ–º–æ—â—å—é –µ–¥–∏–Ω–æ–≥–æ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * 
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω: 2025-09-16T21:33:45.027Z
 * –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫: tests/unit/auth-components.test.tsx.backup
 * 
 * –í–ê–ñ–ù–û: –í—Å–µ –Ω–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–¥–∏–Ω—ã–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫!
 * –°–º. –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é: tests/docs/TESTING_FRAMEWORK.md
 */

import { AuthModal } from '@/components/auth/AuthModal'
import { LoginForm } from '@/components/auth/LoginForm'
import { RegisterForm } from '@/components/auth/RegisterForm'
import { ResetPasswordForm } from '@/components/auth/ResetPasswordForm'
import { beforeEach, describe, expect, it } from '@jest/globals'
import '@testing-library/jest-dom'
import { fireEvent, render, screen, waitFor } from '@testing-library/react'
import { TEST_CONFIGS, MOCK_CONFIGS } from '@/tests/framework'
import { testFramework, testLogger, testMocks, testUtils, TEST_CONFIGS, MOCK_CONFIGS } from '../framework'


// Mock auth functions
jest.mock('@/lib/auth', () => ({
    signIn: jest.fn(),
    signUp: jest.fn(),
    resetPassword: jest.fn(),
    signInWithGoogle: jest.fn(),
    signInWithGitHub: jest.fn()
}))

// Mock store
const mockSetUser = jest.fn()
jest.mock('@/stores/useAppStore', () => ({
    useAppStore: jest.fn(() => ({
        setUser: mockSetUser
    }))
}))

// Mock validation
jest.mock('@/utils/validation', () => ({
    validateEmail: jest.fn((email: string) => ({
        isValid: email.includes('@'),
        errors: email.includes('@') ? [] : ['–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email']
    }))
}))

describe('Auth Components', () => {
    beforeEach(() => {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –µ–¥–∏–Ω–æ–≥–æ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    testFramework.updateConfig(TEST_CONFIGS.UNIT)
    testMocks.updateConfig(MOCK_CONFIGS.MINIMAL)
    testMocks.setupAllMocks()
    testLogger.startTest('Test Suite')
        jest.clearAllMocks()
    })

    describe('LoginForm', () => {
        it('should render login form', () => {
            testUtils.renderWithProviders(<LoginForm />)

            expect(screen.getByText('–í—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç')).toBeTruthy()
            expect(screen.getByLabelText('Email')).toBeTruthy()
            expect(screen.getByLabelText('–ü–∞—Ä–æ–ª—å')).toBeTruthy()
            expect(screen.getByRole('button', { name: '–í–æ–π—Ç–∏' })).toBeTruthy()
        })

        it('should handle form submission', async () => {
            const { signIn } = await import('@/lib/auth')
            const mockSignIn = jest.mocked(signIn)
            mockSignIn.mockResolvedValue({
                success: true,
                user: {
                    id: '1',
                    email: 'test@example.com',
                    name: 'Test User',
                    avatar: undefined,
                    timezone: 'Europe/Moscow',
                    subscription: 'free',
                    subscriptionStatus: 'active',
                    preferences: {
                        workingHours: { start: '09:00', end: '18:00' },
                        focusTime: 25,
                        breakTime: 5,
                        notifications: { email: true, push: true, desktop: true },
                        aiCoaching: { enabled: true, frequency: 'medium', style: 'gentle' }
                    },
                    createdAt: new Date(),
                    updatedAt: new Date()
                }
            })

            testUtils.renderWithProviders(<LoginForm />)

            fireEvent.change(screen.getByLabelText('Email'), {
                target: { value: 'test@example.com' }
            })
            fireEvent.change(screen.getByLabelText('–ü–∞—Ä–æ–ª—å'), {
                target: { value: 'password123' }
            })

            fireEvent.click(screen.getByRole('button', { name: '–í–æ–π—Ç–∏' }))

            await testUtils.waitForState(() => {
                expect(mockSignIn).toHaveBeenCalledWith({ email: 'test@example.com', password: 'password123' })
            })
        })

        it('should show error on invalid credentials', async () => {
            const { signIn } = await import('@/lib/auth')
            const mockSignIn = jest.mocked(signIn)
            mockSignIn.mockResolvedValue({
                success: false,
                error: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å'
            })

            testUtils.renderWithProviders(<LoginForm />)

            fireEvent.change(screen.getByLabelText('Email'), {
                target: { value: 'test@example.com' }
            })
            fireEvent.change(screen.getByLabelText('–ü–∞—Ä–æ–ª—å'), {
                target: { value: 'wrongpassword' }
            })

            fireEvent.click(screen.getByRole('button', { name: '–í–æ–π—Ç–∏' }))

            await testUtils.waitForState(() => {
                expect(screen.getByText('–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å')).toBeTruthy()
            })
        })
    })

    describe('RegisterForm', () => {
        it('should render register form', () => {
            testUtils.renderWithProviders(<RegisterForm />)

            expect(screen.getByText('–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç')).toBeTruthy()
            expect(screen.getByLabelText('–ò–º—è')).toBeTruthy()
            expect(screen.getByLabelText('Email')).toBeTruthy()
            expect(screen.getByLabelText('–ü–∞—Ä–æ–ª—å')).toBeTruthy()
            expect(screen.getByLabelText('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å')).toBeTruthy()
            expect(screen.getByRole('button', { name: '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è' })).toBeTruthy()
        })

        it('should handle form submission', async () => {
            const { signUp } = await import('@/lib/auth')
            const mockSignUp = jest.mocked(signUp)
            mockSignUp.mockResolvedValue({
                success: true,
                user: {
                    id: '1',
                    email: 'test@example.com',
                    name: 'Test User',
                    avatar: undefined,
                    timezone: 'Europe/Moscow',
                    subscription: 'free',
                    subscriptionStatus: 'active',
                    preferences: {
                        workingHours: { start: '09:00', end: '18:00' },
                        focusTime: 25,
                        breakTime: 5,
                        notifications: { email: true, push: true, desktop: true },
                        aiCoaching: { enabled: true, frequency: 'medium', style: 'gentle' }
                    },
                    createdAt: new Date(),
                    updatedAt: new Date()
                }
            })

            testUtils.renderWithProviders(<RegisterForm />)

            fireEvent.change(screen.getByLabelText('–ò–º—è'), {
                target: { value: 'Test User' }
            })
            fireEvent.change(screen.getByLabelText('Email'), {
                target: { value: 'test@example.com' }
            })
            fireEvent.change(screen.getByLabelText('–ü–∞—Ä–æ–ª—å'), {
                target: { value: 'password123' }
            })
            fireEvent.change(screen.getByLabelText('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å'), {
                target: { value: 'password123' }
            })

            fireEvent.click(screen.getByRole('button', { name: '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è' }))

            await testUtils.waitForState(() => {
                expect(mockSignUp).toHaveBeenCalledWith({ email: 'test@example.com', password: 'password123', name: 'Test User' })
            })
        })

        it('should show error on password mismatch', async () => {
            testUtils.renderWithProviders(<RegisterForm />)

            // –ó–∞–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            fireEvent.change(screen.getByLabelText('–ò–º—è'), {
                target: { value: 'Test User' }
            })
            fireEvent.change(screen.getByLabelText('Email'), {
                target: { value: 'test@example.com' }
            })
            fireEvent.change(screen.getByLabelText('–ü–∞—Ä–æ–ª—å'), {
                target: { value: 'password123' }
            })
            fireEvent.change(screen.getByLabelText('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å'), {
                target: { value: 'differentpassword' }
            })

            fireEvent.click(screen.getByRole('button', { name: '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è' }))

            // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
            await new Promise(resolve => setTimeout(resolve, 100))

            expect(screen.getByText('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç')).toBeTruthy()
        })
    })

    describe('ResetPasswordForm', () => {
        it('should render reset password form', () => {
            testUtils.renderWithProviders(<ResetPasswordForm />)

            expect(screen.getByText('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è')).toBeTruthy()
            expect(screen.getByLabelText('Email')).toBeTruthy()
            expect(screen.getByRole('button', { name: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É' })).toBeTruthy()
        })

        it('should handle form submission', async () => {
            const { resetPassword } = await import('@/lib/auth')
            const mockResetPassword = jest.mocked(resetPassword)
            mockResetPassword.mockResolvedValue({
                success: true,
                message: '–°—Å—ã–ª–∫–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞'
            })

            testUtils.renderWithProviders(<ResetPasswordForm />)

            fireEvent.change(screen.getByLabelText('Email'), {
                target: { value: 'test@example.com' }
            })

            fireEvent.click(screen.getByRole('button', { name: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É' }))

            await testUtils.waitForState(() => {
                expect(mockResetPassword).toHaveBeenCalledWith('test@example.com')
            })
        })
    })

    describe('AuthModal', () => {
        it('should render auth modal', () => {
            testUtils.renderWithProviders(<AuthModal isOpen={true} onClose={jest.fn()} />)

            expect(screen.getByText('–í—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç')).toBeTruthy()
        })

        it('should close modal when close button is clicked', () => {
            const mockOnClose = jest.fn()
            testUtils.renderWithProviders(<AuthModal isOpen={true} onClose={mockOnClose} />)

            const closeButton = screen.getByRole('button', { name: /–∑–∞–∫—Ä—ã—Ç—å/i })
            fireEvent.click(closeButton)

            expect(mockOnClose).toHaveBeenCalled()
        })
    })
})
