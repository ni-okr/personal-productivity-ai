/**
 * üß™ –¢–µ—Å—Ç—ã —Å—Ç—Ä–∞–Ω–∏—Ü –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–¥ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –º–æ–¥–µ–ª—å
 * 
 * –°–ª–µ–¥—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º:
 * - –ï–¥–∏–Ω—ã–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * - Mock —Ä–µ–∂–∏–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
 * - –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
 * - –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ TEST_CONFIGS –∏ MOCK_CONFIGS
 */

import AuthCallbackPage from '@/app/auth/callback/page'
import ConfirmEmailPage from '@/app/auth/confirm-email/page'
import ResetPasswordPage from '@/app/auth/reset-password/page'
import { MOCK_CONFIGS, TEST_CONFIGS, testFramework, testLogger, testMocks, testUtils } from '@/tests/framework'
import { fireEvent, waitFor } from '@testing-library/react'

// –ú–æ–∫–∞–µ–º Next.js router
const mockPush = jest.fn()
const mockReplace = jest.fn()
jest.mock('next/navigation', () => ({
    useRouter: () => ({
        push: mockPush,
        replace: mockReplace,
        back: jest.fn(),
        forward: jest.fn(),
        refresh: jest.fn(),
    }),
    useSearchParams: () => new URLSearchParams(),
    usePathname: () => '/',
}))

// –ú–æ–∫–∞–µ–º auth —Ñ—É–Ω–∫—Ü–∏–∏
jest.mock('@/lib/auth')

describe('Auth Pages - Adapted Tests', () => {
    beforeEach(() => {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –µ–¥–∏–Ω–æ–≥–æ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        testFramework.updateConfig(TEST_CONFIGS.UNIT)
        testMocks.updateConfig(MOCK_CONFIGS.MINIMAL)
        testMocks.setupAllMocks()
        testLogger.startTest('Auth Pages')

        // –û—á–∏—â–∞–µ–º –º–æ–∫–∏
        mockPush.mockClear()
        mockReplace.mockClear()
    })

    afterEach(() => {
        testMocks.clearAllMocks()
        testLogger.endTest('Auth Pages', true)
    })

    describe('ConfirmEmailPage', () => {
        test('should render confirm email page correctly', async () => {
            testLogger.step('Rendering ConfirmEmailPage')

            const { getByText } = testUtils.renderWithProviders(<ConfirmEmailPage />)

            testLogger.assertion('Page elements rendered', true)
            expect(getByText('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email')).toBeInTheDocument()
        })

        test('should handle successful email confirmation', async () => {
            testLogger.step('Testing successful email confirmation')

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            testMocks.mockAuthSuccess()

            // –ú–æ–∫–∞–µ–º searchParams —Å —Ç–æ–∫–µ–Ω–æ–º
            jest.doMock('next/navigation', () => ({
                useSearchParams: () => new URLSearchParams('token_hash=test-token&type=signup'),
                useRouter: () => ({
                    push: mockPush,
                    replace: mockReplace,
                }),
            }))

            const { getByText } = testUtils.renderWithProviders(<ConfirmEmailPage />)

            await waitFor(() => {
                testLogger.assertion('Email confirmed successfully', true)
                expect(getByText('Email —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω')).toBeInTheDocument()
            })
        })

        test('should handle email confirmation error', async () => {
            testLogger.step('Testing email confirmation error')

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è –æ—à–∏–±–∫–∏
            testMocks.mockAuthError('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è')

            const { getByText } = testUtils.renderWithProviders(<ConfirmEmailPage />)

            await waitFor(() => {
                testLogger.assertion('Error message displayed', true)
                expect(getByText('–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email')).toBeInTheDocument()
            })
        })
    })

    describe('ResetPasswordPage', () => {
        test('should render reset password page correctly', async () => {
            testLogger.step('Rendering ResetPasswordPage')

            const { getByText } = testUtils.renderWithProviders(<ResetPasswordPage />)

            testLogger.assertion('Page elements rendered', true)
            expect(getByText('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å')).toBeInTheDocument()
        })

        test('should handle successful password reset', async () => {
            testLogger.step('Testing successful password reset')

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
            testMocks.mockAuthSuccess()

            const { getByLabelText, getByRole } = testUtils.renderWithProviders(<ResetPasswordPage />)

            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
            fireEvent.change(getByLabelText('–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å'), { target: { value: 'newpassword123' } })
            fireEvent.change(getByLabelText('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å'), { target: { value: 'newpassword123' } })

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É
            fireEvent.click(getByRole('button', { name: /–æ–±–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å/i }))

            await waitFor(() => {
                testLogger.assertion('Password reset successful', true)
                expect(getByText('–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!')).toBeInTheDocument()
            })
        })

        test('should handle password reset error', async () => {
            testLogger.step('Testing password reset error')

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è –æ—à–∏–±–∫–∏
            testMocks.mockAuthError('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è')

            const { getByLabelText, getByRole } = testUtils.renderWithProviders(<ResetPasswordPage />)

            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
            fireEvent.change(getByLabelText('–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å'), { target: { value: 'newpassword123' } })
            fireEvent.change(getByLabelText('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å'), { target: { value: 'newpassword123' } })

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É
            fireEvent.click(getByRole('button', { name: /–æ–±–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å/i }))

            await waitFor(() => {
                testLogger.assertion('Error message displayed', true)
                expect(getByText('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è')).toBeInTheDocument()
            })
        })
    })

    describe('AuthCallbackPage', () => {
        test('should render auth callback page correctly', async () => {
            testLogger.step('Rendering AuthCallbackPage')

            const { getByText } = testUtils.renderWithProviders(<AuthCallbackPage />)

            testLogger.assertion('Page elements rendered', true)
            expect(getByText('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')).toBeInTheDocument()
        })

        test('should handle successful OAuth callback', async () => {
            testLogger.step('Testing successful OAuth callback')

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ OAuth
            testMocks.mockAuthSuccess()

            // –ú–æ–∫–∞–µ–º searchParams —Å –∫–æ–¥–æ–º
            jest.doMock('next/navigation', () => ({
                useSearchParams: () => new URLSearchParams('code=test-code&state=test-state'),
                useRouter: () => ({
                    push: mockPush,
                    replace: mockReplace,
                }),
            }))

            const { getByText } = testUtils.renderWithProviders(<AuthCallbackPage />)

            await waitFor(() => {
                testLogger.assertion('OAuth callback successful', true)
                expect(getByText('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞')).toBeInTheDocument()
            })
        })

        test('should handle OAuth callback error', async () => {
            testLogger.step('Testing OAuth callback error')

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è –æ—à–∏–±–∫–∏
            testMocks.mockAuthError('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')

            const { getByText } = testUtils.renderWithProviders(<AuthCallbackPage />)

            await waitFor(() => {
                testLogger.assertion('Error message displayed', true)
                expect(getByText('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')).toBeInTheDocument()
            })
        })
    })
})
