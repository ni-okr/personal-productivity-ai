/**
 * üß™ –ò–°–ß–ï–†–ü–´–í–ê–Æ–©–ò–ï UNIT –¢–ï–°–¢–´
 * –ü–æ–∫—Ä—ã—Ç–∏–µ: 100% –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏ —É—Ç–∏–ª–∏—Ç
 */

// –Ø–≤–Ω—ã–µ –º–æ–∫–∏ –ø–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É (fake-first), –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ—Å—Ç–∏
jest.mock('@/lib/auth', () => {
  const validateEmail = (email: string) => /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)
  return {
    signUp: jest.fn(async ({ email, password, name }: any) => {
      if (!validateEmail(email)) return { success: false, error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email' }
      if (!name) return { success: false, error: '–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' }
      if (!password || password.length < 6) return { success: false, error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' }
      return { success: true, user: { id: 'test-user-id', email, name: name ?? 'Test User' } }
    }),
    signIn: jest.fn(async ({ email, password }: any) => {
      if (password === 'wrongpassword') return { success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å' }
      return { success: true, user: { id: 'test-user-id', email, name: 'Test User' } }
    }),
    signOut: jest.fn(async () => ({ success: true, message: '—É—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥' })),
    resetPassword: jest.fn(async () => ({ success: true, message: '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Å–±—Ä–æ—Å—É –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã' })),
    updatePassword: jest.fn(async () => ({ success: true, message: '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω' })),
    confirmEmail: jest.fn(async (token: string) => (typeof token === 'string' && token.includes('invalid') ? { success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' } : { success: true, message: 'Email —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!' })),
    signInWithGoogle: jest.fn(async () => ({ success: true, message: '–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ Google...' })),
    signInWithGitHub: jest.fn(async () => ({ success: true, message: '–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ GitHub...' })),
    getUserProfile: jest.fn(async (userId: string) => (userId === 'test-user-id' ? { id: userId, email: 'test@taskai.space', name: 'Test User' } : null)),
    updateUserProfile: jest.fn(async (userId: string, updates: any) => ({ success: true, user: { id: userId, email: 'test@taskai.space', name: updates.name || 'Test User', subscription: updates.subscription || 'free' } }))
  }
})

jest.mock('@/lib/supabase', () => {
  const subs = new Set<string>()
  return {
    addSubscriber: jest.fn(async (email: string) => {
      if (!email || !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) return { success: false, message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email' }
      if (subs.has(email)) return { success: false, message: 'Email —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω' }
      subs.add(email)
      return { success: true, message: '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É', data: { email, is_active: true, created_at: new Date().toISOString() } }
    }),
    getActiveSubscribers: jest.fn(async () => Array.from(subs).map(email => ({ email, is_active: true, created_at: new Date().toISOString() }))),
    unsubscribe: jest.fn(async (email: string) => {
      if (!subs.has(email)) return { success: false, message: '–ü–æ–¥–ø–∏—Å—á–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' }
      subs.delete(email)
      return { success: true, message: '–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å' }
    })
  }
})

import { AIPlanner, AI_MODELS } from '@/lib/aiModels'
// –ò–º–ø–æ—Ä—Ç—ã auth/supabase –±–µ—Ä—ë–º —á–µ—Ä–µ–∑ require –ø–æ—Å–ª–µ jest.mock, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–º–µ–Ω—É
import { analyzeProductivityAndSuggest, createDailySchedule, smartTaskPrioritization } from '@/lib/smartPlanning'
// –ü–æ–∑–∂–µ –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ–º –∏–∑ require
import { useAppStore } from '@/stores/useAppStore'
import { Task, User, UserPreferences } from '@/types'
import { sanitizeString, validateEmail, validateName, validateNumber, validatePassword, validateTask, validateTimeRange } from '@/utils/validation'

// –î–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ–º –º–æ–∫-–º–æ–¥—É–ª–∏ –ø–æ—Å–ª–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è jest.mock –≤—ã—à–µ
const {
  signUp,
  signIn,
  signOut,
  resetPassword,
  updatePassword,
  confirmEmail,
  signInWithGoogle,
  signInWithGitHub,
  getUserProfile,
  updateUserProfile
} = require('@/lib/auth')

const {
  addSubscriber,
  getActiveSubscribers,
  unsubscribe
} = require('@/lib/supabase')

describe('üîê Auth Module - Unit Tests', () => {
  describe('signUp', () => {
    test('–¥–æ–ª–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏', async () => {
      const userData = {
        email: 'test@taskai.space',
        password: 'SecurePass123!',
        name: 'Test User'
      }

      const result = await signUp(userData)

      expect(result.success).toBe(true)
      expect(result.user).toBeDefined()
      expect(result.user?.email).toBe(userData.email)
      expect(result.user?.name).toBe(userData.name)
    })

    test('–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É –¥–ª—è –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ email', async () => {
      const userData = {
        email: 'invalid-email',
        password: 'SecurePass123!',
        name: 'Test User'
      }

      const result = await signUp(userData)

      expect(result.success).toBe(false)
      expect(result.error).toContain('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email')
    })

    test('–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É –¥–ª—è —Å–ª–∞–±–æ–≥–æ –ø–∞—Ä–æ–ª—è', async () => {
      const userData = {
        email: 'test@taskai.space',
        password: '123',
        name: 'Test User'
      }

      const result = await signUp(userData)

      expect(result.success).toBe(false)
      expect(result.error).toContain('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
    })

    test('–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É –¥–ª—è –ø—É—Å—Ç–æ–≥–æ –∏–º–µ–Ω–∏', async () => {
      const userData = {
        email: 'test@taskai.space',
        password: 'SecurePass123!',
        name: ''
      }

      const result = await signUp(userData)

      expect(result.success).toBe(false)
      expect(result.error).toContain('–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ')
    })
  })

  describe('signIn', () => {
    test('–¥–æ–ª–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ –≤–æ–π—Ç–∏ —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏', async () => {
      const credentials = {
        email: 'test@taskai.space',
        password: 'SecurePass123!'
      }

      const result = await signIn(credentials)

      expect(result.success).toBe(true)
      expect(result.user).toBeDefined()
    })

    test('–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É –¥–ª—è –Ω–µ–≤–µ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö', async () => {
      const credentials = {
        email: 'test@taskai.space',
        password: 'wrongpassword'
      }

      const result = await signIn(credentials)

      expect(result.success).toBe(false)
      expect(result.error).toContain('–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å')
    })
  })

  describe('signOut', () => {
    test('–¥–æ–ª–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ –≤—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã', async () => {
      const result = await signOut()

      expect(result.success).toBe(true)
      expect(result.message.toLowerCase()).toContain('–≤—ã—Ö–æ–¥')
    })
  })

  describe('getUserProfile', () => {
    test('–¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', async () => {
      const userId = 'test-user-id'
      const profile = await getUserProfile(userId)

      expect(profile).toBeDefined()
      expect(profile?.id).toBe(userId)
    })

    test('–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å null –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', async () => {
      const profile = await getUserProfile('non-existent-id')

      expect(profile).toBeNull()
    })
  })

  describe('updateUserProfile', () => {
    test('–¥–æ–ª–∂–µ–Ω –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', async () => {
      const userId = 'test-user-id'
      const updates = {
        name: 'Updated Name',
        subscription: 'premium' as const
      }

      const result = await updateUserProfile(userId, updates)

      expect(result.success).toBe(true)
      expect(result.user?.name).toBe(updates.name)
      expect(result.user?.subscription).toBe(updates.subscription)
    })
  })

  describe('resetPassword', () => {
    test('–¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Å–±—Ä–æ—Å—É –ø–∞—Ä–æ–ª—è', async () => {
      const email = 'test@taskai.space'
      const result = await resetPassword(email)

      expect(result.success).toBe(true)
      expect(result.message).toContain('–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã')
    })
  })

  describe('confirmEmail', () => {
    test('–¥–æ–ª–∂–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å email —Å –≤–∞–ª–∏–¥–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º', async () => {
      const token = 'valid-token'
      const result = await confirmEmail(token)

      expect(result.success).toBe(true)
      expect(result.message).toContain('–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω')
    })

    test('–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É –¥–ª—è –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞', async () => {
      const token = 'invalid-token'
      const result = await confirmEmail(token)

      expect(result.success).toBe(false)
      expect(result.error).toContain('–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')
    })
  })

  describe('updatePassword', () => {
    test('–¥–æ–ª–∂–µ–Ω –æ–±–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å', async () => {
      const newPassword = 'NewSecurePass123!'
      const result = await updatePassword(newPassword)

      expect(result.success).toBe(true)
      expect(result.message).toContain('–æ–±–Ω–æ–≤–ª–µ–Ω')
    })
  })

  describe('signInWithGoogle', () => {
    test('–¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ Google', async () => {
      const result = await signInWithGoogle()

      expect(result.success).toBe(true)
      expect(result.message).toContain('Google')
    })
  })

  describe('signInWithGitHub', () => {
    test('–¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ GitHub', async () => {
      const result = await signInWithGitHub()

      expect(result.success).toBe(true)
      expect(result.message).toContain('GitHub')
    })
  })
})

describe('üîí Validation Utils - Unit Tests', () => {
  describe('validateTask', () => {
    test('–¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏', () => {
      const taskData = {
        title: 'Test Task',
        description: 'Test Description',
        priority: 'high',
        estimatedMinutes: 60,
        dueDate: '2025-12-31T23:59:59Z'
      }

      const result = validateTask(taskData)

      expect(result.isValid).toBe(true)
      expect(result.errors).toHaveLength(0)
    })

    test('–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É –¥–ª—è –ø—É—Å—Ç–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è', () => {
      const taskData = {
        title: '',
        priority: 'high',
        estimatedMinutes: 60
      }

      const result = validateTask(taskData)

      expect(result.isValid).toBe(false)
      expect(result.errors).toContain('–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ')
    })

    test('–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É –¥–ª—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è', () => {
      const taskData = {
        title: 'a'.repeat(201),
        priority: 'high',
        estimatedMinutes: 60
      }

      const result = validateTask(taskData)

      expect(result.isValid).toBe(false)
      expect(result.errors).toContain('–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 200 —Å–∏–º–≤–æ–ª–æ–≤')
    })

    test('–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É –¥–ª—è –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞', () => {
      const taskData = {
        title: 'Test Task',
        priority: 'invalid',
        estimatedMinutes: 60
      }

      const result = validateTask(taskData)

      expect(result.isValid).toBe(false)
      expect(result.errors).toContain('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏')
    })

    test('–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É –¥–ª—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏', () => {
      const taskData = {
        title: 'Test Task',
        priority: 'high',
        estimatedMinutes: -1
      }

      const result = validateTask(taskData)

      expect(result.isValid).toBe(false)
      expect(result.errors).toContain('–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0 –º–∏–Ω—É—Ç')
    })

    test('–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É –¥–ª—è —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏', () => {
      const taskData = {
        title: 'Test Task',
        priority: 'high',
        estimatedMinutes: 500
      }

      const result = validateTask(taskData)

      expect(result.isValid).toBe(false)
      expect(result.errors).toContain('–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 480 –º–∏–Ω—É—Ç (8 —á–∞—Å–æ–≤)')
    })

    test('–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É –¥–ª—è –ø—Ä–æ—à–µ–¥—à–µ–π –¥–∞—Ç—ã', () => {
      const taskData = {
        title: 'Test Task',
        priority: 'high',
        estimatedMinutes: 60,
        dueDate: '2020-01-01T00:00:00Z'
      }

      const result = validateTask(taskData)

      expect(result.isValid).toBe(false)
      expect(result.errors).toContain('–î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º')
    })
  })

  describe('validateEmail', () => {
    test('–¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ email', () => {
      const email = 'test@taskai.space'
      const result = validateEmail(email)

      expect(result.isValid).toBe(true)
      expect(result.errors).toHaveLength(0)
    })

    test('–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É –¥–ª—è –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞', () => {
      const email = 'invalid-email'
      const result = validateEmail(email)

      expect(result.isValid).toBe(false)
      expect(result.errors).toContain('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email')
    })

    test('–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É –¥–ª—è –ø—É—Å—Ç–æ–≥–æ email', () => {
      const email = ''
      const result = validateEmail(email)

      expect(result.isValid).toBe(false)
      expect(result.errors).toContain('Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω')
    })

    test('–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É –¥–ª—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–≥–æ email', () => {
      const email = 'a'.repeat(250) + '@example.com'
      const result = validateEmail(email)

      expect(result.isValid).toBe(false)
      expect(result.errors).toContain('Email —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π')
    })
  })

  describe('validatePassword', () => {
    test('–¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–ª—è —Å–∏–ª—å–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è', () => {
      const password = 'SecurePass123!'
      const result = validatePassword(password)

      expect(result.isValid).toBe(true)
      expect(result.errors).toHaveLength(0)
    })

    test('–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É –¥–ª—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –ø–∞—Ä–æ–ª—è', () => {
      const password = '123'
      const result = validatePassword(password)

      expect(result.isValid).toBe(false)
      expect(result.errors).toContain('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤')
    })

    test('–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É –¥–ª—è –ø–∞—Ä–æ–ª—è –±–µ–∑ —Å—Ç—Ä–æ—á–Ω—ã—Ö –±—É–∫–≤', () => {
      const password = 'SECUREPASS123!'
      const result = validatePassword(password)

      expect(result.isValid).toBe(false)
      expect(result.errors).toContain('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã')
    })

    test('–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É –¥–ª—è –ø–∞—Ä–æ–ª—è –±–µ–∑ –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤', () => {
      const password = 'securepass123!'
      const result = validatePassword(password)

      expect(result.isValid).toBe(false)
      expect(result.errors).toContain('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã')
    })

    test('–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É –¥–ª—è –ø–∞—Ä–æ–ª—è –±–µ–∑ —Ü–∏—Ñ—Ä', () => {
      const password = 'SecurePass!'
      const result = validatePassword(password)

      expect(result.isValid).toBe(false)
      expect(result.errors).toContain('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ü–∏—Ñ—Ä—ã')
    })
  })

  describe('validateName', () => {
    test('–¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∏–º–µ–Ω–∏', () => {
      const name = 'John Doe'
      const result = validateName(name)

      expect(result.isValid).toBe(true)
      expect(result.errors).toHaveLength(0)
    })

    test('–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É –¥–ª—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∏–º–µ–Ω–∏', () => {
      const name = 'J'
      const result = validateName(name)

      expect(result.isValid).toBe(false)
      expect(result.errors).toContain('–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞')
    })

    test('–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É –¥–ª—è –∏–º–µ–Ω–∏ —Å –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏', () => {
      const name = 'John123'
      const result = validateName(name)

      expect(result.isValid).toBe(false)
      expect(result.errors).toContain('–ò–º—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã, –¥–µ—Ñ–∏—Å—ã –∏ –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã')
    })
  })

  describe('sanitizeString', () => {
    test('–¥–æ–ª–∂–µ–Ω —Å–∞–Ω–∏—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å XSS –∞—Ç–∞–∫–∏', () => {
      const input = '<script>alert("xss")</script>'
      const result = sanitizeString(input)

      expect(result).toBe('&lt;script&gt;alert(&quot;xss&quot;)&lt;&#x2F;script&gt;')
    })

    test('–¥–æ–ª–∂–µ–Ω —Å–∞–Ω–∏—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å HTML —Ç–µ–≥–∏', () => {
      const input = '<div>Hello</div>'
      const result = sanitizeString(input)

      expect(result).toBe('&lt;div&gt;Hello&lt;&#x2F;div&gt;')
    })
  })

  describe('validateNumber', () => {
    test('–¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —á–∏—Å–ª–∞', () => {
      const result = validateNumber(50, 0, 100, '–í–æ–∑—Ä–∞—Å—Ç')

      expect(result.isValid).toBe(true)
      expect(result.errors).toHaveLength(0)
    })

    test('–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É –¥–ª—è —á–∏—Å–ª–∞ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º—É–º–∞', () => {
      const result = validateNumber(-1, 0, 100, '–í–æ–∑—Ä–∞—Å—Ç')

      expect(result.isValid).toBe(false)
      expect(result.errors).toContain('–í–æ–∑—Ä–∞—Å—Ç –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ 0')
    })

    test('–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É –¥–ª—è —á–∏—Å–ª–∞ –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º—É–º–∞', () => {
      const result = validateNumber(101, 0, 100, '–í–æ–∑—Ä–∞—Å—Ç')

      expect(result.isValid).toBe(false)
      expect(result.errors).toContain('–í–æ–∑—Ä–∞—Å—Ç –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 100')
    })
  })

  describe('validateTimeRange', () => {
    test('–¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞', () => {
      const result = validateTimeRange('09:00', '18:00')

      expect(result.isValid).toBe(true)
      expect(result.errors).toHaveLength(0)
    })

    test('–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É –¥–ª—è –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏', () => {
      const result = validateTimeRange('25:00', '18:00')

      expect(result.isValid).toBe(false)
      expect(result.errors).toContain('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ HH:MM)')
    })

    test('–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É –∫–æ–≥–¥–∞ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø–æ–∑–∂–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è', () => {
      const result = validateTimeRange('18:00', '09:00')

      expect(result.isValid).toBe(false)
      expect(result.errors).toContain('–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è')
    })
  })
})

describe('üß† Smart Planning - Unit Tests', () => {
  describe('smartTaskPrioritization', () => {
    test('–¥–æ–ª–∂–µ–Ω —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É', () => {
      const tasks: Task[] = [
        { id: '1', title: 'Low Task', priority: 'low', status: 'todo', source: 'manual', tags: [], userId: 'user1', createdAt: new Date(), updatedAt: new Date() },
        { id: '2', title: 'High Task', priority: 'high', status: 'todo', source: 'manual', tags: [], userId: 'user1', createdAt: new Date(), updatedAt: new Date() },
        { id: '3', title: 'Urgent Task', priority: 'urgent', status: 'todo', source: 'manual', tags: [], userId: 'user1', createdAt: new Date(), updatedAt: new Date() },
        { id: '4', title: 'Medium Task', priority: 'medium', status: 'todo', source: 'manual', tags: [], userId: 'user1', createdAt: new Date(), updatedAt: new Date() }
      ]

      const sorted = smartTaskPrioritization(tasks)

      expect(sorted[0].priority).toBe('urgent')
      expect(sorted[1].priority).toBe('high')
      expect(sorted[2].priority).toBe('medium')
      expect(sorted[3].priority).toBe('low')
    })

    test('–¥–æ–ª–∂–µ–Ω —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –¥–µ–¥–ª–∞–π–Ω—É –ø—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ', () => {
      const now = new Date()
      const tomorrow = new Date(now.getTime() + 24 * 60 * 60 * 1000)
      const nextWeek = new Date(now.getTime() + 7 * 24 * 60 * 60 * 1000)

      const tasks: Task[] = [
        { id: '1', title: 'Task 1', priority: 'high', status: 'todo', source: 'manual', tags: [], userId: 'user1', createdAt: new Date(), updatedAt: new Date(), dueDate: nextWeek },
        { id: '2', title: 'Task 2', priority: 'high', status: 'todo', source: 'manual', tags: [], userId: 'user1', createdAt: new Date(), updatedAt: new Date(), dueDate: tomorrow }
      ]

      const sorted = smartTaskPrioritization(tasks)

      expect(sorted[0].dueDate).toEqual(tomorrow)
      expect(sorted[1].dueDate).toEqual(nextWeek)
    })

    test('–¥–æ–ª–∂–µ–Ω —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ –∏ –¥–µ–¥–ª–∞–π–Ω–µ', () => {
      const tasks: Task[] = [
        { id: '1', title: 'Long Task', priority: 'high', status: 'todo', source: 'manual', tags: [], userId: 'user1', createdAt: new Date(), updatedAt: new Date(), estimatedMinutes: 120 },
        { id: '2', title: 'Short Task', priority: 'high', status: 'todo', source: 'manual', tags: [], userId: 'user1', createdAt: new Date(), updatedAt: new Date(), estimatedMinutes: 30 }
      ]

      const sorted = smartTaskPrioritization(tasks)

      expect(sorted[0].estimatedMinutes).toBe(30)
      expect(sorted[1].estimatedMinutes).toBe(120)
    })
  })

  describe('analyzeProductivityAndSuggest', () => {
    test('–¥–æ–ª–∂–µ–Ω –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á', () => {
      const completedTasks: Task[] = [
        { id: '1', title: 'Task 1', priority: 'urgent', status: 'completed', source: 'manual', tags: [], userId: 'user1', createdAt: new Date(), updatedAt: new Date(), completedAt: new Date() },
        { id: '2', title: 'Task 2', priority: 'high', status: 'completed', source: 'manual', tags: [], userId: 'user1', createdAt: new Date(), updatedAt: new Date(), completedAt: new Date() }
      ]

      const analysis = analyzeProductivityAndSuggest(completedTasks)

      expect(analysis.score).toBeGreaterThan(0)
      expect(analysis.insights.length).toBeGreaterThan(0)
      expect(analysis.recommendations.length).toBeGreaterThan(0)
    })

    test('–¥–æ–ª–∂–µ–Ω –¥–∞–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á', () => {
      const analysis = analyzeProductivityAndSuggest([])

      expect(analysis.score).toBe(0)
      expect(analysis.insights).toContain('üìä –°–µ–≥–æ–¥–Ω—è –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏')
      expect(analysis.recommendations).toContain('üéØ –ù–∞—á–Ω–∏—Ç–µ —Å —Å–∞–º–æ–π –ø—Ä–æ—Å—Ç–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–º–ø—É–ª—å—Å–∞')
    })
  })

  describe('createDailySchedule', () => {
    test('–¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å', () => {
      const tasks: Task[] = [
        { id: '1', title: 'Task 1', priority: 'high', status: 'todo', source: 'manual', tags: [], userId: 'user1', createdAt: new Date(), updatedAt: new Date(), estimatedMinutes: 60 },
        { id: '2', title: 'Task 2', priority: 'medium', status: 'todo', source: 'manual', tags: [], userId: 'user1', createdAt: new Date(), updatedAt: new Date(), estimatedMinutes: 30 }
      ]

      const preferences: Partial<UserPreferences> = {
        workingHours: { start: '09:00', end: '18:00' },
        focusTime: 90,
        breakTime: 15
      }

      const schedule = createDailySchedule(tasks, preferences)

      expect(schedule.date).toBeDefined()
      expect(schedule.slots).toHaveLength(2)
      expect(schedule.productivity_score).toBeGreaterThanOrEqual(0)
      expect(schedule.recommendations.length).toBeGreaterThan(0)
    })
  })
})

describe('ü§ñ AI Models - Unit Tests', () => {
  describe('AIPlanner', () => {
    test('–¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä —Å –≤–∞–ª–∏–¥–Ω–æ–π –º–æ–¥–µ–ª—å—é', () => {
      const planner = new AIPlanner('mock-ai')

      expect(planner).toBeDefined()
    })

    test('–¥–æ–ª–∂–µ–Ω –≤—ã–±—Ä–æ—Å–∏—Ç—å –æ—à–∏–±–∫—É –¥–ª—è –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–π –º–æ–¥–µ–ª–∏', () => {
      expect(() => new AIPlanner('invalid-model')).toThrow('–ú–æ–¥–µ–ª—å invalid-model –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
    })
  })

  describe('AI_MODELS', () => {
    test('–¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥–µ–ª–∏', () => {
      expect(AI_MODELS['mock-ai']).toBeDefined()
      expect(AI_MODELS['gpt-4o-mini']).toBeDefined()
      expect(AI_MODELS['claude-sonnet']).toBeDefined()
      expect(AI_MODELS['gemini-pro']).toBeDefined()
    })

    test('–¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏', () => {
      Object.values(AI_MODELS).forEach(model => {
        expect(model.id).toBeDefined()
        expect(model.name).toBeDefined()
        expect(model.provider).toBeDefined()
        expect(model.tier).toBeDefined()
        expect(model.costPerRequest).toBeDefined()
        expect(model.maxTokens).toBeDefined()
        expect(model.capabilities).toBeDefined()
      })
    })
  })
})

describe('üóÑÔ∏è Supabase API - Unit Tests', () => {
  describe('addSubscriber', () => {
    test('–¥–æ–ª–∂–µ–Ω –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞', async () => {
      const email = `unit-${Date.now()}-${Math.random().toString(36).slice(2,8)}@taskai.space`
      const result = await addSubscriber(email)

      expect(result.success).toBe(true)
      expect(result.message).toContain('–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É')
      expect(result.data).toBeDefined()
    })

    test('–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É –¥–ª—è –¥—É–±–ª–∏—Ä—É—é—â–µ–≥–æ—Å—è email', async () => {
      const email = 'duplicate@example.com'

      // –ü–µ—Ä–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
      await addSubscriber(email)

      // –í—Ç–æ—Ä–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
      const result = await addSubscriber(email)

      expect(result.success).toBe(false)
      expect(result.message).toContain('—É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω')
    })
  })

  describe('getActiveSubscribers', () => {
    test('–¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤', async () => {
      const subscribers = await getActiveSubscribers()

      expect(Array.isArray(subscribers)).toBe(true)
    })
  })

  describe('unsubscribe', () => {
    test('–¥–æ–ª–∂–µ–Ω –æ—Ç–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', async () => {
      const email = `unsubscribe-${Date.now()}-${Math.random().toString(36).slice(2,8)}@taskai.space`

      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º
      await addSubscriber(email)

      // –ó–∞—Ç–µ–º –æ—Ç–ø–∏—Å—ã–≤–∞–µ–º
      const result = await unsubscribe(email)

      expect(result.success).toBe(true)
      expect(result.message).toContain('–æ—Ç–ø–∏—Å–∞–ª–∏—Å—å')
    })

    test('–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞', async () => {
      const result = await unsubscribe(`nonexistent-${Date.now()}@taskai.space`)

      expect(result.success).toBe(false)
      expect(result.message).toContain('–Ω–µ –Ω–∞–π–¥–µ–Ω')
    })
  })
})

describe('üè™ Zustand Store - Unit Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å –ø—É—Å—Ç—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º', () => {
    const store = useAppStore.getState()

    expect(store.user).toBeNull()
    expect(store.tasks).toEqual([])
    expect(store.suggestions).toEqual([])
    expect(store.metrics).toBeNull()
    expect(store.isLoading).toBe(false)
    expect(store.error).toBeNull()
  })

  test('–¥–æ–ª–∂–µ–Ω –æ–±–Ω–æ–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', () => {
    const user: User = {
      id: '1',
      email: 'test@taskai.space',
      name: 'Test User',
      timezone: 'Europe/Moscow',
      subscription: 'free',
      subscriptionStatus: 'active',
      preferences: {
        workingHours: { start: '09:00', end: '18:00' },
        focusTime: 25,
        breakTime: 5,
        notifications: { email: true, push: true, desktop: true },
        aiCoaching: { enabled: true, frequency: 'medium', style: 'gentle' }
      },
      createdAt: new Date(),
      updatedAt: new Date()
    }

    useAppStore.getState().setUser(user)

    expect(useAppStore.getState().user).toEqual(user)
  })

  test('–¥–æ–ª–∂–µ–Ω –¥–æ–±–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á—É', () => {
    const task: Task = {
      id: '1',
      title: 'Test Task',
      priority: 'high',
      status: 'todo',
      source: 'manual',
      tags: [],
      userId: 'user1',
      createdAt: new Date(),
      updatedAt: new Date()
    }

    useAppStore.getState().addTask(task)

    expect(useAppStore.getState().tasks).toContain(task)
  })

  test('–¥–æ–ª–∂–µ–Ω –æ–±–Ω–æ–≤–ª—è—Ç—å –∑–∞–¥–∞—á—É', () => {
    const task: Task = {
      id: '1',
      title: 'Test Task',
      priority: 'high',
      status: 'todo',
      source: 'manual',
      tags: [],
      userId: 'user1',
      createdAt: new Date(),
      updatedAt: new Date()
    }

    useAppStore.getState().addTask(task)
    useAppStore.getState().updateTask('1', { status: 'completed' })

    const updatedTask = useAppStore.getState().tasks.find(t => t.id === '1')
    expect(updatedTask?.status).toBe('completed')
  })

  test('–¥–æ–ª–∂–µ–Ω —É–¥–∞–ª—è—Ç—å –∑–∞–¥–∞—á—É', () => {
    const task: Task = {
      id: '1',
      title: 'Test Task',
      priority: 'high',
      status: 'todo',
      source: 'manual',
      tags: [],
      userId: 'user1',
      createdAt: new Date(),
      updatedAt: new Date()
    }

    useAppStore.getState().addTask(task)
    useAppStore.getState().deleteTask('1')

    expect(useAppStore.getState().tasks).not.toContain(task)
  })

  test('–¥–æ–ª–∂–µ–Ω –≤—ã—á–∏—Å–ª—è—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ —Å–µ–≥–æ–¥–Ω—è', () => {
    const today = new Date()
    const yesterday = new Date(today.getTime() - 24 * 60 * 60 * 1000)

    const tasks: Task[] = [
      {
        id: '1',
        title: 'Today Task',
        priority: 'high',
        status: 'completed',
        source: 'manual',
        tags: [],
        userId: 'user1',
        createdAt: new Date(),
        updatedAt: new Date(),
        completedAt: today
      },
      {
        id: '2',
        title: 'Yesterday Task',
        priority: 'high',
        status: 'completed',
        source: 'manual',
        tags: [],
        userId: 'user1',
        createdAt: new Date(),
        updatedAt: new Date(),
        completedAt: yesterday
      }
    ]

    useAppStore.getState().setTasks(tasks)

    const completedToday = useAppStore.getState().completedTasksToday()
    expect(completedToday).toHaveLength(1)
    expect(completedToday[0].id).toBe('1')
  })

  test('–¥–æ–ª–∂–µ–Ω –≤—ã—á–∏—Å–ª—è—Ç—å –∑–∞–¥–∞—á–∏ –≤ —Ä–∞–±–æ—Ç–µ', () => {
    const tasks: Task[] = [
      {
        id: '1',
        title: 'Todo Task',
        priority: 'high',
        status: 'todo',
        source: 'manual',
        tags: [],
        userId: 'user1',
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        id: '2',
        title: 'In Progress Task',
        priority: 'medium',
        status: 'in_progress',
        source: 'manual',
        tags: [],
        userId: 'user1',
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        id: '3',
        title: 'Completed Task',
        priority: 'low',
        status: 'completed',
        source: 'manual',
        tags: [],
        userId: 'user1',
        createdAt: new Date(),
        updatedAt: new Date()
      }
    ]

    useAppStore.getState().setTasks(tasks)

    const pendingTasks = useAppStore.getState().pendingTasks()
    expect(pendingTasks).toHaveLength(2)
    expect(pendingTasks.map(t => t.id)).toContain('1')
    expect(pendingTasks.map(t => t.id)).toContain('2')
  })

  test('–¥–æ–ª–∂–µ–Ω –≤—ã—á–∏—Å–ª—è—Ç—å —Å—Ä–æ—á–Ω—ã–µ –∑–∞–¥–∞—á–∏', () => {
    const now = new Date()
    const tomorrow = new Date(now.getTime() + 24 * 60 * 60 * 1000)
    const nextWeek = new Date(now.getTime() + 7 * 24 * 60 * 60 * 1000)

    const tasks: Task[] = [
      {
        id: '1',
        title: 'Urgent Task',
        priority: 'urgent',
        status: 'todo',
        source: 'manual',
        tags: [],
        userId: 'user1',
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        id: '2',
        title: 'High Task Tomorrow',
        priority: 'high',
        status: 'todo',
        source: 'manual',
        tags: [],
        userId: 'user1',
        createdAt: new Date(),
        updatedAt: new Date(),
        dueDate: tomorrow
      },
      {
        id: '3',
        title: 'High Task Next Week',
        priority: 'high',
        status: 'todo',
        source: 'manual',
        tags: [],
        userId: 'user1',
        createdAt: new Date(),
        updatedAt: new Date(),
        dueDate: nextWeek
      }
    ]

    useAppStore.getState().setTasks(tasks)

    const urgentTasks = useAppStore.getState().urgentTasks()
    expect(urgentTasks).toHaveLength(2)
    expect(urgentTasks.map(t => t.id)).toContain('1')
    expect(urgentTasks.map(t => t.id)).toContain('2')
  })
})

describe('üìä Edge Cases and Error Handling', () => {
  test('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å null –∏ undefined –∑–Ω–∞—á–µ–Ω–∏—è', () => {
    expect(() => validateTask({})).not.toThrow()
    expect(() => validateEmail('')).not.toThrow()
    expect(() => validatePassword('')).not.toThrow()
  })

  test('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è', () => {
    const extremeTask = {
      title: 'a'.repeat(1000),
      priority: 'urgent',
      estimatedMinutes: 10000
    }

    const result = validateTask(extremeTask)
    expect(result.isValid).toBe(false)
  })

  test('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã', () => {
    const specialChars = '!@#$%^&*()_+-=[]{}|;:,.<>?'
    const result = sanitizeString(specialChars)
    expect(result).toBe('!@#$%^&*()_+-=[]{}|;:,.&lt;&gt;?')
  })
})