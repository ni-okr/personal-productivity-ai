/**
 * üß™ –¢–µ—Å—Ç—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–¥ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –º–æ–¥–µ–ª—å
 * 
 * –°–ª–µ–¥—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º:
 * - –ï–¥–∏–Ω—ã–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * - Mock —Ä–µ–∂–∏–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
 * - –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
 * - –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ TEST_CONFIGS –∏ MOCK_CONFIGS
 */

import { AuthModal } from '@/components/auth/AuthModal'
import { LoginForm } from '@/components/auth/LoginForm'
import { RegisterForm } from '@/components/auth/RegisterForm'
import { ResetPasswordForm } from '@/components/auth/ResetPasswordForm'
import { UpdatePasswordForm } from '@/components/auth/UpdatePasswordForm'
import { MOCK_CONFIGS, TEST_CONFIGS, testFramework, testLogger, testMocks, testUtils } from '@/tests/framework'
import { fireEvent, screen, waitFor } from '@testing-library/react'

// –ú–æ–∫–∞–µ–º auth —Ñ—É–Ω–∫—Ü–∏–∏
jest.mock('@/lib/auth')

describe('Auth Components - Adapted Tests', () => {
    beforeEach(() => {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –µ–¥–∏–Ω–æ–≥–æ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        testFramework.updateConfig(TEST_CONFIGS.UNIT)
        testMocks.updateConfig(MOCK_CONFIGS.MINIMAL)
        testMocks.setupAllMocks()
        testLogger.startTest('Auth Components')
    })

    afterEach(() => {
        testMocks.clearAllMocks()
        testLogger.endTest('Auth Components', true)
    })

    describe('LoginForm', () => {
        test('should render login form correctly', async () => {
            testLogger.step('Rendering LoginForm')

            const { getByText, getByLabelText } = testUtils.renderWithProviders(
                <LoginForm onSuccess={() => { }} onSwitchToRegister={() => { }} onSwitchToReset={() => { }} />
            )

            testLogger.assertion('Form elements rendered', true)
            expect(getByText('–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É')).toBeInTheDocument()
            expect(getByLabelText('Email')).toBeInTheDocument()
            expect(getByLabelText('–ü–∞—Ä–æ–ª—å')).toBeInTheDocument()
        })

        test('should handle form submission', async () => {
            testLogger.step('Testing form submission')

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
            testMocks.mockAuthSuccess()

            const mockOnSuccess = jest.fn()
            const { getByLabelText, getByRole } = testUtils.renderWithProviders(
                <LoginForm onSuccess={mockOnSuccess} onSwitchToRegister={() => { }} onSwitchToReset={() => { }} />
            )

            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
            fireEvent.change(getByLabelText('Email'), { target: { value: 'test@example.com' } })
            fireEvent.change(getByLabelText('–ü–∞—Ä–æ–ª—å'), { target: { value: 'password123' } })

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É
            fireEvent.click(getByRole('button', { name: /–≤–æ–π—Ç–∏/i }))

            await waitFor(() => {
                testLogger.assertion('Form submitted successfully', true)
                expect(mockOnSuccess).toHaveBeenCalled()
            })
        })

        test('should show error on invalid credentials', async () => {
            testLogger.step('Testing error handling')

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è –æ—à–∏–±–∫–∏
            testMocks.mockAuthError('–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å')

            const { getByLabelText, getByRole } = testUtils.renderWithProviders(
                <LoginForm onSuccess={() => { }} onSwitchToRegister={() => { }} onSwitchToReset={() => { }} />
            )

            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
            fireEvent.change(getByLabelText('Email'), { target: { value: 'wrong@example.com' } })
            fireEvent.change(getByLabelText('–ü–∞—Ä–æ–ª—å'), { target: { value: 'wrongpassword' } })

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É
            fireEvent.click(getByRole('button', { name: /–≤–æ–π—Ç–∏/i }))

            await waitFor(() => {
                testLogger.assertion('Error message displayed', true)
                expect(screen.getByText('–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å')).toBeInTheDocument()
            })
        })
    })

    describe('RegisterForm', () => {
        test('should render register form correctly', async () => {
            testLogger.step('Rendering RegisterForm')

            const { getByText, getByLabelText } = testUtils.renderWithProviders(
                <RegisterForm onSuccess={() => { }} onSwitchToLogin={() => { }} />
            )

            testLogger.assertion('Form elements rendered', true)
            expect(getByText('–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç')).toBeInTheDocument()
            expect(getByLabelText('–ò–º—è')).toBeInTheDocument()
            expect(getByLabelText('Email')).toBeInTheDocument()
            expect(getByLabelText('–ü–∞—Ä–æ–ª—å')).toBeInTheDocument()
            expect(getByLabelText('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å')).toBeInTheDocument()
        })

        test('should handle form submission', async () => {
            testLogger.step('Testing registration submission')

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            testMocks.mockAuthSuccess()

            const mockOnSuccess = jest.fn()
            const { getByLabelText, getByRole } = testUtils.renderWithProviders(
                <RegisterForm onSuccess={mockOnSuccess} onSwitchToLogin={() => { }} />
            )

            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
            fireEvent.change(getByLabelText('–ò–º—è'), { target: { value: 'Test User' } })
            fireEvent.change(getByLabelText('Email'), { target: { value: 'test@example.com' } })
            fireEvent.change(getByLabelText('–ü–∞—Ä–æ–ª—å'), { target: { value: 'password123' } })
            fireEvent.change(getByLabelText('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å'), { target: { value: 'password123' } })

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É
            fireEvent.click(getByRole('button', { name: /–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è/i }))

            await waitFor(() => {
                testLogger.assertion('Registration successful', true)
                expect(mockOnSuccess).toHaveBeenCalled()
            })
        })

        test('should show error on password mismatch', async () => {
            testLogger.step('Testing password validation')

            const { getByLabelText, getByRole } = testUtils.renderWithProviders(
                <RegisterForm onSuccess={() => { }} onSwitchToLogin={() => { }} />
            )

            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–∞—Ä–æ–ª—è–º–∏
            fireEvent.change(getByLabelText('–ò–º—è'), { target: { value: 'Test User' } })
            fireEvent.change(getByLabelText('Email'), { target: { value: 'test@example.com' } })
            fireEvent.change(getByLabelText('–ü–∞—Ä–æ–ª—å'), { target: { value: 'password123' } })
            fireEvent.change(getByLabelText('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å'), { target: { value: 'differentpassword' } })

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É
            fireEvent.click(getByRole('button', { name: /–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è/i }))

            await waitFor(() => {
                testLogger.assertion('Password mismatch error displayed', true)
                expect(screen.getByText('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç')).toBeInTheDocument()
            })
        })
    })

    describe('ResetPasswordForm', () => {
        test('should render reset password form correctly', async () => {
            testLogger.step('Rendering ResetPasswordForm')

            const { getByText, getByLabelText } = testUtils.renderWithProviders(
                <ResetPasswordForm onSuccess={() => { }} onSwitchToLogin={() => { }} />
            )

            testLogger.assertion('Form elements rendered', true)
            expect(getByText('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å')).toBeInTheDocument()
            expect(getByLabelText('Email')).toBeInTheDocument()
        })

        test('should handle form submission', async () => {
            testLogger.step('Testing password reset submission')

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
            testMocks.mockAuthSuccess()

            const mockOnSuccess = jest.fn()
            const { getByLabelText, getByRole } = testUtils.renderWithProviders(
                <ResetPasswordForm onSuccess={mockOnSuccess} onSwitchToLogin={() => { }} />
            )

            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
            fireEvent.change(getByLabelText('Email'), { target: { value: 'test@example.com' } })

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É
            fireEvent.click(getByRole('button', { name: /–æ—Ç–ø—Ä–∞–≤–∏—Ç—å/i }))

            await waitFor(() => {
                testLogger.assertion('Password reset successful', true)
                expect(mockOnSuccess).toHaveBeenCalled()
            })
        })
    })

    describe('UpdatePasswordForm', () => {
        test('should render update password form correctly', async () => {
            testLogger.step('Rendering UpdatePasswordForm')

            const { getByText, getByLabelText } = testUtils.renderWithProviders(
                <UpdatePasswordForm onSuccess={() => { }} onCancel={() => { }} />
            )

            testLogger.assertion('Form elements rendered', true)
            expect(getByText('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å')).toBeInTheDocument()
            expect(getByLabelText('–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å')).toBeInTheDocument()
            expect(getByLabelText('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å')).toBeInTheDocument()
        })

        test('should handle form submission', async () => {
            testLogger.step('Testing password update submission')

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
            testMocks.mockAuthSuccess()

            const mockOnSuccess = jest.fn()
            const { getByLabelText, getByRole } = testUtils.renderWithProviders(
                <UpdatePasswordForm onSuccess={mockOnSuccess} onCancel={() => { }} />
            )

            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
            fireEvent.change(getByLabelText('–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å'), { target: { value: 'newpassword123' } })
            fireEvent.change(getByLabelText('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å'), { target: { value: 'newpassword123' } })

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É
            fireEvent.click(getByRole('button', { name: /–æ–±–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å/i }))

            await waitFor(() => {
                testLogger.assertion('Password update successful', true)
                expect(mockOnSuccess).toHaveBeenCalled()
            })
        })
    })

    describe('AuthModal', () => {
        test('should render auth modal correctly', async () => {
            testLogger.step('Rendering AuthModal')

            const { getByText } = testUtils.renderWithProviders(
                <AuthModal isOpen={true} onClose={() => { }} />
            )

            testLogger.assertion('Modal rendered', true)
            expect(getByText('–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É')).toBeInTheDocument()
        })

        test('should switch between login and register modes', async () => {
            testLogger.step('Testing mode switching')

            const { getByText, getByRole } = testUtils.renderWithProviders(
                <AuthModal isOpen={true} onClose={() => { }} />
            )

            // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            fireEvent.click(getByRole('button', { name: /—Å–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç/i }))

            await waitFor(() => {
                testLogger.assertion('Switched to register mode', true)
                expect(getByText('–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç')).toBeInTheDocument()
            })
        })
    })
})
