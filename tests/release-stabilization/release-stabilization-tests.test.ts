/**
 * üöÄ –¢–ï–°–¢–´ –°–¢–ê–ë–ò–õ–ò–ó–ê–¶–ò–ò –†–ï–õ–ò–ó–ê
 * –ü–æ–∫—Ä—ã—Ç–∏–µ: —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ª–∏–∑–Ω—ã—Ö –≤–µ—Ç–æ–∫, —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É
 */

import { test, expect, Page } from '@playwright/test'

describe('üîß Release Branch Stabilization Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø–æ–ª–Ω—É—é —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—é —Ä–µ–ª–∏–∑–Ω–æ–π –≤–µ—Ç–∫–∏ v1.0.0', async ({ page }) => {
    await page.goto('/')
    
    // RS-001: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫
    await expect(page.locator('h1')).toBeVisible()
    await expect(page.locator('[data-testid="email-input"]')).toBeVisible()
    await expect(page.locator('[data-testid="subscribe-button"]')).toBeVisible()
    
    // RS-002: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç
    await page.fill('[data-testid="email-input"]', 'stabilization@example.com')
    await page.click('[data-testid="subscribe-button"]')
    
    await expect(page.locator('[data-testid="success-message"]')).toBeVisible()
    
    // RS-003: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    await page.click('[data-testid="get-started-button"]')
    await expect(page.locator('[data-testid="login-form"]')).toBeVisible()
    
    await page.click('[data-testid="sign-up-link"]')
    await expect(page.locator('[data-testid="signup-form"]')).toBeVisible()
    
    // RS-004: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –≤ –∫–æ–Ω—Å–æ–ª–∏
    const consoleErrors = await page.evaluate(() => {
      return window.console.error.calls || []
    })
    expect(consoleErrors.length).toBe(0)
    
    // RS-005: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    const startTime = Date.now()
    await page.goto('/')
    const loadTime = Date.now() - startTime
    expect(loadTime).toBeLessThan(3000)
  })

  test('–¥–æ–ª–∂–µ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—é –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á', async ({ page }) => {
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
      localStorage.setItem('auth-token', 'mock-token')
      localStorage.setItem('user', JSON.stringify({
        id: 'user-1',
        email: 'user@example.com',
        name: 'Test User',
        subscription: 'free'
      }))
    })
    
    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // RS-006: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫
    await expect(page.locator('[data-testid="planner-content"]')).toBeVisible()
    await expect(page.locator('[data-testid="add-task-button"]')).toBeVisible()
    
    // RS-007: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á
    await page.click('[data-testid="add-task-button"]')
    await page.fill('[data-testid="task-title"]', 'Stabilization Task')
    await page.selectOption('[data-testid="task-priority"]', 'high')
    await page.selectOption('[data-testid="task-category"]', 'work')
    await page.click('[data-testid="save-task-button"]')
    
    await expect(page.locator('.task-card')).toContainText('Stabilization Task')
    
    // RS-008: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á
    await page.locator('.task-card').click()
    await page.fill('[data-testid="task-title"]', 'Updated Stabilization Task')
    await page.click('[data-testid="save-task-button"]')
    
    await expect(page.locator('.task-card')).toContainText('Updated Stabilization Task')
    
    // RS-009: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á
    await page.locator('.task-card').locator('[data-testid="complete-task-button"]').click()
    await expect(page.locator('.task-card').locator('[data-testid="task-completed"]')).toBeChecked()
    
    // RS-010: –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á
    await page.locator('.task-card').locator('[data-testid="delete-task-button"]').click()
    await page.click('[data-testid="confirm-delete-button"]')
    await expect(page.locator('.task-card')).not.toContainText('Updated Stabilization Task')
  })

  test('–¥–æ–ª–∂–µ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—é –ò–ò —Ñ—É–Ω–∫—Ü–∏–π', async ({ page }) => {
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
      localStorage.setItem('auth-token', 'mock-token')
      localStorage.setItem('user', JSON.stringify({
        id: 'user-1',
        email: 'user@example.com',
        name: 'Test User',
        subscription: 'free'
      }))
    })
    
    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // RS-011: –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–º–Ω—É—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
    await page.click('[data-testid="add-task-button"]')
    await page.fill('[data-testid="task-title"]', 'Low Priority Task')
    await page.selectOption('[data-testid="task-priority"]', 'low')
    await page.selectOption('[data-testid="task-category"]', 'personal')
    await page.click('[data-testid="save-task-button"]')
    
    await page.click('[data-testid="add-task-button"]')
    await page.fill('[data-testid="task-title"]', 'High Priority Task')
    await page.selectOption('[data-testid="task-priority"]', 'high')
    await page.selectOption('[data-testid="task-category"]', 'work')
    await page.click('[data-testid="save-task-button"]')
    
    await page.click('[data-testid="smart-sort-button"]')
    await page.waitForSelector('[data-testid="sorting-complete"]')
    
    const taskCards = page.locator('.task-card')
    await expect(taskCards.first()).toContainText('High Priority Task')
    await expect(taskCards.nth(1)).toContainText('Low Priority Task')
    
    // RS-012: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ò–ò –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    await page.click('[data-testid="generate-suggestions-button"]')
    await page.waitForSelector('[data-testid="ai-suggestions"]')
    
    const suggestionCards = page.locator('.suggestion-card')
    await expect(suggestionCards).toHaveCount.greaterThan(0)
    
    // RS-013: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    await page.click('[data-testid="analyze-productivity-button"]')
    await page.waitForSelector('[data-testid="productivity-analysis"]')
    
    await expect(page.locator('[data-testid="productivity-score"]')).toBeVisible()
    await expect(page.locator('[data-testid="productivity-insights"]')).toBeVisible()
    await expect(page.locator('[data-testid="productivity-recommendations"]')).toBeVisible()
  })
})

describe('üîç Final Quality Assurance Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞—á–µ—Å—Ç–≤–∞', async ({ page }) => {
    await page.goto('/')
    
    // FQA-001: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è
    await expect(page.locator('h1')).toBeVisible()
    await expect(page.locator('[data-testid="email-input"]')).toBeVisible()
    await expect(page.locator('[data-testid="subscribe-button"]')).toBeVisible()
    await expect(page.locator('[data-testid="features-section"]')).toBeVisible()
    await expect(page.locator('[data-testid="pricing-section"]')).toBeVisible()
    
    // FQA-002: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Å—Å—ã–ª–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç
    await page.click('[data-testid="get-started-button"]')
    await expect(page.locator('[data-testid="login-form"]')).toBeVisible()
    
    await page.click('[data-testid="sign-up-link"]')
    await expect(page.locator('[data-testid="signup-form"]')).toBeVisible()
    
    await page.click('[data-testid="sign-in-link"]')
    await expect(page.locator('[data-testid="login-form"]')).toBeVisible()
    
    // FQA-003: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ñ–æ—Ä–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç
    await page.fill('[data-testid="login-email"]', 'test@example.com')
    await page.fill('[data-testid="login-password"]', 'password123')
    await page.click('[data-testid="login-button"]')
    
    // FQA-004: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç JavaScript –æ—à–∏–±–æ–∫
    const jsErrors = await page.evaluate(() => {
      return window.console.error.calls || []
    })
    expect(jsErrors.length).toBe(0)
    
    // FQA-005: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è
    const images = page.locator('img')
    const imageCount = await images.count()
    
    for (let i = 0; i < imageCount; i++) {
      const img = images.nth(i)
      await expect(img).toBeVisible()
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏', async ({ page }) => {
    await page.goto('/')
    
    // FQA-006: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const startTime = Date.now()
    await page.goto('/')
    const loadTime = Date.now() - startTime
    expect(loadTime).toBeLessThan(3000)
    
    // FQA-007: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    await page.waitForSelector('[data-testid="email-input"]')
    const interactiveTime = Date.now() - startTime
    expect(interactiveTime).toBeLessThan(5000)
    
    // FQA-008: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ —Ñ–æ—Ä–º
    const formStartTime = Date.now()
    await page.fill('[data-testid="email-input"]', 'test@example.com')
    await page.click('[data-testid="subscribe-button"]')
    const formResponseTime = Date.now() - formStartTime
    expect(formResponseTime).toBeLessThan(2000)
    
    // FQA-009: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    const navStartTime = Date.now()
    await page.click('[data-testid="get-started-button"]')
    await page.waitForSelector('[data-testid="login-form"]')
    const navTime = Date.now() - navStartTime
    expect(navTime).toBeLessThan(1000)
    
    // FQA-010: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    const plannerStartTime = Date.now()
    await page.goto('/planner')
    await page.waitForSelector('[data-testid="planner-content"]')
    const plannerLoadTime = Date.now() - plannerStartTime
    expect(plannerLoadTime).toBeLessThan(4000)
  })

  test('–¥–æ–ª–∂–µ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏', async ({ page }) => {
    await page.goto('/')
    
    // FQA-011: –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTPS —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    const protocol = await page.evaluate(() => window.location.protocol)
    expect(protocol).toBe('https:')
    
    // FQA-012: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞—Ä–æ–ª–∏ —Å–∫—Ä—ã—Ç—ã
    await page.click('[data-testid="get-started-button"]')
    await page.fill('[data-testid="login-password"]', 'password123')
    
    const passwordInput = page.locator('[data-testid="login-password"]')
    await expect(passwordInput).toHaveAttribute('type', 'password')
    
    // FQA-013: –ü—Ä–æ–≤–µ—Ä—è–µ–º CSRF –∑–∞—â–∏—Ç—É
    const csrfToken = await page.locator('[data-testid="csrf-token"]').textContent()
    expect(csrfToken).toBeDefined()
    expect(csrfToken.length).toBeGreaterThan(0)
    
    // FQA-014: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö
    await page.fill('[data-testid="login-email"]', 'invalid-email')
    await page.fill('[data-testid="login-password"]', '123')
    await page.click('[data-testid="login-button"]')
    
    await expect(page.locator('[data-testid="email-error"]')).toBeVisible()
    await expect(page.locator('[data-testid="password-error"]')).toBeVisible()
    
    // FQA-015: –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–π
    const sessionCookie = await page.context().cookies()
    const sessionCookieExists = sessionCookie.some(cookie => cookie.name === 'session')
    expect(sessionCookieExists).toBe(true)
  })
})

describe('üì± Cross-Platform Compatibility Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö', async ({ page }) => {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–±–∏–ª—å–Ω—ã–π viewport
    await page.setViewportSize({ width: 375, height: 667 })
    await page.goto('/')
    
    // CROSS-001: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –∫ –º–æ–±–∏–ª—å–Ω—ã–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º
    await expect(page.locator('h1')).toBeVisible()
    await expect(page.locator('[data-testid="email-input"]')).toBeVisible()
    await expect(page.locator('[data-testid="subscribe-button"]')).toBeVisible()
    
    // CROSS-002: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–∏–µ –¥–ª—è –∫–∞—Å–∞–Ω–∏—è
    const subscribeButton = page.locator('[data-testid="subscribe-button"]')
    const buttonSize = await subscribeButton.boundingBox()
    expect(buttonSize.height).toBeGreaterThanOrEqual(44)
    
    // CROSS-003: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–æ—Ä–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
    await page.fill('[data-testid="email-input"]', 'mobile@example.com')
    await page.click('[data-testid="subscribe-button"]')
    
    await expect(page.locator('[data-testid="success-message"]')).toBeVisible()
    
    // CROSS-004: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
    await page.click('[data-testid="get-started-button"]')
    await expect(page.locator('[data-testid="login-form"]')).toBeVisible()
    
    // CROSS-005: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç —á–∏—Ç–∞–µ–º –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
    const h1 = page.locator('h1')
    const h1FontSize = await h1.evaluate(el => getComputedStyle(el).fontSize)
    expect(parseInt(h1FontSize)).toBeGreaterThanOrEqual(24)
  })

  test('–¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –ø–ª–∞–Ω—à–µ—Ç–∞—Ö', async ({ page }) => {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω—à–µ—Ç–Ω—ã–π viewport
    await page.setViewportSize({ width: 768, height: 1024 })
    await page.goto('/')
    
    // CROSS-006: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –∫ –ø–ª–∞–Ω—à–µ—Ç–∞–º
    await expect(page.locator('h1')).toBeVisible()
    await expect(page.locator('[data-testid="email-input"]')).toBeVisible()
    await expect(page.locator('[data-testid="subscribe-button"]')).toBeVisible()
    
    // CROSS-007: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
    const heroSection = page.locator('[data-testid="hero-section"]')
    const heroSectionSize = await heroSection.boundingBox()
    expect(heroSectionSize.width).toBeGreaterThan(600)
    
    // CROSS-008: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –Ω–∞ –ø–ª–∞–Ω—à–µ—Ç–∞—Ö
    await page.click('[data-testid="get-started-button"]')
    await expect(page.locator('[data-testid="login-form"]')).toBeVisible()
    
    // CROSS-009: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–æ—Ä–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞ –ø–ª–∞–Ω—à–µ—Ç–∞—Ö
    await page.fill('[data-testid="login-email"]', 'tablet@example.com')
    await page.fill('[data-testid="login-password"]', 'password123')
    await page.click('[data-testid="login-button"]')
    
    // CROSS-010: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–Ω—Ç —Ö–æ—Ä–æ—à–æ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω –Ω–∞ –ø–ª–∞–Ω—à–µ—Ç–∞—Ö
    const featuresSection = page.locator('[data-testid="features-section"]')
    const featuresSectionSize = await featuresSection.boundingBox()
    expect(featuresSectionSize.width).toBeGreaterThan(700)
  })

  test('–¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –¥–µ—Å–∫—Ç–æ–ø–∞—Ö', async ({ page }) => {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Å–∫—Ç–æ–ø–Ω—ã–π viewport
    await page.setViewportSize({ width: 1920, height: 1080 })
    await page.goto('/')
    
    // CROSS-011: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –∫ –¥–µ—Å–∫—Ç–æ–ø–∞–º
    await expect(page.locator('h1')).toBeVisible()
    await expect(page.locator('[data-testid="email-input"]')).toBeVisible()
    await expect(page.locator('[data-testid="subscribe-button"]')).toBeVisible()
    
    // CROSS-012: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
    const heroSection = page.locator('[data-testid="hero-section"]')
    const heroSectionSize = await heroSection.boundingBox()
    expect(heroSectionSize.width).toBeGreaterThan(1000)
    
    // CROSS-013: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –Ω–∞ –¥–µ—Å–∫—Ç–æ–ø–∞—Ö
    await page.click('[data-testid="get-started-button"]')
    await expect(page.locator('[data-testid="login-form"]')).toBeVisible()
    
    // CROSS-014: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–æ—Ä–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞ –¥–µ—Å–∫—Ç–æ–ø–∞—Ö
    await page.fill('[data-testid="login-email"]', 'desktop@example.com')
    await page.fill('[data-testid="login-password"]', 'password123')
    await page.click('[data-testid="login-button"]')
    
    // CROSS-015: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–Ω—Ç —Ö–æ—Ä–æ—à–æ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω –Ω–∞ –¥–µ—Å–∫—Ç–æ–ø–∞—Ö
    const featuresSection = page.locator('[data-testid="features-section"]')
    const featuresSectionSize = await featuresSection.boundingBox()
    expect(featuresSectionSize.width).toBeGreaterThan(1200)
  })
})

describe('üåê Browser Compatibility Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –≤ Chrome', async ({ page }) => {
    await page.goto('/')
    
    // BROWSER-001: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –≤ Chrome
    await expect(page.locator('h1')).toBeVisible()
    await expect(page.locator('[data-testid="email-input"]')).toBeVisible()
    await expect(page.locator('[data-testid="subscribe-button"]')).toBeVisible()
    
    // BROWSER-002: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –≤ Chrome
    await page.fill('[data-testid="email-input"]', 'chrome@example.com')
    await page.click('[data-testid="subscribe-button"]')
    
    await expect(page.locator('[data-testid="success-message"]')).toBeVisible()
    
    // BROWSER-003: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–≤–∏–≥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ Chrome
    await page.click('[data-testid="get-started-button"]')
    await expect(page.locator('[data-testid="login-form"]')).toBeVisible()
    
    // BROWSER-004: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–æ—Ä–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –≤ Chrome
    await page.fill('[data-testid="login-email"]', 'chrome@example.com')
    await page.fill('[data-testid="login-password"]', 'password123')
    await page.click('[data-testid="login-button"]')
    
    // BROWSER-005: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç –æ—à–∏–±–æ–∫ –≤ Chrome
    const consoleErrors = await page.evaluate(() => {
      return window.console.error.calls || []
    })
    expect(consoleErrors.length).toBe(0)
  })

  test('–¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –≤ Firefox', async ({ page }) => {
    await page.goto('/')
    
    // BROWSER-006: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –≤ Firefox
    await expect(page.locator('h1')).toBeVisible()
    await expect(page.locator('[data-testid="email-input"]')).toBeVisible()
    await expect(page.locator('[data-testid="subscribe-button"]')).toBeVisible()
    
    // BROWSER-007: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –≤ Firefox
    await page.fill('[data-testid="email-input"]', 'firefox@example.com')
    await page.click('[data-testid="subscribe-button"]')
    
    await expect(page.locator('[data-testid="success-message"]')).toBeVisible()
    
    // BROWSER-008: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–≤–∏–≥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ Firefox
    await page.click('[data-testid="get-started-button"]')
    await expect(page.locator('[data-testid="login-form"]')).toBeVisible()
    
    // BROWSER-009: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–æ—Ä–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –≤ Firefox
    await page.fill('[data-testid="login-email"]', 'firefox@example.com')
    await page.fill('[data-testid="login-password"]', 'password123')
    await page.click('[data-testid="login-button"]')
    
    // BROWSER-010: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç –æ—à–∏–±–æ–∫ –≤ Firefox
    const consoleErrors = await page.evaluate(() => {
      return window.console.error.calls || []
    })
    expect(consoleErrors.length).toBe(0)
  })

  test('–¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –≤ Safari', async ({ page }) => {
    await page.goto('/')
    
    // BROWSER-011: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –≤ Safari
    await expect(page.locator('h1')).toBeVisible()
    await expect(page.locator('[data-testid="email-input"]')).toBeVisible()
    await expect(page.locator('[data-testid="subscribe-button"]')).toBeVisible()
    
    // BROWSER-012: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –≤ Safari
    await page.fill('[data-testid="email-input"]', 'safari@example.com')
    await page.click('[data-testid="subscribe-button"]')
    
    await expect(page.locator('[data-testid="success-message"]')).toBeVisible()
    
    // BROWSER-013: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–≤–∏–≥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ Safari
    await page.click('[data-testid="get-started-button"]')
    await expect(page.locator('[data-testid="login-form"]')).toBeVisible()
    
    // BROWSER-014: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–æ—Ä–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –≤ Safari
    await page.fill('[data-testid="login-email"]', 'safari@example.com')
    await page.fill('[data-testid="login-password"]', 'password123')
    await page.click('[data-testid="login-button"]')
    
    // BROWSER-015: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç –æ—à–∏–±–æ–∫ –≤ Safari
    const consoleErrors = await page.evaluate(() => {
      return window.console.error.calls || []
    })
    expect(consoleErrors.length).toBe(0)
  })
})