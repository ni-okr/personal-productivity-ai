/**
 * üìã –¢–ï–°–¢–´ –¢–†–ê–°–°–ò–†–û–í–ö–ò –¢–†–ï–ë–û–í–ê–ù–ò–ô
 * –ü–æ–∫—Ä—ã—Ç–∏–µ: —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º, —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
 */

import { test, expect, Page } from '@playwright/test'

describe('üéØ Functional Requirements Traceability', () => {
  test('–¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é FR-001: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', async ({ page }) => {
    await page.goto('/')
    
    // FR-001: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
    const registrationRequirements = [
      { field: 'email', required: true, validation: 'email format' },
      { field: 'password', required: true, validation: 'minimum 8 characters' },
      { field: 'name', required: true, validation: 'non-empty string' },
      { field: 'confirm-password', required: true, validation: 'matches password' }
    ]
    
    for (const req of registrationRequirements) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—è
      const field = page.locator(`[data-testid="${req.field}"]`)
      await expect(field).toBeVisible()
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª—è
      if (req.required) {
        await expect(field).toHaveAttribute('required')
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–æ–ª—è
      if (req.validation === 'email format') {
        await field.fill('invalid-email')
        await page.click('[data-testid="register-button"]')
        await expect(page.locator('[data-testid="email-error"]')).toBeVisible()
      } else if (req.validation === 'minimum 8 characters') {
        await field.fill('1234567')
        await page.click('[data-testid="register-button"]')
        await expect(page.locator('[data-testid="password-error"]')).toBeVisible()
      } else if (req.validation === 'non-empty string') {
        await field.fill('')
        await page.click('[data-testid="register-button"]')
        await expect(page.locator('[data-testid="name-error"]')).toBeVisible()
      } else if (req.validation === 'matches password') {
        await page.fill('[data-testid="password"]', 'password123')
        await field.fill('different-password')
        await page.click('[data-testid="register-button"]')
        await expect(page.locator('[data-testid="confirm-password-error"]')).toBeVisible()
      }
    }
  })

  test('–¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é FR-002: –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', async ({ page }) => {
    await page.goto('/')
    
    // FR-002: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É
    const authenticationRequirements = [
      { field: 'email', required: true, validation: 'email format' },
      { field: 'password', required: true, validation: 'non-empty string' },
      { action: 'login', expected: 'redirect to planner' },
      { action: 'logout', expected: 'redirect to home' },
      { action: 'remember-me', expected: 'persist session' }
    ]
    
    for (const req of authenticationRequirements) {
      if (req.field) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—è
        const field = page.locator(`[data-testid="${req.field}"]`)
        await expect(field).toBeVisible()
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª—è
        if (req.required) {
          await expect(field).toHaveAttribute('required')
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–æ–ª—è
        if (req.validation === 'email format') {
          await field.fill('invalid-email')
          await page.click('[data-testid="login-button"]')
          await expect(page.locator('[data-testid="email-error"]')).toBeVisible()
        } else if (req.validation === 'non-empty string') {
          await field.fill('')
          await page.click('[data-testid="login-button"]')
          await expect(page.locator('[data-testid="password-error"]')).toBeVisible()
        }
      } else if (req.action) {
        if (req.action === 'login') {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥
          await page.fill('[data-testid="email"]', 'test@example.com')
          await page.fill('[data-testid="password"]', 'password123')
          await page.click('[data-testid="login-button"]')
          await expect(page.locator('[data-testid="planner-content"]')).toBeVisible()
        } else if (req.action === 'logout') {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã—Ö–æ–¥
          await page.click('[data-testid="logout-button"]')
          await expect(page.locator('[data-testid="home-content"]')).toBeVisible()
        } else if (req.action === 'remember-me') {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
          await page.check('[data-testid="remember-me"]')
          await page.fill('[data-testid="email"]', 'test@example.com')
          await page.fill('[data-testid="password"]', 'password123')
          await page.click('[data-testid="login-button"]')
          await page.reload()
          await expect(page.locator('[data-testid="planner-content"]')).toBeVisible()
        }
      }
    }
  })

  test('–¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é FR-003: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏', async ({ page }) => {
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
      localStorage.setItem('auth-token', 'mock-token')
      localStorage.setItem('user', JSON.stringify({
        id: 'user-1',
        email: 'test@example.com',
        name: 'Test User',
        subscription: 'free'
      }))
    })
    
    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // FR-003: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∞–º–∏
    const taskManagementRequirements = [
      { action: 'create', field: 'title', required: true, validation: 'non-empty string' },
      { action: 'create', field: 'description', required: false, validation: 'optional string' },
      { action: 'create', field: 'priority', required: true, validation: 'high/medium/low' },
      { action: 'create', field: 'category', required: true, validation: 'work/personal/health' },
      { action: 'create', field: 'due-date', required: false, validation: 'future date' },
      { action: 'update', field: 'title', required: true, validation: 'non-empty string' },
      { action: 'update', field: 'description', required: false, validation: 'optional string' },
      { action: 'update', field: 'priority', required: true, validation: 'high/medium/low' },
      { action: 'update', field: 'category', required: true, validation: 'work/personal/health' },
      { action: 'update', field: 'due-date', required: false, validation: 'future date' },
      { action: 'delete', field: 'task', required: true, validation: 'existing task' },
      { action: 'complete', field: 'task', required: true, validation: 'existing task' }
    ]
    
    for (const req of taskManagementRequirements) {
      if (req.action === 'create') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
        await page.click('[data-testid="add-task-button"]')
        
        if (req.field === 'title') {
          const field = page.locator(`[data-testid="task-${req.field}"]`)
          await expect(field).toBeVisible()
          
          if (req.required) {
            await expect(field).toHaveAttribute('required')
          }
          
          if (req.validation === 'non-empty string') {
            await field.fill('')
            await page.click('[data-testid="save-task-button"]')
            await expect(page.locator('[data-testid="title-error"]')).toBeVisible()
          }
        } else if (req.field === 'description') {
          const field = page.locator(`[data-testid="task-${req.field}"]`)
          await expect(field).toBeVisible()
          
          if (req.required) {
            await expect(field).toHaveAttribute('required')
          }
        } else if (req.field === 'priority') {
          const field = page.locator(`[data-testid="task-${req.field}"]`)
          await expect(field).toBeVisible()
          
          if (req.required) {
            await expect(field).toHaveAttribute('required')
          }
          
          if (req.validation === 'high/medium/low') {
            const options = field.locator('option')
            await expect(options).toHaveCount(3)
            await expect(options.nth(0)).toHaveValue('high')
            await expect(options.nth(1)).toHaveValue('medium')
            await expect(options.nth(2)).toHaveValue('low')
          }
        } else if (req.field === 'category') {
          const field = page.locator(`[data-testid="task-${req.field}"]`)
          await expect(field).toBeVisible()
          
          if (req.required) {
            await expect(field).toHaveAttribute('required')
          }
          
          if (req.validation === 'work/personal/health') {
            const options = field.locator('option')
            await expect(options).toHaveCount(3)
            await expect(options.nth(0)).toHaveValue('work')
            await expect(options.nth(1)).toHaveValue('personal')
            await expect(options.nth(2)).toHaveValue('health')
          }
        } else if (req.field === 'due-date') {
          const field = page.locator(`[data-testid="task-${req.field}"]`)
          await expect(field).toBeVisible()
          
          if (req.required) {
            await expect(field).toHaveAttribute('required')
          }
          
          if (req.validation === 'future date') {
            await field.fill('2023-01-01')
            await page.click('[data-testid="save-task-button"]')
            await expect(page.locator('[data-testid="due-date-error"]')).toBeVisible()
          }
        }
      } else if (req.action === 'update') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
        const taskCard = page.locator('.task-card').first()
        if (await taskCard.count() > 0) {
          await taskCard.click()
          
          if (req.field === 'title') {
            const field = page.locator(`[data-testid="task-${req.field}"]`)
            await expect(field).toBeVisible()
            
            if (req.required) {
              await expect(field).toHaveAttribute('required')
            }
            
            if (req.validation === 'non-empty string') {
              await field.fill('')
              await page.click('[data-testid="save-task-button"]')
              await expect(page.locator('[data-testid="title-error"]')).toBeVisible()
            }
          }
        }
      } else if (req.action === 'delete') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
        const deleteButton = page.locator('[data-testid="delete-task-button"]').first()
        if (await deleteButton.count() > 0) {
          await expect(deleteButton).toBeVisible()
          await deleteButton.click()
          await expect(page.locator('[data-testid="confirm-delete"]')).toBeVisible()
        }
      } else if (req.action === 'complete') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
        const completeButton = page.locator('[data-testid="complete-task-button"]').first()
        if (await completeButton.count() > 0) {
          await expect(completeButton).toBeVisible()
          await completeButton.click()
          await expect(page.locator('[data-testid="task-completed"]')).toBeChecked()
        }
      }
    }
  })

  test('–¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é FR-004: –ò–ò –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫', async ({ page }) => {
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
      localStorage.setItem('auth-token', 'mock-token')
      localStorage.setItem('user', JSON.stringify({
        id: 'user-1',
        email: 'test@example.com',
        name: 'Test User',
        subscription: 'free'
      }))
    })
    
    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // FR-004: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ò–ò –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫—É
    const aiPlannerRequirements = [
      { feature: 'smart-sorting', expected: 'tasks sorted by priority and deadline' },
      { feature: 'productivity-analysis', expected: 'daily productivity score and insights' },
      { feature: 'ai-suggestions', expected: 'personalized task recommendations' },
      { feature: 'smart-reminders', expected: 'contextual reminders and notifications' },
      { feature: 'time-optimization', expected: 'optimal time slot suggestions' }
    ]
    
    for (const req of aiPlannerRequirements) {
      if (req.feature === 'smart-sorting') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–º–Ω—É—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
        const sortButton = page.locator('[data-testid="smart-sort-button"]')
        await expect(sortButton).toBeVisible()
        await sortButton.click()
        
        const taskCards = page.locator('.task-card')
        if (await taskCards.count() > 1) {
          const firstTask = taskCards.first()
          const secondTask = taskCards.nth(1)
          
          const firstPriority = await firstTask.locator('[data-testid="task-priority"]').textContent()
          const secondPriority = await secondTask.locator('[data-testid="task-priority"]').textContent()
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
          expect(['high', 'medium', 'low'].indexOf(firstPriority)).toBeLessThanOrEqual(['high', 'medium', 'low'].indexOf(secondPriority))
        }
      } else if (req.feature === 'productivity-analysis') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        const analysisSection = page.locator('[data-testid="productivity-analysis"]')
        await expect(analysisSection).toBeVisible()
        
        const score = page.locator('[data-testid="productivity-score"]')
        await expect(score).toBeVisible()
        
        const insights = page.locator('[data-testid="productivity-insights"]')
        await expect(insights).toBeVisible()
      } else if (req.feature === 'ai-suggestions') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ò–ò –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        const suggestionsSection = page.locator('[data-testid="ai-suggestions"]')
        await expect(suggestionsSection).toBeVisible()
        
        const suggestionCards = page.locator('.suggestion-card')
        await expect(suggestionCards).toHaveCount.greaterThan(0)
      } else if (req.feature === 'smart-reminders') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–º–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        const remindersSection = page.locator('[data-testid="smart-reminders"]')
        await expect(remindersSection).toBeVisible()
        
        const reminderCards = page.locator('.reminder-card')
        await expect(reminderCards).toHaveCount.greaterThan(0)
      } else if (req.feature === 'time-optimization') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –≤—Ä–µ–º–µ–Ω–∏
        const timeOptimizationSection = page.locator('[data-testid="time-optimization"]')
        await expect(timeOptimizationSection).toBeVisible()
        
        const timeSlots = page.locator('[data-testid="optimal-time-slot"]')
        await expect(timeSlots).toHaveCount.greaterThan(0)
      }
    }
  })
})

describe('üîí Non-Functional Requirements Traceability', () => {
  test('–¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é NFR-001: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', async ({ page }) => {
    await page.goto('/')
    
    // NFR-001: –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 3 —Å–µ–∫—É–Ω–¥—ã
    const startTime = Date.now()
    await page.goto('/')
    const loadTime = Date.now() - startTime
    
    expect(loadTime).toBeLessThan(3000)
    
    // NFR-001: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 5 —Å–µ–∫—É–Ω–¥
    await page.waitForSelector('[data-testid="email-input"]')
    const interactiveTime = Date.now() - startTime
    
    expect(interactiveTime).toBeLessThan(5000)
  })

  test('–¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é NFR-002: –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', async ({ page }) => {
    await page.goto('/')
    
    // NFR-002: –í—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã
    const httpsCheck = await page.evaluate(() => {
      return window.location.protocol === 'https:'
    })
    expect(httpsCheck).toBe(true)
    
    // NFR-002: –ü–∞—Ä–æ–ª–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ö–µ—à–∏—Ä–æ–≤–∞–Ω—ã
    await page.fill('[data-testid="password"]', 'password123')
    await page.click('[data-testid="login-button"]')
    
    const passwordField = page.locator('[data-testid="password"]')
    const passwordValue = await passwordField.inputValue()
    expect(passwordValue).not.toBe('password123') // –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω
  })

  test('–¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é NFR-003: –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å', async ({ page }) => {
    await page.goto('/')
    
    // NFR-003: –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å WCAG 2.1 AA
    const accessibilityChecks = [
      { element: 'h1', attribute: 'role', expected: 'heading' },
      { element: 'button', attribute: 'aria-label', expected: 'present' },
      { element: 'input', attribute: 'aria-describedby', expected: 'present' },
      { element: 'form', attribute: 'aria-label', expected: 'present' }
    ]
    
    for (const check of accessibilityChecks) {
      const element = page.locator(check.element).first()
      if (await element.count() > 0) {
        if (check.attribute === 'role') {
          await expect(element).toHaveAttribute('role', check.expected)
        } else if (check.attribute === 'aria-label') {
          await expect(element).toHaveAttribute('aria-label')
        } else if (check.attribute === 'aria-describedby') {
          await expect(element).toHaveAttribute('aria-describedby')
        }
      }
    }
  })

  test('–¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é NFR-004: –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å', async ({ page }) => {
    await page.goto('/')
    
    // NFR-004: –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–∞—Ö
    const browserCompatibility = [
      { feature: 'localStorage', expected: 'supported' },
      { feature: 'sessionStorage', expected: 'supported' },
      { feature: 'fetch', expected: 'supported' },
      { feature: 'promises', expected: 'supported' },
      { feature: 'async/await', expected: 'supported' }
    ]
    
    for (const check of browserCompatibility) {
      const isSupported = await page.evaluate((feature) => {
        switch (feature) {
          case 'localStorage':
            return typeof Storage !== 'undefined'
          case 'sessionStorage':
            return typeof Storage !== 'undefined'
          case 'fetch':
            return typeof fetch !== 'undefined'
          case 'promises':
            return typeof Promise !== 'undefined'
          case 'async/await':
            return typeof async function() {} === 'function'
          default:
            return false
        }
      }, check.feature)
      
      expect(isSupported).toBe(true)
    }
  })
})

describe('üìä Business Requirements Traceability', () => {
  test('–¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é BR-001: –ú–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—è', async ({ page }) => {
    await page.goto('/')
    
    // BR-001: –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏
    const subscriptionRequirements = [
      { plan: 'free', features: ['basic-tasks', 'basic-ai'], price: 0 },
      { plan: 'premium', features: ['unlimited-tasks', 'advanced-ai', 'priority-support'], price: 9.99 },
      { plan: 'pro', features: ['unlimited-tasks', 'all-ai-models', 'priority-support', 'analytics'], price: 19.99 },
      { plan: 'enterprise', features: ['unlimited-tasks', 'all-ai-models', 'priority-support', 'analytics', 'api-access'], price: 49.99 }
    ]
    
    for (const req of subscriptionRequirements) {
      const planCard = page.locator(`[data-testid="plan-${req.plan}"]`)
      if (await planCard.count() > 0) {
        await expect(planCard).toBeVisible()
        
        const price = planCard.locator('[data-testid="plan-price"]')
        await expect(price).toContainText(req.price.toString())
        
        for (const feature of req.features) {
          const featureElement = planCard.locator(`[data-testid="feature-${feature}"]`)
          await expect(featureElement).toBeVisible()
        }
      }
    }
  })

  test('–¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é BR-002: –ê–Ω–∞–ª–∏—Ç–∏–∫–∞', async ({ page }) => {
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
      localStorage.setItem('auth-token', 'mock-token')
      localStorage.setItem('user', JSON.stringify({
        id: 'user-1',
        email: 'test@example.com',
        name: 'Test User',
        subscription: 'free'
      }))
    })
    
    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // BR-002: –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–±–∏—Ä–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    const analyticsRequirements = [
      { metric: 'task-creation', expected: 'tracked' },
      { metric: 'task-completion', expected: 'tracked' },
      { metric: 'ai-usage', expected: 'tracked' },
      { metric: 'user-engagement', expected: 'tracked' },
      { metric: 'feature-usage', expected: 'tracked' }
    ]
    
    for (const req of analyticsRequirements) {
      const metricElement = page.locator(`[data-testid="metric-${req.metric}"]`)
      if (await metricElement.count() > 0) {
        await expect(metricElement).toBeVisible()
      }
    }
  })

  test('–¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é BR-003: –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å', async ({ page }) => {
    await page.goto('/')
    
    // BR-003: –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ä–æ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const scalabilityRequirements = [
      { aspect: 'database', expected: 'scalable' },
      { aspect: 'caching', expected: 'implemented' },
      { aspect: 'cdn', expected: 'configured' },
      { aspect: 'load-balancing', expected: 'supported' },
      { aspect: 'monitoring', expected: 'enabled' }
    ]
    
    for (const req of scalabilityRequirements) {
      const aspectElement = page.locator(`[data-testid="scalability-${req.aspect}"]`)
      if (await aspectElement.count() > 0) {
        await expect(aspectElement).toBeVisible()
      }
    }
  })
})

describe('üîÑ Change Traceability', () => {
  test('–¥–æ–ª–∂–µ–Ω –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö', async ({ page }) => {
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
    const requirementsVersion = await page.evaluate(() => {
      return localStorage.getItem('requirements-version')
    })
    
    expect(requirementsVersion).toBeDefined()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
    const lastUpdated = await page.evaluate(() => {
      return localStorage.getItem('requirements-last-updated')
    })
    
    expect(lastUpdated).toBeDefined()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã
    const currentDate = new Date()
    const lastUpdatedDate = new Date(lastUpdated)
    const daysSinceUpdate = (currentDate.getTime() - lastUpdatedDate.getTime()) / (1000 * 60 * 60 * 24)
    
    expect(daysSinceUpdate).toBeLessThan(30) // –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–æ–ª–∂–Ω—ã –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –Ω–µ —Ä–µ–∂–µ —Ä–∞–∑–∞ –≤ –º–µ—Å—è—Ü
  })

  test('–¥–æ–ª–∂–µ–Ω –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏', async ({ page }) => {
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    const functionalityVersion = await page.evaluate(() => {
      return localStorage.getItem('functionality-version')
    })
    
    expect(functionalityVersion).toBeDefined()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    const lastUpdated = await page.evaluate(() => {
      return localStorage.getItem('functionality-last-updated')
    })
    
    expect(lastUpdated).toBeDefined()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–∞
    const currentDate = new Date()
    const lastUpdatedDate = new Date(lastUpdated)
    const daysSinceUpdate = (currentDate.getTime() - lastUpdatedDate.getTime()) / (1000 * 60 * 60 * 24)
    
    expect(daysSinceUpdate).toBeLessThan(7) // –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –Ω–µ —Ä–µ–∂–µ —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é
  })

  test('–¥–æ–ª–∂–µ–Ω –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ç–µ—Å—Ç–∞—Ö', async ({ page }) => {
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é —Ç–µ—Å—Ç–æ–≤
    const testsVersion = await page.evaluate(() => {
      return localStorage.getItem('tests-version')
    })
    
    expect(testsVersion).toBeDefined()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤
    const lastUpdated = await page.evaluate(() => {
      return localStorage.getItem('tests-last-updated')
    })
    
    expect(lastUpdated).toBeDefined()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ—Å—Ç—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã
    const currentDate = new Date()
    const lastUpdatedDate = new Date(lastUpdated)
    const daysSinceUpdate = (currentDate.getTime() - lastUpdatedDate.getTime()) / (1000 * 60 * 60 * 24)
    
    expect(daysSinceUpdate).toBeLessThan(3) // –¢–µ—Å—Ç—ã –¥–æ–ª–∂–Ω—ã –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –Ω–µ —Ä–µ–∂–µ —Ä–∞–∑–∞ –≤ 3 –¥–Ω—è
  })
})