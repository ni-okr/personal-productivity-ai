/**
 * üõ§Ô∏è –¢–ï–°–¢–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–• –ü–£–¢–ï–ô
 * –ü–æ–∫—Ä—ã—Ç–∏–µ: user journeys, navigation paths, user flows
 */

import { test, expect, Page } from '@playwright/test'

describe('üè† Homepage Navigation Paths', () => {
  test('–¥–æ–ª–∂–µ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø—É—Ç—å –æ—Ç –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫—É', async ({ page }) => {
    await page.goto('/')
    
    // –®–∞–≥ 1: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await expect(page.locator('h1')).toContainText('Personal AI')
    await expect(page.locator('[data-testid="hero-section"]')).toBeVisible()
    await expect(page.locator('[data-testid="features-section"]')).toBeVisible()
    await expect(page.locator('[data-testid="pricing-section"]')).toBeVisible()
    
    // –®–∞–≥ 2: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await page.locator('[data-testid="features-section"]').scrollIntoViewIfNeeded()
    await expect(page.locator('[data-testid="feature-card"]')).toHaveCount.greaterThan(0)
    
    await page.locator('[data-testid="pricing-section"]').scrollIntoViewIfNeeded()
    await expect(page.locator('[data-testid="plan-card"]')).toHaveCount.greaterThan(0)
    
    // –®–∞–≥ 3: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É "Get Started"
    await page.click('[data-testid="get-started-button"]')
    
    // –®–∞–≥ 4: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
    await expect(page.locator('[data-testid="login-form"]')).toBeVisible()
    await expect(page.locator('[data-testid="login-email"]')).toBeVisible()
    await expect(page.locator('[data-testid="login-password"]')).toBeVisible()
    
    // –®–∞–≥ 5: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    await page.click('[data-testid="sign-up-link"]')
    await expect(page.locator('[data-testid="signup-form"]')).toBeVisible()
    
    // –®–∞–≥ 6: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫ –≤—Ö–æ–¥—É
    await page.click('[data-testid="sign-in-link"]')
    await expect(page.locator('[data-testid="login-form"]')).toBeVisible()
  })

  test('–¥–æ–ª–∂–µ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø—É—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É', async ({ page }) => {
    await page.goto('/')
    
    // –®–∞–≥ 1: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç —Ñ–æ—Ä–º—É –ø–æ–¥–ø–∏—Å–∫–∏
    await expect(page.locator('[data-testid="email-input"]')).toBeVisible()
    await expect(page.locator('[data-testid="subscribe-button"]')).toBeVisible()
    
    // –®–∞–≥ 2: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç email
    await page.fill('[data-testid="email-input"]', 'test@example.com')
    
    // –®–∞–≥ 3: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫—É –ø–æ–¥–ø–∏—Å–∫–∏
    await page.click('[data-testid="subscribe-button"]')
    
    // –®–∞–≥ 4: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
    await expect(page.locator('[data-testid="success-message"]')).toBeVisible()
    await expect(page.locator('[data-testid="success-message"]')).toContainText('Successfully subscribed')
    
    // –®–∞–≥ 5: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞ —Å –¥—Ä—É–≥–∏–º email
    await page.fill('[data-testid="email-input"]', 'another@example.com')
    await page.click('[data-testid="subscribe-button"]')
    
    await expect(page.locator('[data-testid="success-message"]')).toBeVisible()
  })

  test('–¥–æ–ª–∂–µ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø—É—Ç—å –∫ —Ç–∞—Ä–∏—Ñ–Ω—ã–º –ø–ª–∞–Ω–∞–º', async ({ page }) => {
    await page.goto('/')
    
    // –®–∞–≥ 1: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ—Ç –∫ —Ä–∞–∑–¥–µ–ª—É —Ç–∞—Ä–∏—Ñ–æ–≤
    await page.locator('[data-testid="pricing-section"]').scrollIntoViewIfNeeded()
    await expect(page.locator('[data-testid="pricing-section"]')).toBeVisible()
    
    // –®–∞–≥ 2: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç –≤—Å–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã
    const planCards = page.locator('[data-testid="plan-card"]')
    await expect(planCards).toHaveCount(4)
    
    // –®–∞–≥ 3: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–≤–æ–¥–∏—Ç –∫—É—Ä—Å–æ—Ä –Ω–∞ –ø–ª–∞–Ω
    const freePlan = page.locator('[data-testid="plan-free"]')
    await freePlan.hover()
    await expect(freePlan).toHaveClass(/hover/)
    
    // –®–∞–≥ 4: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–ª–∏–∫–∞–µ—Ç –Ω–∞ –ø–ª–∞–Ω
    await freePlan.click()
    await expect(page.locator('[data-testid="plan-details"]')).toBeVisible()
    
    // –®–∞–≥ 5: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –ø–ª–∞–Ω–∞
    await page.click('[data-testid="close-plan-details"]')
    await expect(page.locator('[data-testid="plan-details"]')).not.toBeVisible()
    
    // –®–∞–≥ 6: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –ø—Ä–µ–º–∏—É–º –ø–ª–∞–Ω
    const premiumPlan = page.locator('[data-testid="plan-premium"]')
    await premiumPlan.click()
    await expect(page.locator('[data-testid="plan-details"]')).toBeVisible()
    await expect(page.locator('[data-testid="plan-details"]')).toContainText('Premium')
  })
})

describe('üîê Authentication Paths', () => {
  test('–¥–æ–ª–∂–µ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø—É—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', async ({ page }) => {
    await page.goto('/')
    
    // –®–∞–≥ 1: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç "Get Started"
    await page.click('[data-testid="get-started-button"]')
    await expect(page.locator('[data-testid="login-form"]')).toBeVisible()
    
    // –®–∞–≥ 2: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    await page.click('[data-testid="sign-up-link"]')
    await expect(page.locator('[data-testid="signup-form"]')).toBeVisible()
    
    // –®–∞–≥ 3: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø–æ–ª–Ω—è–µ—Ç —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    await page.fill('[data-testid="signup-email"]', 'newuser@example.com')
    await page.fill('[data-testid="signup-password"]', 'SecurePassword123!')
    await page.fill('[data-testid="signup-name"]', 'New User')
    await page.check('[data-testid="terms-checkbox"]')
    
    // –®–∞–≥ 4: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    await page.click('[data-testid="signup-button"]')
    
    // –®–∞–≥ 5: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    await expect(page.locator('[data-testid="signup-success"]')).toBeVisible()
    await expect(page.locator('[data-testid="signup-success"]')).toContainText('Account created successfully')
    
    // –®–∞–≥ 6: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≤—Ö–æ–¥—É
    await page.click('[data-testid="go-to-login-button"]')
    await expect(page.locator('[data-testid="login-form"]')).toBeVisible()
  })

  test('–¥–æ–ª–∂–µ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø—É—Ç—å –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É', async ({ page }) => {
    await page.goto('/')
    
    // –®–∞–≥ 1: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç "Get Started"
    await page.click('[data-testid="get-started-button"]')
    await expect(page.locator('[data-testid="login-form"]')).toBeVisible()
    
    // –®–∞–≥ 2: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞
    await page.fill('[data-testid="login-email"]', 'user@example.com')
    await page.fill('[data-testid="login-password"]', 'password123')
    await page.check('[data-testid="remember-me-checkbox"]')
    
    // –®–∞–≥ 3: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞
    await page.click('[data-testid="login-button"]')
    
    // –®–∞–≥ 4: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    await expect(page.locator('[data-testid="planner-content"]')).toBeVisible()
    await expect(page.locator('[data-testid="welcome-message"]')).toContainText('Welcome back!')
  })

  test('–¥–æ–ª–∂–µ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø—É—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è', async ({ page }) => {
    await page.goto('/')
    
    // –®–∞–≥ 1: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≤—Ö–æ–¥—É
    await page.click('[data-testid="get-started-button"]')
    await expect(page.locator('[data-testid="login-form"]')).toBeVisible()
    
    // –®–∞–≥ 2: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç "Forgot Password"
    await page.click('[data-testid="forgot-password-link"]')
    await expect(page.locator('[data-testid="forgot-password-form"]')).toBeVisible()
    
    // –®–∞–≥ 3: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç email
    await page.fill('[data-testid="forgot-password-email"]', 'user@example.com')
    await page.click('[data-testid="reset-password-button"]')
    
    // –®–∞–≥ 4: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await expect(page.locator('[data-testid="reset-password-success"]')).toBeVisible()
    await expect(page.locator('[data-testid="reset-password-success"]')).toContainText('Password reset email sent')
    
    // –®–∞–≥ 5: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫ –≤—Ö–æ–¥—É
    await page.click('[data-testid="back-to-login-button"]')
    await expect(page.locator('[data-testid="login-form"]')).toBeVisible()
  })
})

describe('üìã Task Management Paths', () => {
  test('–¥–æ–ª–∂–µ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø—É—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏', async ({ page }) => {
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
      localStorage.setItem('auth-token', 'mock-token')
      localStorage.setItem('user', JSON.stringify({
        id: 'user-1',
        email: 'user@example.com',
        name: 'Test User',
        subscription: 'free'
      }))
    })
    
    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // –®–∞–≥ 1: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç –ø—É—Å—Ç–æ–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    await expect(page.locator('[data-testid="planner-content"]')).toBeVisible()
    await expect(page.locator('[data-testid="add-task-button"]')).toBeVisible()
    
    // –®–∞–≥ 2: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
    await page.click('[data-testid="add-task-button"]')
    await expect(page.locator('[data-testid="task-form"]')).toBeVisible()
    
    // –®–∞–≥ 3: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø–æ–ª–Ω—è–µ—Ç —Ñ–æ—Ä–º—É –∑–∞–¥–∞—á–∏
    await page.fill('[data-testid="task-title"]', 'New Task')
    await page.fill('[data-testid="task-description"]', 'This is a new task')
    await page.selectOption('[data-testid="task-priority"]', 'high')
    await page.selectOption('[data-testid="task-category"]', 'work')
    await page.fill('[data-testid="task-due-date"]', '2024-12-31')
    
    // –®–∞–≥ 4: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–¥–∞—á—É
    await page.click('[data-testid="save-task-button"]')
    
    // –®–∞–≥ 5: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç —Å–æ–∑–¥–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É
    await expect(page.locator('.task-card')).toContainText('New Task')
    await expect(page.locator('.task-card')).toContainText('This is a new task')
    await expect(page.locator('.task-card')).toContainText('high')
    await expect(page.locator('.task-card')).toContainText('work')
  })

  test('–¥–æ–ª–∂–µ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø—É—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏', async ({ page }) => {
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
      localStorage.setItem('auth-token', 'mock-token')
      localStorage.setItem('user', JSON.stringify({
        id: 'user-1',
        email: 'user@example.com',
        name: 'Test User',
        subscription: 'free'
      }))
    })
    
    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // –®–∞–≥ 1: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á—É
    await page.click('[data-testid="add-task-button"]')
    await page.fill('[data-testid="task-title"]', 'Original Task')
    await page.selectOption('[data-testid="task-priority"]', 'medium')
    await page.selectOption('[data-testid="task-category"]', 'personal')
    await page.click('[data-testid="save-task-button"]')
    
    // –®–∞–≥ 2: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç —Å–æ–∑–¥–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É
    await expect(page.locator('.task-card')).toContainText('Original Task')
    
    // –®–∞–≥ 3: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –Ω–∞ –∑–∞–¥–∞—á—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await page.locator('.task-card').click()
    await expect(page.locator('[data-testid="task-edit-form"]')).toBeVisible()
    
    // –®–∞–≥ 4: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    await page.fill('[data-testid="task-title"]', 'Updated Task')
    await page.fill('[data-testid="task-description"]', 'This is an updated task')
    await page.selectOption('[data-testid="task-priority"]', 'high')
    await page.selectOption('[data-testid="task-category"]', 'work')
    
    // –®–∞–≥ 5: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è
    await page.click('[data-testid="save-task-button"]')
    
    // –®–∞–≥ 6: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É
    await expect(page.locator('.task-card')).toContainText('Updated Task')
    await expect(page.locator('.task-card')).toContainText('This is an updated task')
    await expect(page.locator('.task-card')).toContainText('high')
    await expect(page.locator('.task-card')).toContainText('work')
  })

  test('–¥–æ–ª–∂–µ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø—É—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏', async ({ page }) => {
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
      localStorage.setItem('auth-token', 'mock-token')
      localStorage.setItem('user', JSON.stringify({
        id: 'user-1',
        email: 'user@example.com',
        name: 'Test User',
        subscription: 'free'
      }))
    })
    
    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // –®–∞–≥ 1: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á—É
    await page.click('[data-testid="add-task-button"]')
    await page.fill('[data-testid="task-title"]', 'Task to Complete')
    await page.selectOption('[data-testid="task-priority"]', 'high')
    await page.selectOption('[data-testid="task-category"]', 'work')
    await page.click('[data-testid="save-task-button"]')
    
    // –®–∞–≥ 2: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç –∑–∞–¥–∞—á—É –∫–∞–∫ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é
    const taskCard = page.locator('.task-card')
    await expect(taskCard).toContainText('Task to Complete')
    await expect(taskCard.locator('[data-testid="task-completed"]')).not.toBeChecked()
    
    // –®–∞–≥ 3: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    await taskCard.locator('[data-testid="complete-task-button"]').click()
    
    // –®–∞–≥ 4: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç –∑–∞–¥–∞—á—É –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é
    await expect(taskCard.locator('[data-testid="task-completed"]')).toBeChecked()
    await expect(taskCard).toHaveClass(/completed/)
    
    // –®–∞–≥ 5: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await expect(page.locator('[data-testid="completed-count"]')).toContainText('1')
    await expect(page.locator('[data-testid="pending-count"]')).toContainText('0')
  })

  test('–¥–æ–ª–∂–µ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø—É—Ç—å —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏', async ({ page }) => {
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
      localStorage.setItem('auth-token', 'mock-token')
      localStorage.setItem('user', JSON.stringify({
        id: 'user-1',
        email: 'user@example.com',
        name: 'Test User',
        subscription: 'free'
      }))
    })
    
    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // –®–∞–≥ 1: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á—É
    await page.click('[data-testid="add-task-button"]')
    await page.fill('[data-testid="task-title"]', 'Task to Delete')
    await page.selectOption('[data-testid="task-priority"]', 'medium')
    await page.selectOption('[data-testid="task-category"]', 'personal')
    await page.click('[data-testid="save-task-button"]')
    
    // –®–∞–≥ 2: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç —Å–æ–∑–¥–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É
    await expect(page.locator('.task-card')).toContainText('Task to Delete')
    
    // –®–∞–≥ 3: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è
    await page.locator('.task-card').locator('[data-testid="delete-task-button"]').click()
    
    // –®–∞–≥ 4: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
    await expect(page.locator('[data-testid="delete-confirmation"]')).toBeVisible()
    await expect(page.locator('[data-testid="delete-confirmation"]')).toContainText('Are you sure you want to delete this task?')
    
    // –®–∞–≥ 5: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ
    await page.click('[data-testid="confirm-delete-button"]')
    
    // –®–∞–≥ 6: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç, —á—Ç–æ –∑–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞
    await expect(page.locator('.task-card')).not.toContainText('Task to Delete')
    await expect(page.locator('[data-testid="empty-state"]')).toBeVisible()
  })
})

describe('ü§ñ AI Features Paths', () => {
  test('–¥–æ–ª–∂–µ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø—É—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É–º–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏', async ({ page }) => {
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
      localStorage.setItem('auth-token', 'mock-token')
      localStorage.setItem('user', JSON.stringify({
        id: 'user-1',
        email: 'user@example.com',
        name: 'Test User',
        subscription: 'free'
      }))
    })
    
    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // –®–∞–≥ 1: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á
    const tasks = [
      { title: 'Low Priority Task', priority: 'low', category: 'personal' },
      { title: 'High Priority Task', priority: 'high', category: 'work' },
      { title: 'Medium Priority Task', priority: 'medium', category: 'health' }
    ]
    
    for (const task of tasks) {
      await page.click('[data-testid="add-task-button"]')
      await page.fill('[data-testid="task-title"]', task.title)
      await page.selectOption('[data-testid="task-priority"]', task.priority)
      await page.selectOption('[data-testid="task-category"]', task.category)
      await page.click('[data-testid="save-task-button"]')
    }
    
    // –®–∞–≥ 2: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç –∑–∞–¥–∞—á–∏ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    const taskCards = page.locator('.task-card')
    await expect(taskCards).toHaveCount(3)
    
    // –®–∞–≥ 3: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫—É —É–º–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    await page.click('[data-testid="smart-sort-button"]')
    
    // –®–∞–≥ 4: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    await expect(page.locator('[data-testid="sorting-indicator"]')).toBeVisible()
    await expect(page.locator('[data-testid="sorting-indicator"]')).toContainText('Sorting tasks...')
    
    // –®–∞–≥ 5: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    await page.waitForSelector('[data-testid="sorting-complete"]')
    await expect(page.locator('[data-testid="sorting-complete"]')).toContainText('Tasks sorted by priority')
    
    // –®–∞–≥ 6: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç –∑–∞–¥–∞—á–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    await expect(taskCards.first()).toContainText('High Priority Task')
    await expect(taskCards.nth(1)).toContainText('Medium Priority Task')
    await expect(taskCards.nth(2)).toContainText('Low Priority Task')
  })

  test('–¥–æ–ª–∂–µ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø—É—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è –ò–ò –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π', async ({ page }) => {
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
      localStorage.setItem('auth-token', 'mock-token')
      localStorage.setItem('user', JSON.stringify({
        id: 'user-1',
        email: 'user@example.com',
        name: 'Test User',
        subscription: 'free'
      }))
    })
    
    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // –®–∞–≥ 1: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á
    const tasks = [
      { title: 'Work Task 1', priority: 'high', category: 'work' },
      { title: 'Personal Task 1', priority: 'medium', category: 'personal' },
      { title: 'Health Task 1', priority: 'low', category: 'health' }
    ]
    
    for (const task of tasks) {
      await page.click('[data-testid="add-task-button"]')
      await page.fill('[data-testid="task-title"]', task.title)
      await page.selectOption('[data-testid="task-priority"]', task.priority)
      await page.selectOption('[data-testid="task-category"]', task.category)
      await page.click('[data-testid="save-task-button"]')
    }
    
    // –®–∞–≥ 2: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    await page.click('[data-testid="generate-suggestions-button"]')
    
    // –®–∞–≥ 3: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    await expect(page.locator('[data-testid="suggestions-loading"]')).toBeVisible()
    await expect(page.locator('[data-testid="suggestions-loading"]')).toContainText('Generating AI suggestions...')
    
    // –®–∞–≥ 4: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    await page.waitForSelector('[data-testid="ai-suggestions"]')
    await expect(page.locator('[data-testid="ai-suggestions"]')).toBeVisible()
    
    const suggestionCards = page.locator('.suggestion-card')
    await expect(suggestionCards).toHaveCount.greaterThan(0)
    
    // –®–∞–≥ 5: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    const firstSuggestion = suggestionCards.first()
    await expect(firstSuggestion).toContainText('suggestion')
    await expect(firstSuggestion.locator('[data-testid="suggestion-title"]')).toBeVisible()
    await expect(firstSuggestion.locator('[data-testid="suggestion-description"]')).toBeVisible()
    await expect(firstSuggestion.locator('[data-testid="suggestion-confidence"]')).toBeVisible()
    
    // –®–∞–≥ 6: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–º–µ–Ω—è–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
    await firstSuggestion.locator('[data-testid="apply-suggestion-button"]').click()
    
    // –®–∞–≥ 7: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
    await expect(page.locator('[data-testid="suggestion-applied"]')).toBeVisible()
    await expect(page.locator('[data-testid="suggestion-applied"]')).toContainText('Suggestion applied successfully')
  })

  test('–¥–æ–ª–∂–µ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø—É—Ç—å –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', async ({ page }) => {
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
      localStorage.setItem('auth-token', 'mock-token')
      localStorage.setItem('user', JSON.stringify({
        id: 'user-1',
        email: 'user@example.com',
        name: 'Test User',
        subscription: 'free'
      }))
    })
    
    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // –®–∞–≥ 1: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á
    const tasks = [
      { title: 'Completed Task 1', priority: 'high', category: 'work', completed: true },
      { title: 'Completed Task 2', priority: 'medium', category: 'personal', completed: true },
      { title: 'Pending Task 1', priority: 'low', category: 'health', completed: false },
      { title: 'Pending Task 2', priority: 'high', category: 'work', completed: false }
    ]
    
    for (const task of tasks) {
      await page.click('[data-testid="add-task-button"]')
      await page.fill('[data-testid="task-title"]', task.title)
      await page.selectOption('[data-testid="task-priority"]', task.priority)
      await page.selectOption('[data-testid="task-category"]', task.category)
      
      if (task.completed) {
        await page.check('[data-testid="task-completed"]')
      }
      
      await page.click('[data-testid="save-task-button"]')
    }
    
    // –®–∞–≥ 2: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫—É –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    await page.click('[data-testid="analyze-productivity-button"]')
    
    // –®–∞–≥ 3: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–Ω–∞–ª–∏–∑–∞
    await expect(page.locator('[data-testid="analysis-loading"]')).toBeVisible()
    await expect(page.locator('[data-testid="analysis-loading"]')).toContainText('Analyzing productivity...')
    
    // –®–∞–≥ 4: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
    await page.waitForSelector('[data-testid="productivity-analysis"]')
    await expect(page.locator('[data-testid="productivity-analysis"]')).toBeVisible()
    
    // –®–∞–≥ 5: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç –æ–±—â–∏–π –±–∞–ª–ª –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    const productivityScore = page.locator('[data-testid="productivity-score"]')
    await expect(productivityScore).toBeVisible()
    await expect(productivityScore).toContainText('50%') // 2 –∏–∑ 4 –∑–∞–¥–∞—á –∑–∞–≤–µ—Ä—à–µ–Ω—ã
    
    // –®–∞–≥ 6: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç –∏–Ω—Å–∞–π—Ç—ã
    const insights = page.locator('[data-testid="productivity-insights"]')
    await expect(insights).toBeVisible()
    
    const insightItems = page.locator('[data-testid="insight-item"]')
    await expect(insightItems).toHaveCount.greaterThan(0)
    
    // –®–∞–≥ 7: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    const recommendations = page.locator('[data-testid="productivity-recommendations"]')
    await expect(recommendations).toBeVisible()
    
    const recommendationItems = page.locator('[data-testid="recommendation-item"]')
    await expect(recommendationItems).toHaveCount.greaterThan(0)
  })
})

describe('‚öôÔ∏è Settings Navigation Paths', () => {
  test('–¥–æ–ª–∂–µ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø—É—Ç—å –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø—Ä–æ—Ñ–∏–ª—è', async ({ page }) => {
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
      localStorage.setItem('auth-token', 'mock-token')
      localStorage.setItem('user', JSON.stringify({
        id: 'user-1',
        email: 'user@example.com',
        name: 'Test User',
        subscription: 'free'
      }))
    })
    
    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // –®–∞–≥ 1: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
    await page.click('[data-testid="settings-button"]')
    await expect(page.locator('[data-testid="settings-modal"]')).toBeVisible()
    
    // –®–∞–≥ 2: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø—Ä–æ—Ñ–∏–ª—è
    await page.click('[data-testid="profile-tab"]')
    await expect(page.locator('[data-testid="profile-settings"]')).toBeVisible()
    
    // –®–∞–≥ 3: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
    await expect(page.locator('[data-testid="user-name"]')).toHaveValue('Test User')
    await expect(page.locator('[data-testid="user-email"]')).toHaveValue('user@example.com')
    
    // –®–∞–≥ 4: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
    await page.fill('[data-testid="user-name"]', 'Updated User Name')
    await page.fill('[data-testid="user-email"]', 'updated@example.com')
    
    // –®–∞–≥ 5: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è
    await page.click('[data-testid="save-profile-button"]')
    
    // –®–∞–≥ 6: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    await expect(page.locator('[data-testid="profile-saved"]')).toBeVisible()
    await expect(page.locator('[data-testid="profile-saved"]')).toContainText('Profile updated successfully')
  })

  test('–¥–æ–ª–∂–µ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø—É—Ç—å –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ò–ò', async ({ page }) => {
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
      localStorage.setItem('auth-token', 'mock-token')
      localStorage.setItem('user', JSON.stringify({
        id: 'user-1',
        email: 'user@example.com',
        name: 'Test User',
        subscription: 'premium'
      }))
    })
    
    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // –®–∞–≥ 1: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    await page.click('[data-testid="settings-button"]')
    await expect(page.locator('[data-testid="settings-modal"]')).toBeVisible()
    
    // –®–∞–≥ 2: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ò–ò
    await page.click('[data-testid="ai-preferences-tab"]')
    await expect(page.locator('[data-testid="ai-preferences-settings"]')).toBeVisible()
    
    // –®–∞–≥ 3: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ò–ò –º–æ–¥–µ–ª–∏
    const aiModelSelect = page.locator('[data-testid="ai-model-select"]')
    await expect(aiModelSelect).toBeVisible()
    
    const aiModelOptions = page.locator('[data-testid="ai-model-option"]')
    await expect(aiModelOptions).toHaveCount.greaterThan(1)
    
    // –®–∞–≥ 4: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –ò–ò –º–æ–¥–µ–ª—å
    await page.selectOption('[data-testid="ai-model-select"]', 'gpt-4o-mini')
    
    // –®–∞–≥ 5: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ò–ò
    await page.fill('[data-testid="ai-temperature"]', '0.7')
    await page.fill('[data-testid="ai-max-tokens"]', '2000')
    await page.check('[data-testid="ai-suggestions-enabled"]')
    await page.check('[data-testid="ai-analysis-enabled"]')
    
    // –®–∞–≥ 6: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–ò
    await page.click('[data-testid="save-ai-preferences-button"]')
    
    // –®–∞–≥ 7: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    await expect(page.locator('[data-testid="ai-preferences-saved"]')).toBeVisible()
    await expect(page.locator('[data-testid="ai-preferences-saved"]')).toContainText('AI preferences updated successfully')
  })
})