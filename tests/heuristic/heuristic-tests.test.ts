/**
 * üîç –≠–í–†–ò–°–¢–ò–ß–ï–°–ö–ò–ï –¢–ï–°–¢–´
 * –ü–æ–∫—Ä—ã—Ç–∏–µ: –ø—Ä–∞–≤–∏–ª–∞ –ù–∏–ª—å—Å–µ–Ω–∞, UX –ø—Ä–∏–Ω—Ü–∏–ø—ã, –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ—Å—Ç—å
 */

import { test, expect, Page } from '@playwright/test'

describe('üìã Nielsen Heuristics Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã', async ({ page }) => {
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–Ω–∏–º–∞–µ—Ç, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç
    const h1 = page.locator('h1')
    await expect(h1).toBeVisible()
    
    const title = await h1.textContent()
    expect(title).toContain('Personal Productivity AI')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ –¥–µ–π—Å—Ç–≤–∏—è—Ö
    await page.fill('[data-testid="email-input"]', 'test@example.com')
    await page.click('[data-testid="subscribe-button"]')
    
    const statusElement = page.locator('[data-testid="subscription-status"]')
    await expect(statusElement).toBeVisible()
    
    const statusText = await statusElement.textContent()
    expect(statusText).toBeTruthy()
  })

  test('–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–Ω–∞–∫–æ–º—ã–π —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', async ({ page }) => {
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ–Ω—è—Ç–Ω—ã–π —è–∑—ã–∫
    const textElements = page.locator('h1, h2, h3, p, button, a')
    const elementCount = await textElements.count()
    
    for (let i = 0; i < elementCount; i++) {
      const element = textElements.nth(i)
      const text = await element.textContent()
      const isVisible = await element.isVisible()
      
      if (isVisible && text && text.trim()) {
        // –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–Ω—è—Ç–Ω—ã–º –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
        const technicalTerms = ['API', 'SDK', 'Framework', 'Library', 'Database']
        const hasTechnicalTerms = technicalTerms.some(term => 
          text.includes(term)
        )
        
        if (hasTechnicalTerms) {
          // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã, –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
          const parent = element.locator('..')
          const parentText = await parent.textContent()
          expect(parentText?.length).toBeGreaterThan(text.length)
        }
      }
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –ø–æ–∑–≤–æ–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É', async ({ page }) => {
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
      localStorage.setItem('auth-token', 'mock-token')
      localStorage.setItem('user', JSON.stringify({
        id: 'user-1',
        email: 'test@example.com',
        name: 'Test User',
        subscription: 'free'
      }))
    })
    
    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è
    await page.click('[data-testid="add-task-button"]')
    await expect(page.locator('[data-testid="task-modal"]')).toBeVisible()
    
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∑–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª
    await page.keyboard.press('Escape')
    await expect(page.locator('[data-testid="task-modal"]')).not.toBeVisible()
    
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
    await page.goBack()
    await expect(page.locator('body')).toBeVisible()
  })

  test('–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–º', async ({ page }) => {
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —Å—Ç–∏–ª—å
    const buttons = page.locator('button')
    const buttonCount = await buttons.count()
    
    for (let i = 0; i < buttonCount; i++) {
      const button = buttons.nth(i)
      const isVisible = await button.isVisible()
      
      if (isVisible) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –∏–º–µ–µ—Ç —Ä–∞–∑—É–º–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        const boundingBox = await button.boundingBox()
        if (boundingBox) {
          expect(boundingBox.width).toBeGreaterThan(0)
          expect(boundingBox.height).toBeGreaterThan(0)
        }
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Å—Å—ã–ª–∫–∏ –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —Å—Ç–∏–ª—å
    const links = page.locator('a')
    const linkCount = await links.count()
    
    for (let i = 0; i < linkCount; i++) {
      const link = links.nth(i)
      const isVisible = await link.isVisible()
      
      if (isVisible) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –∏–º–µ–µ—Ç —Å—Ç–∏–ª–∏
        const styles = await link.evaluate(el => {
          const computedStyles = window.getComputedStyle(el)
          return {
            color: computedStyles.color,
            textDecoration: computedStyles.textDecoration
          }
        })
        
        expect(styles.color).toBeTruthy()
        expect(styles.textDecoration).toBeTruthy()
      }
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞—Ç—å –æ—à–∏–±–∫–∏', async ({ page }) => {
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–µ–π
    const emailInput = page.locator('[data-testid="email-input"]')
    const inputType = await emailInput.getAttribute('type')
    expect(inputType).toBe('email')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const placeholder = await emailInput.getAttribute('placeholder')
    expect(placeholder).toContain('email')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
    await page.fill('[data-testid="email-input"]', 'invalid-email')
    await page.click('[data-testid="subscribe-button"]')
    
    const errorMessage = page.locator('.error-message')
    if (await errorMessage.count() > 0) {
      const errorText = await errorMessage.textContent()
      expect(errorText).toContain('email')
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ª–µ–≥–∫–æ —É–∑–Ω–∞–≤–∞–µ–º—ã–º', async ({ page }) => {
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —á–µ—Ç–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    const h1 = page.locator('h1')
    await expect(h1).toBeVisible()
    
    const title = await h1.textContent()
    expect(title).toContain('Personal Productivity AI')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
    const description = page.locator('p')
    const descriptionCount = await description.count()
    expect(descriptionCount).toBeGreaterThan(0)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é
    const ctaButton = page.locator('[data-testid="subscribe-button"]')
    await expect(ctaButton).toBeVisible()
    
    const ctaText = await ctaButton.textContent()
    expect(ctaText).toContain('–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è')
  })

  test('–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≥–∏–±–∫–∏–º –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º', async ({ page }) => {
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
      localStorage.setItem('auth-token', 'mock-token')
      localStorage.setItem('user', JSON.stringify({
        id: 'user-1',
        email: 'test@example.com',
        name: 'Test User',
        subscription: 'free'
      }))
    })
    
    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –±—ã—Å—Ç—Ä—ã–µ —Å–ø–æ—Å–æ–±—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
    const addButton = page.locator('[data-testid="add-task-button"]')
    await addButton.click()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É
    await page.fill('[data-testid="task-title"]', 'Test Task')
    await page.fill('[data-testid="task-description"]', 'Test Description')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
    await page.click('[data-testid="save-task-button"]')
    await expect(page.locator('[data-testid="task-modal"]')).not.toBeVisible()
  })

  test('–¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —ç—Å—Ç–µ—Ç–∏—á–Ω—ã–π –∏ –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –¥–∏–∑–∞–π–Ω', async ({ page }) => {
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∏–∑–∞–π–Ω –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω
    const elements = page.locator('*')
    const elementCount = await elements.count()
    expect(elementCount).toBeLessThan(1000) // –ù–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–µ–ª–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
    const body = page.locator('body')
    const bodyStyles = await body.evaluate(el => {
      const styles = window.getComputedStyle(el)
      return {
        padding: styles.padding,
        margin: styles.margin
      }
    })
    
    expect(bodyStyles.padding).toBeTruthy()
    expect(bodyStyles.margin).toBeTruthy()
  })

  test('–¥–æ–ª–∂–µ–Ω –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å, –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å –æ—à–∏–±–∫–∏', async ({ page }) => {
    await page.goto('/')
    
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è —Å –Ω–µ–≤–µ—Ä–Ω—ã–º email
    await page.fill('[data-testid="email-input"]', 'invalid-email')
    await page.click('[data-testid="subscribe-button"]')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    const errorMessage = page.locator('.error-message')
    if (await errorMessage.count() > 0) {
      const errorText = await errorMessage.textContent()
      expect(errorText).toContain('email')
      expect(errorText).toContain('–Ω–µ–≤–µ—Ä–Ω')
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É
    await page.fill('[data-testid="email-input"]', 'test@example.com')
    await page.click('[data-testid="subscribe-button"]')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—à–∏–±–∫–∞ –∏—Å—á–µ–∑–ª–∞
    if (await errorMessage.count() > 0) {
      const errorText = await errorMessage.textContent()
      expect(errorText).not.toContain('–Ω–µ–≤–µ—Ä–Ω')
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –ø–æ–º–æ—â—å –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é', async ({ page }) => {
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –ø–æ–ª–µ–π
    const emailInput = page.locator('[data-testid="email-input"]')
    const placeholder = await emailInput.getAttribute('placeholder')
    expect(placeholder).toContain('email')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –ø–æ–º–æ—â—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const helpText = page.locator('[data-testid*="help"], .help-text')
    if (await helpText.count() > 0) {
      await expect(helpText).toBeVisible()
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ç–µ
    const description = page.locator('p')
    const descriptionCount = await description.count()
    expect(descriptionCount).toBeGreaterThan(0)
  })
})

describe('üéØ UX Principles Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω —Å–ª–µ–¥–æ–≤–∞—Ç—å –ø—Ä–∏–Ω—Ü–∏–ø—É "–º–µ–Ω—å—à–µ –∑–Ω–∞—á–∏—Ç –±–æ–ª—å—à–µ"', async ({ page }) => {
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const elements = page.locator('*')
    const elementCount = await elements.count()
    expect(elementCount).toBeLessThan(1000)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    const essentialElements = [
      'h1',
      '[data-testid="email-input"]',
      '[data-testid="subscribe-button"]'
    ]
    
    for (const selector of essentialElements) {
      const element = page.locator(selector)
      await expect(element).toBeVisible()
    }
  })

  test('–¥–æ–ª–∂–µ–Ω —Å–ª–µ–¥–æ–≤–∞—Ç—å –ø—Ä–∏–Ω—Ü–∏–ø—É "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ü–µ–Ω—Ç—Ä–µ"', async ({ page }) => {
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const h1 = page.locator('h1')
    const title = await h1.textContent()
    expect(title).toContain('Personal Productivity AI')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é
    const ctaButton = page.locator('[data-testid="subscribe-button"]')
    await expect(ctaButton).toBeVisible()
    
    const ctaText = await ctaButton.textContent()
    expect(ctaText).toContain('–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è')
  })

  test('–¥–æ–ª–∂–µ–Ω —Å–ª–µ–¥–æ–≤–∞—Ç—å –ø—Ä–∏–Ω—Ü–∏–ø—É "–ø—Ä–æ—Å—Ç–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"', async ({ page }) => {
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–æ—Å—Ç–æ–π
    const form = page.locator('form')
    await expect(form).toBeVisible()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è
    const inputs = page.locator('input')
    const inputCount = await inputs.count()
    expect(inputCount).toBeLessThan(5) // –ù–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ª–µ–π
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
    const buttons = page.locator('button')
    const buttonCount = await buttons.count()
    expect(buttonCount).toBeLessThan(5) // –ù–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∫–Ω–æ–ø–æ–∫
  })

  test('–¥–æ–ª–∂–µ–Ω —Å–ª–µ–¥–æ–≤–∞—Ç—å –ø—Ä–∏–Ω—Ü–∏–ø—É "–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ—Å—Ç–∏"', async ({ page }) => {
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç—ã –≤–µ–¥—É—Ç —Å–µ–±—è –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ
    const emailInput = page.locator('[data-testid="email-input"]')
    const inputType = await emailInput.getAttribute('type')
    expect(inputType).toBe('email')
    
    const subscribeButton = page.locator('[data-testid="subscribe-button"]')
    const buttonType = await subscribeButton.getAttribute('type')
    expect(buttonType).toBe('submit')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –∏–º–µ–µ—Ç –ø–æ–Ω—è—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç
    const buttonText = await subscribeButton.textContent()
    expect(buttonText).toContain('–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è')
  })

  test('–¥–æ–ª–∂–µ–Ω —Å–ª–µ–¥–æ–≤–∞—Ç—å –ø—Ä–∏–Ω—Ü–∏–ø—É "–æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"', async ({ page }) => {
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ –¥–µ–π—Å—Ç–≤–∏—è—Ö
    await page.fill('[data-testid="email-input"]', 'test@example.com')
    await page.click('[data-testid="subscribe-button"]')
    
    const statusElement = page.locator('[data-testid="subscription-status"]')
    await expect(statusElement).toBeVisible()
    
    const statusText = await statusElement.textContent()
    expect(statusText).toBeTruthy()
  })

  test('–¥–æ–ª–∂–µ–Ω —Å–ª–µ–¥–æ–≤–∞—Ç—å –ø—Ä–∏–Ω—Ü–∏–ø—É "–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"', async ({ page }) => {
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å alt –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    const images = page.locator('img')
    const imageCount = await images.count()
    
    for (let i = 0; i < imageCount; i++) {
      const img = images.nth(i)
      const alt = await img.getAttribute('alt')
      const role = await img.getAttribute('role')
      
      // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∏–º–µ—Ç—å alt –∞—Ç—Ä–∏–±—É—Ç –∏–ª–∏ role="presentation"
      expect(alt !== null || role === 'presentation').toBeTruthy()
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å ARIA –∞—Ç—Ä–∏–±—É—Ç—ã
    const ariaElements = page.locator('[aria-label], [aria-describedby], [aria-labelledby]')
    const ariaCount = await ariaElements.count()
    expect(ariaCount).toBeGreaterThan(0)
  })
})

describe('üß† Cognitive Load Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –º–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É', async ({ page }) => {
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    const textElements = page.locator('h1, h2, h3, p')
    const textCount = await textElements.count()
    expect(textCount).toBeLessThan(20) // –ù–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —á–µ—Ç–∫–∞—è –∏–µ—Ä–∞—Ä—Ö–∏—è
    const h1 = page.locator('h1')
    await expect(h1).toBeVisible()
    
    const h2 = page.locator('h2')
    if (await h2.count() > 0) {
      await expect(h2).toBeVisible()
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å —Å–≤—è–∑–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é', async ({ page }) => {
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–æ—Ä–º–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–∞
    const form = page.locator('form')
    await expect(form).toBeVisible()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—è —Ñ–æ—Ä–º—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è —Ä—è–¥–æ–º
    const emailInput = page.locator('[data-testid="email-input"]')
    const subscribeButton = page.locator('[data-testid="subscribe-button"]')
    
    const emailBox = await emailInput.boundingBox()
    const buttonBox = await subscribeButton.boundingBox()
    
    if (emailBox && buttonBox) {
      // –ü–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±–ª–∏–∑–∫–æ –¥—Ä—É–≥ –∫ –¥—Ä—É–≥—É
      const distance = Math.abs(emailBox.y - buttonBox.y)
      expect(distance).toBeLessThan(100) // –ú–∞–∫—Å–∏–º—É–º 100px –º–µ–∂–¥—É –ø–æ–ª—è–º–∏
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–Ω–∞–∫–æ–º—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã', async ({ page }) => {
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–æ—Ä–º–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —Å–ª–µ–¥—É–µ—Ç –∑–Ω–∞–∫–æ–º–æ–º—É –ø–∞—Ç—Ç–µ—Ä–Ω—É
    const form = page.locator('form')
    await expect(form).toBeVisible()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –ø–æ–ª–µ email
    const emailInput = page.locator('[data-testid="email-input"]')
    await expect(emailInput).toBeVisible()
    
    const inputType = await emailInput.getAttribute('type')
    expect(inputType).toBe('email')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
    const subscribeButton = page.locator('[data-testid="subscribe-button"]')
    await expect(subscribeButton).toBeVisible()
    
    const buttonType = await subscribeButton.getAttribute('type')
    expect(buttonType).toBe('submit')
  })
})

describe('üé® Visual Design Heuristics Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —á–µ—Ç–∫—É—é –≤–∏–∑—É–∞–ª—å–Ω—É—é –∏–µ—Ä–∞—Ä—Ö–∏—é', async ({ page }) => {
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–¥—É—Ç –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    const headings = page.locator('h1, h2, h3, h4, h5, h6')
    const headingCount = await headings.count()
    
    for (let i = 0; i < headingCount; i++) {
      const heading = headings.nth(i)
      const tagName = await heading.evaluate(el => el.tagName.toLowerCase())
      const level = parseInt(tagName.substring(1))
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Ä–æ–≤–µ–Ω—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è
      if (i > 0) {
        const prevHeading = headings.nth(i - 1)
        const prevTagName = await prevHeading.evaluate(el => el.tagName.toLowerCase())
        const prevLevel = parseInt(prevTagName.substring(1))
        
        expect(level).toBeLessThanOrEqual(prevLevel + 1)
      }
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–µ —Ü–≤–µ—Ç–∞', async ({ page }) => {
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–≤–µ—Ç–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã
    const elements = page.locator('h1, h2, h3, p, button, a')
    const elementCount = await elements.count()
    
    const colors = new Set()
    
    for (let i = 0; i < elementCount; i++) {
      const element = elements.nth(i)
      const isVisible = await element.isVisible()
      
      if (isVisible) {
        const color = await element.evaluate(el => {
          return window.getComputedStyle(el).color
        })
        
        colors.add(color)
      }
    }
    
    // –ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ä–∞–∑–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤
    expect(colors.size).toBeLessThan(10)
  })

  test('–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã', async ({ page }) => {
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —à—Ä–∏—Ñ—Ç—ã –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã
    const elements = page.locator('h1, h2, h3, p, button, a')
    const elementCount = await elements.count()
    
    const fonts = new Set()
    
    for (let i = 0; i < elementCount; i++) {
      const element = elements.nth(i)
      const isVisible = await element.isVisible()
      
      if (isVisible) {
        const fontFamily = await element.evaluate(el => {
          return window.getComputedStyle(el).fontFamily
        })
        
        fonts.add(fontFamily)
      }
    }
    
    // –ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ä–∞–∑–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤
    expect(fonts.size).toBeLessThan(5)
  })
})