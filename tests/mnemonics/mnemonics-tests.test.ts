/**
 * üß† –¢–ï–°–¢–´ –ù–ê –û–°–ù–û–í–ï –ú–ù–ï–ú–û–ù–ò–ö
 * –ü–æ–∫—Ä—ã—Ç–∏–µ: –∑–∞–ø–æ–º–∏–Ω–∞–µ–º–æ—Å—Ç—å, –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏, –ø–∞—Ç—Ç–µ—Ä–Ω—ã
 */

import { test, expect, Page } from '@playwright/test'

describe('üî§ Alphabetical Mnemonics Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–ª—Ñ–∞–≤–∏—Ç–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏', async ({ page }) => {
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø–æ—Ä—è–¥–æ—á–µ–Ω—ã –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ
    const navItems = page.locator('nav a')
    const navCount = await navItems.count()
    
    if (navCount > 1) {
      const navTexts = []
      for (let i = 0; i < navCount; i++) {
        const text = await navItems.nth(i).textContent()
        if (text) {
          navTexts.push(text.trim())
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø–æ—Ä—è–¥–æ—á–µ–Ω—ã –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ
      const sortedTexts = [...navTexts].sort()
      expect(navTexts).toEqual(sortedTexts)
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–ª—Ñ–∞–≤–∏—Ç–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Å–ø–∏—Å–∫–æ–≤', async ({ page }) => {
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
      localStorage.setItem('auth-token', 'mock-token')
      localStorage.setItem('user', JSON.stringify({
        id: 'user-1',
        email: 'test@example.com',
        name: 'Test User',
        subscription: 'free'
      }))
    })
    
    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á
    const tasks = ['Alpha Task', 'Beta Task', 'Gamma Task']
    
    for (const task of tasks) {
      await page.click('[data-testid="add-task-button"]')
      await page.fill('[data-testid="task-title"]', task)
      await page.click('[data-testid="save-task-button"]')
      await page.waitForTimeout(100)
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∏ —É–ø–æ—Ä—è–¥–æ—á–µ–Ω—ã –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ
    const taskCards = page.locator('.task-card')
    const taskCount = await taskCards.count()
    
    if (taskCount > 1) {
      const taskTitles = []
      for (let i = 0; i < taskCount; i++) {
        const title = await taskCards.nth(i).textContent()
        if (title) {
          taskTitles.push(title.trim())
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∏ —É–ø–æ—Ä—è–¥–æ—á–µ–Ω—ã –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ
      const sortedTitles = [...taskTitles].sort()
      expect(taskTitles).toEqual(sortedTitles)
    }
  })
})

describe('üî¢ Numerical Mnemonics Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á–∏—Å–ª–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤', async ({ page }) => {
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
      localStorage.setItem('auth-token', 'mock-token')
      localStorage.setItem('user', JSON.stringify({
        id: 'user-1',
        email: 'test@example.com',
        name: 'Test User',
        subscription: 'free'
      }))
    })
    
    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —á–∏—Å–ª–æ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    const priorityElements = page.locator('[data-testid*="priority"], .priority')
    const priorityCount = await priorityElements.count()
    
    if (priorityCount > 0) {
      for (let i = 0; i < priorityCount; i++) {
        const element = priorityElements.nth(i)
        const text = await element.textContent()
        
        if (text) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤—ã—Ä–∞–∂–µ–Ω —á–∏—Å–ª–æ–º
          const priorityNumber = parseInt(text)
          expect(priorityNumber).toBeGreaterThan(0)
          expect(priorityNumber).toBeLessThanOrEqual(5) // –ú–∞–∫—Å–∏–º—É–º 5 —É—Ä–æ–≤–Ω–µ–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        }
      }
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á–∏—Å–ª–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞', async ({ page }) => {
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
      localStorage.setItem('auth-token', 'mock-token')
      localStorage.setItem('user', JSON.stringify({
        id: 'user-1',
        email: 'test@example.com',
        name: 'Test User',
        subscription: 'free'
      }))
    })
    
    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —á–∏—Å–ª–æ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    const progressElements = page.locator('[data-testid*="progress"], .progress')
    const progressCount = await progressElements.count()
    
    if (progressCount > 0) {
      for (let i = 0; i < progressCount; i++) {
        const element = progressElements.nth(i)
        const text = await element.textContent()
        
        if (text) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—ã—Ä–∞–∂–µ–Ω —á–∏—Å–ª–æ–º
          const progressNumber = parseInt(text)
          expect(progressNumber).toBeGreaterThanOrEqual(0)
          expect(progressNumber).toBeLessThanOrEqual(100) // –ú–∞–∫—Å–∏–º—É–º 100%
        }
      }
    }
  })
})

describe('üé® Color Mnemonics Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ü–≤–µ—Ç–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤', async ({ page }) => {
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
      localStorage.setItem('auth-token', 'mock-token')
      localStorage.setItem('user', JSON.stringify({
        id: 'user-1',
        email: 'test@example.com',
        name: 'Test User',
        subscription: 'free'
      }))
    })
    
    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ü–≤–µ—Ç–æ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å—Ç–∞—Ç—É—Å–∞
    const statusElements = page.locator('[data-testid*="status"], .status')
    const statusCount = await statusElements.count()
    
    if (statusCount > 0) {
      for (let i = 0; i < statusCount; i++) {
        const element = statusElements.nth(i)
        const backgroundColor = await element.evaluate(el => {
          return window.getComputedStyle(el).backgroundColor
        })
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ç—É—Å –≤—ã—Ä–∞–∂–µ–Ω —Ü–≤–µ—Ç–æ–º
        expect(backgroundColor).toBeTruthy()
        expect(backgroundColor).not.toBe('rgba(0, 0, 0, 0)')
        expect(backgroundColor).not.toBe('transparent')
      }
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ü–≤–µ—Ç–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤', async ({ page }) => {
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
      localStorage.setItem('auth-token', 'mock-token')
      localStorage.setItem('user', JSON.stringify({
        id: 'user-1',
        email: 'test@example.com',
        name: 'Test User',
        subscription: 'free'
      }))
    })
    
    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ü–≤–µ—Ç–æ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    const priorityElements = page.locator('[data-testid*="priority"], .priority')
    const priorityCount = await priorityElements.count()
    
    if (priorityCount > 0) {
      for (let i = 0; i < priorityCount; i++) {
        const element = priorityElements.nth(i)
        const backgroundColor = await element.evaluate(el => {
          return window.getComputedStyle(el).backgroundColor
        })
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤—ã—Ä–∞–∂–µ–Ω —Ü–≤–µ—Ç–æ–º
        expect(backgroundColor).toBeTruthy()
        expect(backgroundColor).not.toBe('rgba(0, 0, 0, 0)')
        expect(backgroundColor).not.toBe('transparent')
      }
    }
  })
})

describe('üî§ Acronym Mnemonics Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–∫—Ä–æ–Ω–∏–º—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞', async ({ page }) => {
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –∞–∫—Ä–æ–Ω–∏–º—ã –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
    const textElements = page.locator('h1, h2, h3, p, button, a')
    const elementCount = await textElements.count()
    
    for (let i = 0; i < elementCount; i++) {
      const element = textElements.nth(i)
      const text = await element.textContent()
      const isVisible = await element.isVisible()
      
      if (isVisible && text && text.trim()) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–∫—Ä–æ–Ω–∏–º—ã –æ–±—ä—è—Å–Ω–µ–Ω—ã
        const acronyms = ['AI', 'API', 'UI', 'UX', 'PWA']
        const hasAcronyms = acronyms.some(acronym => text.includes(acronym))
        
        if (hasAcronyms) {
          // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ä–æ–Ω–∏–º—ã, –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
          const parent = element.locator('..')
          const parentText = await parent.textContent()
          expect(parentText?.length).toBeGreaterThan(text.length)
        }
      }
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–∫—Ä–æ–Ω–∏–º—ã –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏', async ({ page }) => {
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –∞–∫—Ä–æ–Ω–∏–º—ã –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    const navItems = page.locator('nav a')
    const navCount = await navItems.count()
    
    for (let i = 0; i < navCount; i++) {
      const navItem = navItems.nth(i)
      const text = await navItem.textContent()
      const isVisible = await navItem.isVisible()
      
      if (isVisible && text && text.trim()) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–∫—Ä–æ–Ω–∏–º—ã –ø–æ–Ω—è—Ç–Ω—ã
        const acronyms = ['AI', 'API', 'UI', 'UX', 'PWA']
        const hasAcronyms = acronyms.some(acronym => text.includes(acronym))
        
        if (hasAcronyms) {
          // –ê–∫—Ä–æ–Ω–∏–º—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω—ã
          const title = await navItem.getAttribute('title')
          const ariaLabel = await navItem.getAttribute('aria-label')
          
          expect(title || ariaLabel).toBeTruthy()
        }
      }
    }
  })
})

describe('üéµ Rhyme Mnemonics Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∏—Ñ–º—ã –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è', async ({ page }) => {
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ä–∏—Ñ–º—ã –≤ —Ç–µ–∫—Å—Ç–µ
    const textElements = page.locator('h1, h2, h3, p, button, a')
    const elementCount = await textElements.count()
    
    for (let i = 0; i < elementCount; i++) {
      const element = textElements.nth(i)
      const text = await element.textContent()
      const isVisible = await element.isVisible()
      
      if (isVisible && text && text.trim()) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç —Ä–∏—Ç–º–∏—á–µ–Ω
        const words = text.split(' ')
        if (words.length > 1) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ä–∏—Ç–º –≤ —Ç–µ–∫—Å—Ç–µ
          const lastWords = words.slice(-2)
          const lastWord1 = lastWords[0]?.toLowerCase()
          const lastWord2 = lastWords[1]?.toLowerCase()
          
          if (lastWord1 && lastWord2) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–ª–æ–≤–∞ —Ä–∏—Ñ–º—É—é—Ç—Å—è
            const rhyme1 = lastWord1.slice(-2)
            const rhyme2 = lastWord2.slice(-2)
            
            if (rhyme1 === rhyme2) {
              // –ï—Å—Ç—å —Ä–∏—Ñ–º–∞
              expect(true).toBe(true)
            }
          }
        }
      }
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∏—Ç–º –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è', async ({ page }) => {
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ä–∏—Ç–º –≤ —Ç–µ–∫—Å—Ç–µ
    const textElements = page.locator('h1, h2, h3, p, button, a')
    const elementCount = await textElements.count()
    
    for (let i = 0; i < elementCount; i++) {
      const element = textElements.nth(i)
      const text = await element.textContent()
      const isVisible = await element.isVisible()
      
      if (isVisible && text && text.trim()) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –∏–º–µ–µ—Ç —Ä–∏—Ç–º
        const words = text.split(' ')
        if (words.length > 2) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ä–∏—Ç–º –≤ —Å–ª–æ–≤–∞—Ö
          const wordLengths = words.map(word => word.length)
          const hasPattern = wordLengths.some((length, index) => {
            if (index > 0) {
              return length === wordLengths[index - 1]
            }
            return false
          })
          
          if (hasPattern) {
            // –ï—Å—Ç—å —Ä–∏—Ç–º
            expect(true).toBe(true)
          }
        }
      }
    }
  })
})

describe('üîó Association Mnemonics Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è', async ({ page }) => {
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
    const textElements = page.locator('h1, h2, h3, p, button, a')
    const elementCount = await textElements.count()
    
    for (let i = 0; i < elementCount; i++) {
      const element = textElements.nth(i)
      const text = await element.textContent()
      const isVisible = await element.isVisible()
      
      if (isVisible && text && text.trim()) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏
        const associations = [
          'productivity', 'efficiency', 'organization',
          'planning', 'scheduling', 'time management',
          'tasks', 'goals', 'achievements'
        ]
        
        const hasAssociations = associations.some(association => 
          text.toLowerCase().includes(association)
        )
        
        if (hasAssociations) {
          // –ï—Å—Ç—å –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏
          expect(true).toBe(true)
        }
      }
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Ç–∞—Ñ–æ—Ä—ã –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è', async ({ page }) => {
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –º–µ—Ç–∞—Ñ–æ—Ä—ã –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
    const textElements = page.locator('h1, h2, h3, p, button, a')
    const elementCount = await textElements.count()
    
    for (let i = 0; i < elementCount; i++) {
      const element = textElements.nth(i)
      const text = await element.textContent()
      const isVisible = await element.isVisible()
      
      if (isVisible && text && text.trim()) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –º–µ—Ç–∞—Ñ–æ—Ä—ã
        const metaphors = [
          'journey', 'path', 'road', 'bridge',
          'tool', 'key', 'door', 'window',
          'light', 'guide', 'compass', 'map'
        ]
        
        const hasMetaphors = metaphors.some(metaphor => 
          text.toLowerCase().includes(metaphor)
        )
        
        if (hasMetaphors) {
          // –ï—Å—Ç—å –º–µ—Ç–∞—Ñ–æ—Ä—ã
          expect(true).toBe(true)
        }
      }
    }
  })
})

describe('üéØ Pattern Mnemonics Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è', async ({ page }) => {
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
    const elements = page.locator('h1, h2, h3, p, button, a')
    const elementCount = await elements.count()
    
    for (let i = 0; i < elementCount; i++) {
      const element = elements.nth(i)
      const isVisible = await element.isVisible()
      
      if (isVisible) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç —Å–ª–µ–¥—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—É
        const styles = await element.evaluate(el => {
          const computedStyles = window.getComputedStyle(el)
          return {
            fontSize: computedStyles.fontSize,
            fontWeight: computedStyles.fontWeight,
            color: computedStyles.color,
            backgroundColor: computedStyles.backgroundColor
          }
        })
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∏–ª–∏ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã
        expect(styles.fontSize).toBeTruthy()
        expect(styles.fontWeight).toBeTruthy()
        expect(styles.color).toBeTruthy()
      }
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –ø–∞—Ç—Ç–µ—Ä–Ω—ã', async ({ page }) => {
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    const buttons = page.locator('button')
    const buttonCount = await buttons.count()
    
    if (buttonCount > 1) {
      const buttonStyles = []
      
      for (let i = 0; i < buttonCount; i++) {
        const button = buttons.nth(i)
        const isVisible = await button.isVisible()
        
        if (isVisible) {
          const styles = await button.evaluate(el => {
            const computedStyles = window.getComputedStyle(el)
            return {
              fontSize: computedStyles.fontSize,
              fontWeight: computedStyles.fontWeight,
              color: computedStyles.color,
              backgroundColor: computedStyles.backgroundColor
            }
          })
          
          buttonStyles.push(styles)
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∏–ª–∏ –∫–Ω–æ–ø–æ–∫ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã
      if (buttonStyles.length > 1) {
        const firstButton = buttonStyles[0]
        const allConsistent = buttonStyles.every(styles => 
          styles.fontSize === firstButton.fontSize &&
          styles.fontWeight === firstButton.fontWeight &&
          styles.color === firstButton.color
        )
        
        expect(allConsistent).toBe(true)
      }
    }
  })
})

describe('üß† Memory Palace Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã–µ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏', async ({ page }) => {
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç—ã —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –ª–æ–≥–∏—á–Ω–æ
    const h1 = page.locator('h1')
    const emailInput = page.locator('[data-testid="email-input"]')
    const subscribeButton = page.locator('[data-testid="subscribe-button"]')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤–≤–µ—Ä—Ö—É
    const h1Box = await h1.boundingBox()
    const emailBox = await emailInput.boundingBox()
    const buttonBox = await subscribeButton.boundingBox()
    
    if (h1Box && emailBox && buttonBox) {
      expect(h1Box.y).toBeLessThan(emailBox.y)
      expect(emailBox.y).toBeLessThan(buttonBox.y)
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏—á–µ—Å–∫—É—é –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É', async ({ page }) => {
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω—ã
    const form = page.locator('form')
    await expect(form).toBeVisible()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—è —Ñ–æ—Ä–º—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ
    const emailInput = page.locator('[data-testid="email-input"]')
    const subscribeButton = page.locator('[data-testid="subscribe-button"]')
    
    const emailBox = await emailInput.boundingBox()
    const buttonBox = await subscribeButton.boundingBox()
    
    if (emailBox && buttonBox) {
      // –ü–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±–ª–∏–∑–∫–æ –¥—Ä—É–≥ –∫ –¥—Ä—É–≥—É
      const distance = Math.abs(emailBox.y - buttonBox.y)
      expect(distance).toBeLessThan(100) // –ú–∞–∫—Å–∏–º—É–º 100px –º–µ–∂–¥—É –ø–æ–ª—è–º–∏
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã', async ({ page }) => {
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã
    const elements = page.locator('h1, h2, h3, p, button, a')
    const elementCount = await elements.count()
    
    for (let i = 0; i < elementCount; i++) {
      const element = elements.nth(i)
      const isVisible = await element.isVisible()
      
      if (isVisible) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –∏–º–µ–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã
        const styles = await element.evaluate(el => {
          const computedStyles = window.getComputedStyle(el)
          return {
            fontSize: computedStyles.fontSize,
            fontWeight: computedStyles.fontWeight,
            color: computedStyles.color,
            backgroundColor: computedStyles.backgroundColor,
            border: computedStyles.border
          }
        })
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã
        expect(styles.fontSize).toBeTruthy()
        expect(styles.color).toBeTruthy()
      }
    }
  })
})