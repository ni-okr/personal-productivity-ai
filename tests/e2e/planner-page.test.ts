/**
 * üß† E2E –¢–ï–°–¢–´ –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê
 * –ü–æ–∫—Ä—ã—Ç–∏–µ: 100% –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
 */

import { expect, test } from '@playwright/test'

// Test data
const TEST_USER = {
    email: 'test@example.com',
    password: 'SecurePass123!',
    name: 'Test User'
}

const TEST_TASK = {
    title: 'E2E Test Task',
    description: 'This is a test task for E2E testing',
    priority: 'high',
    estimatedMinutes: 60
}

// Helper functions
async function loginUser(page: any) {
    await page.goto('/planner')
    await page.click('[data-testid="login-button"]')
    await page.fill('input[type="email"]', TEST_USER.email)
    await page.fill('input[type="password"]', TEST_USER.password)
    await page.click('button[type="submit"]')
    await page.waitForSelector('[data-testid="planner-content"]')
}

async function createTask(page: any, taskData: typeof TEST_TASK) {
    await page.click('[data-testid="add-task-button"]')
    await page.fill('[data-testid="task-title"]', taskData.title)
    await page.fill('textarea', taskData.description)
    await page.selectOption('select', taskData.priority)
    await page.fill('input[type="number"]', taskData.estimatedMinutes.toString())
    await page.click('[data-testid="save-task-button"]')
    await page.waitForSelector('.task-card')
}

async function completeTask(page: any, taskTitle: string) {
    const taskCard = page.locator('.task-card').filter({ hasText: taskTitle })
    await taskCard.locator('button[aria-label*="Toggle task"]').click()
    await page.waitForSelector('.task-card.completed')
}

test('–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞ –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', async ({ page }) => {
    await page.goto('/planner')

    await expect(page.locator('h1')).toContainText('–ò–ò-–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫')
    await expect(page.locator('button')).toContainText('–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É')
})

test('–¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏', async ({ page }) => {
    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.goto('/planner')

    // –°–∏–º—É–ª–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥
    await page.evaluate(() => {
        localStorage.setItem('auth-token', 'mock-token')
        localStorage.setItem('user', JSON.stringify({
            id: 'user-1',
            email: 'test@example.com',
            name: 'Test User',
            subscription: 'free'
        }))
    })

    await page.reload()

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è
    await expect(page.locator('[data-testid="planner-content"]')).toBeVisible()

    // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
    await createTask(page, TEST_TASK)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ –ø–æ—è–≤–∏–ª–∞—Å—å
    await expect(page.locator('.task-card')).toContainText(TEST_TASK.title)

    // –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞—á—É
    await completeTask(page, TEST_TASK.title)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª–∞—Å—å –≤ —Å–µ–∫—Ü–∏—é "–í—ã–ø–æ–ª–Ω–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è"
    await expect(page.locator('.task-card.completed')).toContainText(TEST_TASK.title)
})

test('–¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏', async ({ page }) => {
    await page.goto('/planner')

    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
        localStorage.setItem('auth-token', 'mock-token')
        localStorage.setItem('user', JSON.stringify({
            id: 'user-1',
            email: 'test@example.com',
            name: 'Test User',
            subscription: 'free'
        }))
    })

    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')

    // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
    await page.click('[data-testid="add-task-button"]')

    // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—É—Å—Ç—É—é —Ñ–æ—Ä–º—É
    await page.click('[data-testid="save-task-button"]')

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—è–≤–∏–ª–∏—Å—å –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    await expect(page.locator('.error-message')).toContainText('–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ')
})

test('–¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á –ø–æ —Å—Ç–∞—Ç—É—Å—É', async ({ page }) => {
    await page.goto('/planner')

    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
        localStorage.setItem('auth-token', 'mock-token')
        localStorage.setItem('user', JSON.stringify({
            id: 'user-1',
            email: 'test@example.com',
            name: 'Test User',
            subscription: 'free'
        }))
    })

    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')

    // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á
    await createTask(page, { ...TEST_TASK, title: 'Task 1' })
    await createTask(page, { ...TEST_TASK, title: 'Task 2' })

    // –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–¥–Ω—É –∑–∞–¥–∞—á—É
    await completeTask(page, 'Task 1')

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏–ª–∏—Å—å –ø–æ —Å–µ–∫—Ü–∏—è–º
    await expect(page.locator('[data-testid="urgent-tasks"] .task-card')).toHaveCount(1)
    await expect(page.locator('[data-testid="completed-tasks"] .task-card')).toHaveCount(1)
})

test('–¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –ò–ò –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', async ({ page }) => {
    await page.goto('/planner')

    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
        localStorage.setItem('auth-token', 'mock-token')
        localStorage.setItem('user', JSON.stringify({
            id: 'user-1',
            email: 'test@example.com',
            name: 'Test User',
            subscription: 'free'
        }))
    })

    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')

    // –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á
    await createTask(page, { ...TEST_TASK, title: 'Task 1', priority: 'urgent' })
    await createTask(page, { ...TEST_TASK, title: 'Task 2', priority: 'high' })

    await completeTask(page, 'Task 1')
    await completeTask(page, 'Task 2')

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ò–ò –∞–Ω–∞–ª–∏–∑ –ø–æ—è–≤–∏–ª—Å—è
    await expect(page.locator('[data-testid="ai-analysis"]')).toBeVisible()
    await expect(page.locator('[data-testid="productivity-score"]')).toBeVisible()
    await expect(page.locator('[data-testid="ai-insights"]')).toBeVisible()
    await expect(page.locator('[data-testid="ai-recommendations"]')).toBeVisible()
})

test('–¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å —É–º–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∑–∞–¥–∞—á', async ({ page }) => {
    await page.goto('/planner')

    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
        localStorage.setItem('auth-token', 'mock-token')
        localStorage.setItem('user', JSON.stringify({
            id: 'user-1',
            email: 'test@example.com',
            name: 'Test User',
            subscription: 'free'
        }))
    })

    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')

    // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
    await createTask(page, { ...TEST_TASK, title: 'Low Priority Task', priority: 'low' })
    await createTask(page, { ...TEST_TASK, title: 'High Priority Task', priority: 'high' })
    await createTask(page, { ...TEST_TASK, title: 'Urgent Task', priority: 'urgent' })

    // –í–∫–ª—é—á–∞–µ–º —É–º–Ω—É—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
    await page.check('input[type="checkbox"]')

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    const taskCards = page.locator('[data-testid="urgent-tasks"] .task-card')
    await expect(taskCards.nth(0)).toContainText('Urgent Task')
    await expect(taskCards.nth(1)).toContainText('High Priority Task')
})
