import { testFramework, testLogger, testMocks, testUtils } from '../framework'

/**
 * üß™ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å –ø–æ–º–æ—â—å—é –µ–¥–∏–Ω–æ–≥–æ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * 
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω: 2025-09-16T21:33:45.031Z
 * –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫: tests/e2e/landing-page.spec.ts.backup
 * 
 * –í–ê–ñ–ù–û: –í—Å–µ –Ω–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–¥–∏–Ω—ã–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫!
 * –°–º. –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é: tests/docs/TESTING_FRAMEWORK.md
 */

import { expect, test } from '@playwright/test'

test.describe('Personal Productivity AI - –õ–µ–Ω–¥–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü–∞', () => {

    test.beforeEach(async ({ page }) => {
        await page.goto('/')
    })

    test.describe('üìß Email –ø–æ–¥–ø–∏—Å–∫–∞', () => {

        test('‚úÖ –£—Å–ø–µ—à–Ω–∞—è –ø–µ—Ä–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', async ({ page }) => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
            await expect(page).toHaveTitle(/Personal Productivity AI/)

            // –ò—â–µ–º —Ñ–æ—Ä–º—É –ø–æ–¥–ø–∏—Å–∫–∏
            const emailInput = page.locator('input[type="email"]')
            const subscribeButton = page.locator('button:has-text("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è")')

            // –ó–∞–ø–æ–ª–Ω—è–µ–º email
            await emailInput.fill(`test-${Date.now()}@example.com`)

            // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥–ø–∏—Å–∫–∏
            await subscribeButton.click({ force: true })

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ—è–≤–∏–ª–æ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            await expect(page.locator('text=–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!')).toBeVisible()
        })

        test('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è email', async ({ page }) => {
            // –ò—â–µ–º —Ñ–æ—Ä–º—É –ø–æ–¥–ø–∏—Å–∫–∏
            const emailInput = page.locator('input[type="email"]')
            const subscribeButton = page.locator('button:has-text("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è")')

            // –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email
            await emailInput.fill('invalid-email')

            // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email
            await subscribeButton.click({ force: true })

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ—è–≤–∏–ª–æ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            await expect(page.locator('[data-testid="subscription-status"]')).toBeVisible({ timeout: 10000 })
            await expect(page.locator('text=–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email')).toBeVisible()
        })

        test('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email', async ({ page }) => {
            // –ò—â–µ–º —Ñ–æ—Ä–º—É –ø–æ–¥–ø–∏—Å–∫–∏
            const emailInput = page.locator('input[type="email"]')
            const subscribeButton = page.locator('button:has-text("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è")')

            // –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email
            await emailInput.fill('invalid-email')

            // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥–ø–∏—Å–∫–∏
            await subscribeButton.click({ force: true })

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ—è–≤–∏–ª–æ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            await expect(page.locator('[data-testid="subscription-status"]')).toBeVisible({ timeout: 10000 })
            await expect(page.locator('text=–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email')).toBeVisible()
        })
    })

    test.describe('üì± PWA —É—Å—Ç–∞–Ω–æ–≤–∫–∞', () => {

        test('‚úÖ PWA –∫–Ω–æ–ø–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏', async ({ page }) => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PWA
            const installButton = page.locator('button:has-text("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")')
            await expect(installButton).toBeVisible()
        })

        test('‚úÖ PWA –º–∞–Ω–∏—Ñ–µ—Å—Ç', async ({ page }) => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–∞–Ω–∏—Ñ–µ—Å—Ç –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
            const manifestResponse = await page.request.get('/manifest.json')
            expect(manifestResponse.status()).toBe(200)

            const manifest = await manifestResponse.json()
            expect(manifest.name).toBe('Personal Productivity AI')
            expect(manifest.short_name).toBe('PPAI')
        })
    })

    test.describe('üéØ –û—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã', () => {

        test('‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ', async ({ page }) => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            await expect(page.locator('h1')).toContainText('Personal Productivity AI')

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
            await expect(page.locator('text=–£–º–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á')).toBeVisible()
        })

        test('‚úÖ –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã', async ({ page }) => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º Free –ø–ª–∞–Ω
            const freePlan = page.locator('[data-testid="plan-free"]')
            await expect(freePlan).toContainText('Free')
            await expect(freePlan).toContainText('0 ‚ÇΩ')
            await expect(freePlan).toContainText('50 –∑–∞–¥–∞—á')

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º Premium –ø–ª–∞–Ω
            const premiumPlan = page.locator('[data-testid="plan-premium"]')
            await expect(premiumPlan).toContainText('Premium')
            await expect(premiumPlan).toContainText('999 ‚ÇΩ')
            await expect(premiumPlan).toContainText('500 –∑–∞–¥–∞—á')

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º Pro –ø–ª–∞–Ω
            const proPlan = page.locator('[data-testid="plan-pro"]')
            await expect(proPlan).toContainText('Pro')
            await expect(proPlan).toContainText('1999 ‚ÇΩ')
            await expect(proPlan).toContainText('–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ')
        })

        test('‚úÖ –ù–∞–≤–∏–≥–∞—Ü–∏—è', async ({ page }) => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –¥—Ä—É–≥–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            await expect(page.locator('[data-testid="planner-link"]')).toBeVisible()
            await expect(page.locator('[data-testid="roadmap-link"]')).toBeVisible()
        })
    })
})