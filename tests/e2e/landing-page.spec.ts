import { expect, test } from '@playwright/test'

test.describe('Personal Productivity AI - –õ–µ–Ω–¥–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü–∞', () => {

    test.beforeEach(async ({ page }) => {
        await page.goto('/')
    })

    test.describe('üìß Email –ø–æ–¥–ø–∏—Å–∫–∞', () => {

        test('‚úÖ –£—Å–ø–µ—à–Ω–∞—è –ø–µ—Ä–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', async ({ page }) => {
            const uniqueEmail = `test-${Date.now()}@example.com`

            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
            await page.fill('input[type="email"]', uniqueEmail)
            await page.click('button:has-text("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è")')

            // –û–∂–∏–¥–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await expect(page.locator('text=–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É')).toBeVisible({ timeout: 10000 })

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–æ—Ä–º–∞ –æ—á–∏—Å—Ç–∏–ª–∞—Å—å
            await expect(page.locator('input[type="email"]')).toHaveValue('')
        })

        test('üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å —Ç–µ–º –∂–µ email', async ({ page }) => {
            const duplicateEmail = 'duplicate@example.com'

            // –ü–µ—Ä–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
            await page.fill('input[type="email"]', duplicateEmail)
            await page.click('button:has-text("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è")')
            await expect(page.locator('text=–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É')).toBeVisible({ timeout: 10000 })

            // –ñ–¥–µ–º –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
            await page.waitForTimeout(3000)

            // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
            await page.fill('input[type="email"]', duplicateEmail)
            await page.click('button:has-text("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è")')

            // –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥—É–±–ª–∏–∫–∞—Ç–µ
            await expect(page.locator('text=—É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω')).toBeVisible({ timeout: 10000 })
        })

        test('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email', async ({ page }) => {
            const invalidEmails = [
                'invalid-email',
                'test@',
                '@example.com',
                'test..test@example.com',
                ''
            ]

            for (const email of invalidEmails) {
                await page.fill('input[type="email"]', email)
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º HTML5 –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
                const isValid = await page.evaluate(() => {
                    const input = document.querySelector('input[type="email"]') as HTMLInputElement
                    return input?.validity.valid
                })

                if (!isValid && email !== '') {
                    // HTML5 –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É
                    console.log(`HTML5 –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ä–∞–±–æ—Ç–∞–ª–∞ –¥–ª—è: ${email}`)
                    expect(isValid).toBe(false)
                } else {
                    // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ä–º—É
                    await page.click('button:has-text("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è")')
                    
                    // –ñ–¥–µ–º –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                    try {
                        await expect(page.locator('text=–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email')).toBeVisible({ timeout: 3000 })
                    } catch {
                        // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–æ—Ä–º–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∞—Å—å
                        console.log(`–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è ${email} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –±—Ä–∞—É–∑–µ—Ä–æ–º`)
                    }
                }

                // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ—Å—Ç–∞
                await page.fill('input[type="email"]', '')
                await page.waitForTimeout(500) // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
            }
        })

        test('‚è≥ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ', async ({ page }) => {
            await page.fill('input[type="email"]', `loading-test-${Date.now()}@example.com`)

            // –ö–ª–∏–∫–∞–µ–º –∏ —Å—Ä–∞–∑—É –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
            await page.click('button:has-text("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è")')

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É
            await expect(page.locator('button:disabled')).toBeVisible()

            // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            await expect(page.locator('text=–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É')).toBeVisible({ timeout: 10000 })
        })
    })

    test.describe('üîò –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏', () => {

        test('üîî –ö–Ω–æ–ø–∫–∞ "–£–≤–µ–¥–æ–º–∏—Ç—å –æ —Ä–µ–ª–∏–∑–µ" - –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ —Ñ–æ—Ä–º–µ', async ({ page }) => {
            // –ö–ª–∏–∫–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            await page.click('button:has-text("–£–≤–µ–¥–æ–º–∏—Ç—å –æ —Ä–µ–ª–∏–∑–µ")')

            // –ñ–¥–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–æ—Ä–º–∞ –≤–∏–¥–Ω–∞
            await page.waitForTimeout(2000) // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è

            const subscriptionForm = page.locator('#subscription-form')
            await expect(subscriptionForm).toBeInViewport({ timeout: 10000 })

            console.log('‚úÖ –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ —Ñ–æ—Ä–º–µ –ø–æ–¥–ø–∏—Å–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç')
        })

        test('üö™ –ö–Ω–æ–ø–∫–∞ "–í–æ–π—Ç–∏" - –ø–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', async ({ page }) => {
            // –°–ª—É—à–∞–µ–º –¥–∏–∞–ª–æ–≥–∏
            let alertText = ''
            page.on('dialog', async dialog => {
                alertText = dialog.message()
                await dialog.accept()
            })

            // –ö–ª–∏–∫–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞
            await page.click('button:has-text("–í–æ–π—Ç–∏")')

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ alert –±—ã–ª –ø–æ–∫–∞–∑–∞–Ω
            await page.waitForTimeout(1000)
            expect(alertText).toContain('–§—É–Ω–∫—Ü–∏—è –≤—Ö–æ–¥–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞')
        })

        test('üì± –ö–Ω–æ–ø–∫–∞ "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ" - PWA —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å', async ({ page, browserName }) => {
            // –≠–º—É–ª–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ beforeinstallprompt
            await page.addInitScript(() => {
                // –°–æ–∑–¥–∞–µ–º –º–æ–∫ —Å–æ–±—ã—Ç–∏—è PWA
                const mockEvent = {
                    preventDefault: () => { },
                    prompt: async () => { },
                    userChoice: Promise.resolve({ outcome: 'accepted' })
                }

                // –≠–º—É–ª–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
                setTimeout(() => {
                    window.dispatchEvent(new CustomEvent('beforeinstallprompt', { detail: mockEvent }))
                }, 1000)
            })

            await page.reload()
            await page.waitForTimeout(2000)

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—è–≤–∏–ª–∞—Å—å
            const installButton = page.locator('button:has-text("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")')

            if (await installButton.isVisible()) {
                // –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –≤–∏–¥–Ω–∞, —Ç–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–∏–∫
                await installButton.click()

                // –í —Ä–µ–∞–ª—å–Ω–æ–º –±—Ä–∞—É–∑–µ—Ä–µ —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å PWA —É—Å—Ç–∞–Ω–æ–≤–∫—É
                // –í —Ç–µ—Å—Ç–∞—Ö –º—ã –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞
                await page.waitForTimeout(1000)

                console.log(`PWA —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ ${browserName}`)
            } else {
                console.log(`PWA –∫–Ω–æ–ø–∫–∞ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ ${browserName} (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤)`)
            }
        })
    })

    test.describe('üì± –ú–æ–±–∏–ª—å–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è', () => {

        test('üì≤ –ú–æ–±–∏–ª—å–Ω—ã–π –≤–∏–¥ - –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤–∏–¥–Ω—ã', async ({ page }) => {
            await page.setViewportSize({ width: 375, height: 667 }) // iPhone —Ä–∞–∑–º–µ—Ä

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            await expect(page.locator('h1')).toBeVisible()
            await expect(page.locator('input[type="email"]')).toBeVisible()
            await expect(page.locator('button:has-text("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è")')).toBeVisible()
            await expect(page.locator('button:has-text("–í–æ–π—Ç–∏")')).toBeVisible()

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—Ç—Å—è
            const emailInput = page.locator('input[type="email"]')
            const subscribeButton = page.locator('button:has-text("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è")')

            const inputBox = await emailInput.boundingBox()
            const buttonBox = await subscribeButton.boundingBox()

            expect(inputBox).toBeTruthy()
            expect(buttonBox).toBeTruthy()
        })

        test('üñ•Ô∏è –î–µ—Å–∫—Ç–æ–ø–Ω—ã–π –≤–∏–¥ - –ø–æ–ª–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å', async ({ page }) => {
            await page.setViewportSize({ width: 1920, height: 1080 })

            // –í—Å–µ —Ç–µ—Å—Ç—ã –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –∏ –Ω–∞ –¥–µ—Å–∫—Ç–æ–ø–µ
            await expect(page.locator('h1')).toBeVisible()
            await expect(page.locator('input[type="email"]')).toBeVisible()
            await expect(page.locator('button:has-text("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è")')).toBeVisible()
        })
    })

    test.describe('üîó –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å–∞–π—Ç—É', () => {

        test('üó∫Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É Roadmap', async ({ page }) => {
            await page.click('a:has-text("Roadmap")')

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ roadmap
            await expect(page).toHaveURL(/.*\/roadmap/)

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–Ω—Ç –∑–∞–≥—Ä—É–∑–∏–ª—Å—è
            await expect(page.locator('h1')).toBeVisible()

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥
            await page.goBack()
            await expect(page).toHaveURL('/')
        })
    })

    test.describe('‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å', () => {

        test('üöÄ –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã', async ({ page }) => {
            const startTime = Date.now()
            await page.goto('/')
            const loadTime = Date.now() - startTime

            // –°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –±—ã—Å—Ç—Ä–æ (–º–µ–Ω–µ–µ 3 —Å–µ–∫—É–Ω–¥)
            expect(loadTime).toBeLessThan(3000)
        })

        test('‚ôø –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å - —Ñ–æ–∫—É—Å –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–∞—Ö', async ({ page }) => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–Ω–æ –Ω–∞–≤–∏–≥–∏—Ä–æ–≤–∞—Ç—å —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            await page.keyboard.press('Tab')

            // –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ —Ñ–æ–∫—É—Å–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–Ω–æ–ø–∫–∞ "–í–æ–π—Ç–∏"
            const focusedElement = page.locator(':focus')
            await expect(focusedElement).toBeVisible()

            // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–µ email –∏ –∫–ª–∏–∫–∞–µ–º –Ω–∞ –Ω–µ–≥–æ –¥–ª—è —Ñ–æ–∫—É—Å–∞
            const emailInput = page.locator('input[type="email"]')
            await emailInput.click()

            // –í–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç
            await emailInput.fill('test@example.com')
            const emailValue = await emailInput.inputValue()
            expect(emailValue).toBe('test@example.com')
        })
    })
})
