import { testFramework, testLogger, testMocks, testUtils } from '../framework'

/**
 * üß™ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å –ø–æ–º–æ—â—å—é –µ–¥–∏–Ω–æ–≥–æ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * 
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω: 2025-09-16T21:33:45.031Z
 * –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫: tests/e2e/mock-mode.spec.ts.backup
 * 
 * –í–ê–ñ–ù–û: –í—Å–µ –Ω–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–¥–∏–Ω—ã–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫!
 * –°–º. –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é: tests/docs/TESTING_FRAMEWORK.md
 */

// üß™ E2E —Ç–µ—Å—Ç—ã –¥–ª—è mock —Ä–µ–∂–∏–º–∞
import { expect, test } from '@playwright/test'

test.describe('Mock Mode E2E Tests', () => {
    test.beforeEach(async ({ page }) => {
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        await page.goto('http://localhost:3000')

        // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        await page.waitForLoadState('networkidle')
    })

    test.describe('Authentication Flow', () => {
        test('–¥–æ–ª–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ mock —Ä–µ–∂–∏–º–µ', async ({ page }) => {
            // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É "–í–æ–π—Ç–∏"
            await page.click('text=–í–æ–π—Ç–∏')

            // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
            await page.waitForSelector('[data-testid="auth-modal"]', { timeout: 5000 })

            // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            await page.click('text=–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')

            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            await page.fill('input[name="name"]', 'Test User')
            await page.fill('input[name="email"]', 'test@example.test')
            await page.fill('input[name="password"]', 'password123')
            await page.fill('input[name="confirmPassword"]', 'password123')

            // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            await page.click('button[type="submit"]')

            // –ñ–¥–µ–º —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            await page.waitForSelector('text=–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞', { timeout: 10000 })

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
            await expect(page.locator('text=Test User')).toBeVisible()
            await expect(page.locator('text=–í—ã–π—Ç–∏')).toBeVisible()
        })

        test('–¥–æ–ª–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –≤ mock —Ä–µ–∂–∏–º–µ', async ({ page }) => {
            // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É "–í–æ–π—Ç–∏"
            await page.click('text=–í–æ–π—Ç–∏')

            // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
            await page.waitForSelector('[data-testid="auth-modal"]', { timeout: 5000 })

            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞
            await page.fill('input[name="email"]', 'test@example.test')
            await page.fill('input[name="password"]', 'password123')

            // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞
            await page.click('button[type="submit"]')

            // –ñ–¥–µ–º —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
            await page.waitForSelector('text=–í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω', { timeout: 10000 })

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
            await expect(page.locator('text=Test User')).toBeVisible()
            await expect(page.locator('text=–í—ã–π—Ç–∏')).toBeVisible()
        })

        test('–¥–æ–ª–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ –≤—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã', async ({ page }) => {
            // –°–Ω–∞—á–∞–ª–∞ –≤—Ö–æ–¥–∏–º –≤ —Å–∏—Å—Ç–µ–º—É
            await page.click('text=–í–æ–π—Ç–∏')
            await page.waitForSelector('[data-testid="auth-modal"]', { timeout: 5000 })
            await page.fill('input[name="email"]', 'test@example.test')
            await page.fill('input[name="password"]', 'password123')
            await page.click('button[type="submit"]')
            await page.waitForSelector('text=–í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω', { timeout: 10000 })

            // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å–∏—Å—Ç–µ–º—ã
            await page.click('text=–í—ã–π—Ç–∏')

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª
            await expect(page.locator('text=–í–æ–π—Ç–∏')).toBeVisible()
            await expect(page.locator('text=–í—ã–π—Ç–∏')).not.toBeVisible()
        })

        test('–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω—ã—Ö —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö', async ({ page }) => {
            // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É "–í–æ–π—Ç–∏"
            await page.click('text=–í–æ–π—Ç–∏')

            // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
            await page.waitForSelector('[data-testid="auth-modal"]', { timeout: 5000 })

            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            await page.fill('input[name="email"]', 'wrong@example.test')
            await page.fill('input[name="password"]', 'wrongpassword')

            // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞
            await page.click('button[type="submit"]')

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–∫–∞–∑–∞–Ω–∞ –æ—à–∏–±–∫–∞
            await expect(page.locator('text=–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å')).toBeVisible()
        })
    })

    test.describe('Planner Page Access', () => {
        test('–¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫—É –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏', async ({ page }) => {
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
            await page.goto('http://localhost:3000/planner')

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–∫–∞–∑–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            await expect(page.locator('text=–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É')).toBeVisible()
        })

        test('–¥–æ–ª–∂–µ–Ω —Ä–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫—É –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏', async ({ page }) => {
            // –í—Ö–æ–¥–∏–º –≤ —Å–∏—Å—Ç–µ–º—É
            await page.click('text=–í–æ–π—Ç–∏')
            await page.waitForSelector('[data-testid="auth-modal"]', { timeout: 5000 })
            await page.fill('input[name="email"]', 'test@example.test')
            await page.fill('input[name="password"]', 'password123')
            await page.click('button[type="submit"]')
            await page.waitForSelector('text=–í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω', { timeout: 10000 })

            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
            await page.goto('http://localhost:3000/planner')

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–≥—Ä—É–∂–µ–Ω
            await expect(page.locator('text=–ò–ò –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫')).toBeVisible()
            await expect(page.locator('text=–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É')).toBeVisible()
        })
    })

    test.describe('Task Management', () => {
        test.beforeEach(async ({ page }) => {
            // –í—Ö–æ–¥–∏–º –≤ —Å–∏—Å—Ç–µ–º—É –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º
            await page.click('text=–í–æ–π—Ç–∏')
            await page.waitForSelector('[data-testid="auth-modal"]', { timeout: 5000 })
            await page.fill('input[name="email"]', 'test@example.test')
            await page.fill('input[name="password"]', 'password123')
            await page.click('button[type="submit"]')
            await page.waitForSelector('text=–í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω', { timeout: 10000 })

            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
            await page.goto('http://localhost:3000/planner')
        })

        test('–¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É', async ({ page }) => {
            // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"
            await page.click('text=–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É')

            // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º—ã
            await page.waitForSelector('[data-testid="task-form"]', { timeout: 5000 })

            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –∑–∞–¥–∞—á–∏
            await page.fill('input[name="title"]', 'Test Task')
            await page.fill('textarea[name="description"]', 'Test Description')
            await page.selectOption('select[name="priority"]', 'high')
            await page.fill('input[name="estimatedMinutes"]', '30')
            await page.fill('input[name="tags"]', 'test, mock')

            // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è
            await page.click('button[type="submit"]')

            // –ñ–¥–µ–º —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
            await page.waitForSelector('text=–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ', { timeout: 10000 })

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ –ø–æ—è–≤–∏–ª–∞—Å—å –≤ —Å–ø–∏—Å–∫–µ
            await expect(page.locator('text=Test Task')).toBeVisible()
            await expect(page.locator('text=Test Description')).toBeVisible()
        })

        test('–¥–æ–ª–∂–µ–Ω –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–¥–∞—á—É', async ({ page }) => {
            // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
            await page.click('text=–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É')
            await page.waitForSelector('[data-testid="task-form"]', { timeout: 5000 })
            await page.fill('input[name="title"]', 'Original Task')
            await page.fill('textarea[name="description"]', 'Original Description')
            await page.selectOption('select[name="priority"]', 'low')
            await page.fill('input[name="estimatedMinutes"]', '20')
            await page.click('button[type="submit"]')
            await page.waitForSelector('text=–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ', { timeout: 10000 })

            // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            await page.click('[data-testid="edit-task-button"]')

            // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            await page.waitForSelector('[data-testid="task-form"]', { timeout: 5000 })

            // –ò–∑–º–µ–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            await page.fill('input[name="title"]', 'Updated Task')
            await page.selectOption('select[name="priority"]', 'high')

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            await page.click('button[type="submit"]')

            // –ñ–¥–µ–º —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            await page.waitForSelector('text=–ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ', { timeout: 10000 })

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞
            await expect(page.locator('text=Updated Task')).toBeVisible()
        })

        test('–¥–æ–ª–∂–µ–Ω –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É', async ({ page }) => {
            // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
            await page.click('text=–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É')
            await page.waitForSelector('[data-testid="task-form"]', { timeout: 5000 })
            await page.fill('input[name="title"]', 'Task to Complete')
            await page.fill('textarea[name="description"]', 'Description')
            await page.selectOption('select[name="priority"]', 'medium')
            await page.fill('input[name="estimatedMinutes"]', '30')
            await page.click('button[type="submit"]')
            await page.waitForSelector('text=–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ', { timeout: 10000 })

            // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            await page.click('[data-testid="complete-task-button"]')

            // –ñ–¥–µ–º —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            await page.waitForSelector('text=–ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ', { timeout: 10000 })

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª–∞—Å—å –≤ —Ä–∞–∑–¥–µ–ª –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö
            await expect(page.locator('text=Task to Complete')).toBeVisible()
        })

        test('–¥–æ–ª–∂–µ–Ω —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É', async ({ page }) => {
            // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
            await page.click('text=–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É')
            await page.waitForSelector('[data-testid="task-form"]', { timeout: 5000 })
            await page.fill('input[name="title"]', 'Task to Delete')
            await page.fill('textarea[name="description"]', 'Description')
            await page.selectOption('select[name="priority"]', 'low')
            await page.fill('input[name="estimatedMinutes"]', '15')
            await page.click('button[type="submit"]')
            await page.waitForSelector('text=–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ', { timeout: 10000 })

            // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è
            await page.click('[data-testid="delete-task-button"]')

            // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
            await page.click('text=–£–¥–∞–ª–∏—Ç—å')

            // –ñ–¥–µ–º —É—Å–ø–µ—à–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            await page.waitForSelector('text=–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ', { timeout: 10000 })

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞
            await expect(page.locator('text=Task to Delete')).not.toBeVisible()
        })
    })

    test.describe('AI Features', () => {
        test.beforeEach(async ({ page }) => {
            // –í—Ö–æ–¥–∏–º –≤ —Å–∏—Å—Ç–µ–º—É
            await page.click('text=–í–æ–π—Ç–∏')
            await page.waitForSelector('[data-testid="auth-modal"]', { timeout: 5000 })
            await page.fill('input[name="email"]', 'test@example.test')
            await page.fill('input[name="password"]', 'password123')
            await page.click('button[type="submit"]')
            await page.waitForSelector('text=–í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω', { timeout: 10000 })

            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
            await page.goto('http://localhost:3000/planner')
        })

        test('–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ò–ò', async ({ page }) => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ò–ò –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è
            await expect(page.locator('text=–°—Ñ–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å—Ä–æ—á–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö')).toBeVisible()
            await expect(page.locator('text=–í—Ä–µ–º—è –¥–ª—è –ø–µ—Ä–µ—Ä—ã–≤–∞')).toBeVisible()
        })

        test('–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', async ({ page }) => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è
            await expect(page.locator('text=–í—Ä–µ–º—è —Ñ–æ–∫—É—Å–∞: 120 –º–∏–Ω')).toBeVisible()
            await expect(page.locator('text=–ó–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞–¥–∞—á: 1')).toBeVisible()
            await expect(page.locator('text=–û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: 75%')).toBeVisible()
        })

        test('–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', async ({ page }) => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è
            await expect(page.locator('text=–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏')).toBeVisible()
            await expect(page.locator('text=–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ò–ò')).toBeVisible()
        })
    })

    test.describe('Subscription Features', () => {
        test.beforeEach(async ({ page }) => {
            // –í—Ö–æ–¥–∏–º –≤ —Å–∏—Å—Ç–µ–º—É
            await page.click('text=–í–æ–π—Ç–∏')
            await page.waitForSelector('[data-testid="auth-modal"]', { timeout: 5000 })
            await page.fill('input[name="email"]', 'test@example.test')
            await page.fill('input[name="password"]', 'password123')
            await page.click('button[type="submit"]')
            await page.waitForSelector('text=–í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω', { timeout: 10000 })
        })

        test('–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ', async ({ page }) => {
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
            await page.goto('http://localhost:3000/planner')

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è
            await expect(page.locator('text=Free –ø–ª–∞–Ω')).toBeVisible()
            await expect(page.locator('text=–û–±–Ω–æ–≤–∏—Ç—å –¥–æ Premium')).toBeVisible()
        })

        test('–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å –ø–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–æ–∫', async ({ page }) => {
            // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
            await page.click('text=–û–±–Ω–æ–≤–∏—Ç—å –¥–æ Premium')

            // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å –ø–ª–∞–Ω–∞–º–∏
            await page.waitForSelector('[data-testid="subscription-modal"]', { timeout: 5000 })

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–ª–∞–Ω—ã –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è
            await expect(page.locator('text=Free')).toBeVisible()
            await expect(page.locator('text=Premium')).toBeVisible()
            await expect(page.locator('text=Pro')).toBeVisible()
        })
    })

    test.describe('Error Handling', () => {
        test('–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã', async ({ page }) => {
            // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É "–í–æ–π—Ç–∏"
            await page.click('text=–í–æ–π—Ç–∏')

            // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
            await page.waitForSelector('[data-testid="auth-modal"]', { timeout: 5000 })

            // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—É—Å—Ç—É—é —Ñ–æ—Ä–º—É
            await page.click('button[type="submit"]')

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–∫–∞–∑–∞–Ω—ã –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            await expect(page.locator('text=Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω')).toBeVisible()
            await expect(page.locator('text=–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω')).toBeVisible()
        })

        test('–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ email', async ({ page }) => {
            // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É "–í–æ–π—Ç–∏"
            await page.click('text=–í–æ–π—Ç–∏')

            // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
            await page.waitForSelector('[data-testid="auth-modal"]', { timeout: 5000 })

            // –í–≤–æ–¥–∏–º –Ω–µ–≤–µ—Ä–Ω—ã–π email
            await page.fill('input[name="email"]', 'invalid-email')
            await page.fill('input[name="password"]', 'password123')
            await page.click('button[type="submit"]')

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–∫–∞–∑–∞–Ω–∞ –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            await expect(page.locator('text=–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email')).toBeVisible()
        })

        test('–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É –ø—Ä–∏ –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª–µ–π –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', async ({ page }) => {
            // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É "–í–æ–π—Ç–∏"
            await page.click('text=–í–æ–π—Ç–∏')

            // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
            await page.waitForSelector('[data-testid="auth-modal"]', { timeout: 5000 })

            // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            await page.click('text=–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')

            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É —Å –Ω–µ—Å–æ–≤–ø–∞–¥–∞—é—â–∏–º–∏ –ø–∞—Ä–æ–ª—è–º–∏
            await page.fill('input[name="name"]', 'Test User')
            await page.fill('input[name="email"]', 'test@example.test')
            await page.fill('input[name="password"]', 'password123')
            await page.fill('input[name="confirmPassword"]', 'different123')
            await page.click('button[type="submit"]')

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–∫–∞–∑–∞–Ω–∞ –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            await expect(page.locator('text=–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç')).toBeVisible()
        })
    })

    test.describe('Responsive Design', () => {
        test('–¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö', async ({ page }) => {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            await page.setViewportSize({ width: 375, height: 667 })

            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            await page.reload()

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è
            await expect(page.locator('text=Personal Productivity AI')).toBeVisible()
            await expect(page.locator('text=–í–æ–π—Ç–∏')).toBeVisible()

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
            await expect(page.locator('[data-testid="mobile-menu"]')).toBeVisible()
        })

        test('–¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –Ω–∞ –ø–ª–∞–Ω—à–µ—Ç–∞—Ö', async ({ page }) => {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞ –ø–ª–∞–Ω—à–µ—Ç–∞
            await page.setViewportSize({ width: 768, height: 1024 })

            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            await page.reload()

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è
            await expect(page.locator('text=Personal Productivity AI')).toBeVisible()
            await expect(page.locator('text=–í–æ–π—Ç–∏')).toBeVisible()
        })
    })

    test.describe('Performance', () => {
        test('–¥–æ–ª–∂–µ–Ω –±—ã—Å—Ç—Ä–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É', async ({ page }) => {
            const startTime = Date.now()

            await page.goto('http://localhost:3000')
            await page.waitForLoadState('networkidle')

            const loadTime = Date.now() - startTime

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 3 —Å–µ–∫—É–Ω–¥—ã
            expect(loadTime).toBeLessThan(3000)
        })

        test('–¥–æ–ª–∂–µ–Ω –±—ã—Å—Ç—Ä–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏', async ({ page }) => {
            // –í—Ö–æ–¥–∏–º –≤ —Å–∏—Å—Ç–µ–º—É
            await page.click('text=–í–æ–π—Ç–∏')
            await page.waitForSelector('[data-testid="auth-modal"]', { timeout: 5000 })
            await page.fill('input[name="email"]', 'test@example.test')
            await page.fill('input[name="password"]', 'password123')
            await page.click('button[type="submit"]')
            await page.waitForSelector('text=–í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω', { timeout: 10000 })

            const startTime = Date.now()

            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
            await page.goto('http://localhost:3000/planner')
            await page.waitForLoadState('networkidle')

            const loadTime = Date.now() - startTime

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã
            expect(loadTime).toBeLessThan(2000)
        })
    })
})
