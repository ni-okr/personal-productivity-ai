// üß™ E2E —Ç–µ—Å—Ç—ã –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏
import { describe, expect, it, beforeAll, afterAll } from '@jest/globals'

// Mock –¥–ª—è E2E —Ç–µ—Å—Ç–æ–≤
const mockBrowser = {
    goto: jest.fn(),
    click: jest.fn(),
    fill: jest.fn(),
    waitForSelector: jest.fn(),
    evaluate: jest.fn(),
    close: jest.fn()
}

describe('Critical Monetization Flows', () => {
    beforeAll(async () => {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
        console.log('üöÄ –ó–∞–ø—É—Å–∫ E2E —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏')
    })

    afterAll(async () => {
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞
        await mockBrowser.close()
    })

    describe('User Registration and Subscription Flow', () => {
        it('–¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏ –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª: —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ‚Üí –≤—ã–±–æ—Ä –ø–ª–∞–Ω–∞ ‚Üí –æ–ø–ª–∞—Ç–∞', async () => {
            // 1. –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            await mockBrowser.goto('http://localhost:3000')
            
            // 2. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await mockBrowser.click('[data-testid="sign-up-button"]')
            await mockBrowser.fill('[data-testid="email-input"]', 'test@example.com')
            await mockBrowser.fill('[data-testid="password-input"]', 'password123')
            await mockBrowser.fill('[data-testid="name-input"]', 'Test User')
            await mockBrowser.click('[data-testid="register-button"]')
            
            // 3. –û–∂–∏–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            await mockBrowser.waitForSelector('[data-testid="registration-success"]')
            
            // 4. –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –ø–ª–∞–Ω–∞
            await mockBrowser.click('[data-testid="choose-plan-button"]')
            await mockBrowser.waitForSelector('[data-testid="subscription-modal"]')
            
            // 5. –í—ã–±–æ—Ä Premium –ø–ª–∞–Ω–∞
            await mockBrowser.click('[data-testid="plan-premium"]')
            await mockBrowser.click('[data-testid="select-plan-button"]')
            
            // 6. –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—è–≤–ª–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –æ–ø–ª–∞—Ç—ã
            await mockBrowser.waitForSelector('[data-testid="payment-details"]')
            
            // 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
            const bankDetails = await mockBrowser.evaluate(() => {
                return document.querySelector('[data-testid="bank-details"]')?.textContent
            })
            
            expect(bankDetails).toContain('–¢–µ—Å—Ç–æ–≤—ã–π –ò–ü')
            expect(bankDetails).toContain('12345678901234567890')
        })

        it('–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –∏ –ª–∏–º–∏—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–ª–∞–Ω–∞', async () => {
            await mockBrowser.goto('http://localhost:3000/planner')
            await mockBrowser.click('[data-testid="subscription-button"]')
            await mockBrowser.waitForSelector('[data-testid="subscription-modal"]')
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º Free –ø–ª–∞–Ω
            const freePlan = await mockBrowser.evaluate(() => {
                const element = document.querySelector('[data-testid="plan-free"]')
                return {
                    price: element?.querySelector('[data-testid="plan-price"]')?.textContent,
                    tasks: element?.querySelector('[data-testid="plan-tasks"]')?.textContent,
                    aiRequests: element?.querySelector('[data-testid="plan-ai-requests"]')?.textContent
                }
            })
            
            expect(freePlan.price).toContain('0 ‚ÇΩ')
            expect(freePlan.tasks).toContain('50 –∑–∞–¥–∞—á')
            expect(freePlan.aiRequests).toContain('0 –ò–ò –∑–∞–ø—Ä–æ—Å–æ–≤')
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º Premium –ø–ª–∞–Ω
            const premiumPlan = await mockBrowser.evaluate(() => {
                const element = document.querySelector('[data-testid="plan-premium"]')
                return {
                    price: element?.querySelector('[data-testid="plan-price"]')?.textContent,
                    tasks: element?.querySelector('[data-testid="plan-tasks"]')?.textContent,
                    aiRequests: element?.querySelector('[data-testid="plan-ai-requests"]')?.textContent
                }
            })
            
            expect(premiumPlan.price).toContain('999 ‚ÇΩ')
            expect(premiumPlan.tasks).toContain('500 –∑–∞–¥–∞—á')
            expect(premiumPlan.aiRequests).toContain('1000 –ò–ò –∑–∞–ø—Ä–æ—Å–æ–≤')
        })
    })

    describe('Task Management with Limits', () => {
        it('–¥–æ–ª–∂–µ–Ω –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á –Ω–∞ Free –ø–ª–∞–Ω–µ', async () => {
            // –õ–æ–≥–∏–Ω –∫–∞–∫ Free –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            await mockBrowser.goto('http://localhost:3000/planner')
            
            // –°–æ–∑–¥–∞–µ–º 50 –∑–∞–¥–∞—á (–ª–∏–º–∏—Ç Free –ø–ª–∞–Ω–∞)
            for (let i = 1; i <= 50; i++) {
                await mockBrowser.click('[data-testid="add-task-button"]')
                await mockBrowser.fill('[data-testid="task-title"]', `–ó–∞–¥–∞—á–∞ ${i}`)
                await mockBrowser.click('[data-testid="save-task-button"]')
            }
            
            // –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å 51-—é –∑–∞–¥–∞—á—É –¥–æ–ª–∂–Ω–∞ –ø–æ–∫–∞–∑–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
            await mockBrowser.click('[data-testid="add-task-button"]')
            await mockBrowser.fill('[data-testid="task-title"]', '–ó–∞–¥–∞—á–∞ 51')
            await mockBrowser.click('[data-testid="save-task-button"]')
            
            // –î–æ–ª–∂–Ω–æ –ø–æ—è–≤–∏—Ç—å—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–∏
            await mockBrowser.waitForSelector('[data-testid="limit-reached-message"]')
            
            const limitMessage = await mockBrowser.evaluate(() => {
                return document.querySelector('[data-testid="limit-reached-message"]')?.textContent
            })
            
            expect(limitMessage).toContain('–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç')
            expect(limitMessage).toContain('–ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ Premium')
        })

        it('–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–æ–≤', async () => {
            await mockBrowser.goto('http://localhost:3000/planner')
            
            // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–æ –ª–∏–º–∏—Ç–∞
            for (let i = 1; i <= 50; i++) {
                await mockBrowser.click('[data-testid="add-task-button"]')
                await mockBrowser.fill('[data-testid="task-title"]', `–ó–∞–¥–∞—á–∞ ${i}`)
                await mockBrowser.click('[data-testid="save-task-button"]')
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ—è–≤–∏–ª–∞—Å—å –∫–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            await mockBrowser.waitForSelector('[data-testid="upgrade-button"]')
            
            const upgradeButton = await mockBrowser.evaluate(() => {
                return document.querySelector('[data-testid="upgrade-button"]')?.textContent
            })
            
            expect(upgradeButton).toContain('–û–±–Ω–æ–≤–∏—Ç—å –¥–æ Premium')
        })
    })

    describe('Payment Processing', () => {
        it('–¥–æ–ª–∂–µ–Ω –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å QR –∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã', async () => {
            await mockBrowser.goto('http://localhost:3000/planner')
            await mockBrowser.click('[data-testid="subscription-button"]')
            await mockBrowser.click('[data-testid="plan-premium"]')
            await mockBrowser.click('[data-testid="select-plan-button"]')
            
            // –í—ã–±–∏—Ä–∞–µ–º QR –∫–æ–¥ –∫–∞–∫ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
            await mockBrowser.click('[data-testid="payment-method-qr"]')
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ—è–≤–∏–ª—Å—è QR –∫–æ–¥
            await mockBrowser.waitForSelector('[data-testid="qr-code"]')
            
            const qrCode = await mockBrowser.evaluate(() => {
                const element = document.querySelector('[data-testid="qr-code"]')
                return element?.tagName === 'IMG' && element?.getAttribute('src')?.startsWith('data:image')
            })
            
            expect(qrCode).toBe(true)
        })

        it('–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞', async () => {
            await mockBrowser.goto('http://localhost:3000/planner')
            await mockBrowser.click('[data-testid="subscription-button"]')
            await mockBrowser.click('[data-testid="plan-premium"]')
            await mockBrowser.click('[data-testid="select-plan-button"]')
            
            // –í—ã–±–∏—Ä–∞–µ–º –±–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥
            await mockBrowser.click('[data-testid="payment-method-bank"]')
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ—è–≤–∏–ª–∏—Å—å –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
            await mockBrowser.waitForSelector('[data-testid="bank-details"]')
            
            const bankDetails = await mockBrowser.evaluate(() => {
                const element = document.querySelector('[data-testid="bank-details"]')
                return {
                    recipient: element?.querySelector('[data-testid="recipient"]')?.textContent,
                    account: element?.querySelector('[data-testid="account"]')?.textContent,
                    bank: element?.querySelector('[data-testid="bank"]')?.textContent,
                    bik: element?.querySelector('[data-testid="bik"]')?.textContent,
                    inn: element?.querySelector('[data-testid="inn"]')?.textContent
                }
            })
            
            expect(bankDetails.recipient).toContain('–¢–µ—Å—Ç–æ–≤—ã–π –ò–ü')
            expect(bankDetails.account).toContain('12345678901234567890')
            expect(bankDetails.bank).toContain('–ê–û ¬´–¢–ë–∞–Ω–∫¬ª')
            expect(bankDetails.bik).toContain('044525225')
            expect(bankDetails.inn).toContain('123456789012')
        })
    })

    describe('User Experience', () => {
        it('–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ', async () => {
            await mockBrowser.goto('http://localhost:3000/planner')
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
            await mockBrowser.waitForSelector('[data-testid="subscription-status"]')
            
            const status = await mockBrowser.evaluate(() => {
                return document.querySelector('[data-testid="subscription-status"]')?.textContent
            })
            
            expect(status).toContain('Free')
        })

        it('–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤', async () => {
            await mockBrowser.goto('http://localhost:3000/planner')
            
            // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á
            for (let i = 1; i <= 10; i++) {
                await mockBrowser.click('[data-testid="add-task-button"]')
                await mockBrowser.fill('[data-testid="task-title"]', `–ó–∞–¥–∞—á–∞ ${i}`)
                await mockBrowser.click('[data-testid="save-task-button"]')
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø—Ä–æ–≥—Ä–µ—Å—Å
            await mockBrowser.waitForSelector('[data-testid="usage-progress"]')
            
            const progress = await mockBrowser.evaluate(() => {
                return document.querySelector('[data-testid="usage-progress"]')?.textContent
            })
            
            expect(progress).toContain('10 –∏–∑ 50')
        })
    })
})
