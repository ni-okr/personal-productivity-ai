import { test, expect, devices } from '@playwright/test'

test.describe('üì± PWA –£—Å—Ç–∞–Ω–æ–≤–∫–∞ - –ö—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ—Å—Ç—å', () => {
  
  test.describe('üñ•Ô∏è Desktop PWA', () => {
    
    test('üíª Windows/Linux - PWA —É—Å—Ç–∞–Ω–æ–≤–∫–∞', async ({ page, browserName }) => {
      await page.goto('/')
      
      // –≠–º—É–ª–∏—Ä—É–µ–º PWA —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞
      await page.addInitScript(() => {
        let deferredPrompt: any = null
        
        // –°–æ–∑–¥–∞–µ–º –º–æ–∫ —Å–æ–±—ã—Ç–∏—è beforeinstallprompt
        const mockEvent = {
          preventDefault: () => {},
          prompt: async () => {
            console.log('üñ•Ô∏è Desktop PWA installation triggered')
            return Promise.resolve()
          },
          userChoice: Promise.resolve({ outcome: 'accepted' })
        }
        
        // –≠–º—É–ª–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
        setTimeout(() => {
          deferredPrompt = mockEvent
          window.dispatchEvent(new CustomEvent('beforeinstallprompt', { detail: mockEvent }))
          
          // –î–µ–ª–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
          ;(window as any).testDeferredPrompt = deferredPrompt
        }, 1000)
      })
      
      await page.reload()
      await page.waitForTimeout(2000)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—è–≤–∏–ª–∞—Å—å
      const installButton = page.locator('button:has-text("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")')
      
      if (await installButton.isVisible()) {
        console.log(`‚úÖ PWA –∫–Ω–æ–ø–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ ${browserName}`)
        
        // –ö–ª–∏–∫–∞–µ–º –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É
        await installButton.click()
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞
        const wasPromptCalled = await page.evaluate(() => {
          return (window as any).testDeferredPrompt !== null
        })
        
        expect(wasPromptCalled).toBe(true)
        console.log(`‚úÖ PWA —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞ –≤ ${browserName}`)
        
      } else {
        console.log(`‚ÑπÔ∏è PWA –∫–Ω–æ–ø–∫–∞ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ ${browserName} (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –±—Ä–∞—É–∑–µ—Ä–∞)`)
      }
    })
    
    test('üçé macOS Safari - PWA –ø–æ–≤–µ–¥–µ–Ω–∏–µ', async ({ page }) => {
      await page.goto('/')
      
      // Safari –∏–º–µ–µ—Ç –¥—Ä—É–≥–æ–π –º–µ—Ö–∞–Ω–∏–∑–º PWA
      await page.addInitScript(() => {
        // –í Safari PWA —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ "–î–æ–±–∞–≤–∏—Ç—å –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω"
        console.log('üçé Safari PWA: –î–æ–±–∞–≤–∏—Ç—å –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω')
        
        // –≠–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É Safari
        Object.defineProperty(navigator, 'standalone', {
          value: false,
          writable: true
        })
      })
      
      await page.reload()
      
      // –í Safari –∫–Ω–æ–ø–∫–∞ –º–æ–∂–µ—Ç –Ω–µ –ø–æ—è–≤–ª—è—Ç—å—Å—è, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
      const installButton = page.locator('button:has-text("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")')
      
      if (await installButton.isVisible()) {
        console.log('‚úÖ PWA –∫–Ω–æ–ø–∫–∞ –≤–∏–¥–Ω–∞ –≤ Safari')
      } else {
        console.log('‚ÑπÔ∏è Safari –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º "–î–æ–±–∞–≤–∏—Ç—å –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω"')
      }
    })
  })

  test.describe('üì± Mobile PWA', () => {
    
    test('ü§ñ Android Chrome - APK —É—Å—Ç–∞–Ω–æ–≤–∫–∞', async ({ page }) => {
      // –≠–º—É–ª–∏—Ä—É–µ–º Android —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
      await page.emulate(devices['Pixel 5'])
      await page.goto('/')
      
      await page.addInitScript(() => {
        // –≠–º—É–ª–∏—Ä—É–µ–º Android PWA
        Object.defineProperty(navigator, 'userAgent', {
          value: 'Mozilla/5.0 (Linux; Android 11; Pixel 5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.91 Mobile Safari/537.36',
          writable: true
        })
        
        // Android PWA —Å–æ–±—ã—Ç–∏–µ
        const mockEvent = {
          preventDefault: () => {},
          prompt: async () => {
            console.log('ü§ñ Android PWA: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è APK —Ñ–∞–π–ª–∞')
            // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è APK
            return Promise.resolve()
          },
          userChoice: Promise.resolve({ outcome: 'accepted' })
        }
        
        setTimeout(() => {
          window.dispatchEvent(new CustomEvent('beforeinstallprompt', { detail: mockEvent }))
          ;(window as any).testAndroidPWA = mockEvent
        }, 1000)
      })
      
      await page.reload()
      await page.waitForTimeout(2000)
      
      const installButton = page.locator('button:has-text("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")')
      
      if (await installButton.isVisible()) {
        await installButton.click()
        
        console.log('‚úÖ Android PWA: APK —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞')
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Android PWA —Å–æ–±—ã—Ç–∏–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ
        const androidPWATriggered = await page.evaluate(() => {
          return (window as any).testAndroidPWA !== undefined
        })
        
        expect(androidPWATriggered).toBe(true)
      }
    })
    
    test('üçé iOS Safari - –î–æ–±–∞–≤–∏—Ç—å –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω', async ({ page }) => {
      // –≠–º—É–ª–∏—Ä—É–µ–º iPhone
      await page.emulate(devices['iPhone 12'])
      await page.goto('/')
      
      await page.addInitScript(() => {
        // –≠–º—É–ª–∏—Ä—É–µ–º iOS
        Object.defineProperty(navigator, 'userAgent', {
          value: 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.0 Mobile/15E148 Safari/604.1',
          writable: true
        })
        
        // iOS –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç beforeinstallprompt
        console.log('üçé iOS: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º Safari')
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
        Object.defineProperty(navigator, 'standalone', {
          value: false, // false –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ –∫–∞–∫ PWA
          writable: true
        })
        
        ;(window as any).testIOSPWA = true
      })
      
      await page.reload()
      
      // –ù–∞ iOS –∫–Ω–æ–ø–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–∂–µ—Ç –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è
      const installButton = page.locator('button:has-text("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")')
      
      if (await installButton.isVisible()) {
        console.log('‚úÖ iOS: PWA –∫–Ω–æ–ø–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è')
        await installButton.click()
      } else {
        console.log('‚ÑπÔ∏è iOS: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è" ‚Üí "–î–æ–±–∞–≤–∏—Ç—å –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω"')
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ iOS PWA –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
      const iosSupported = await page.evaluate(() => {
        return (window as any).testIOSPWA === true
      })
      
      expect(iosSupported).toBe(true)
    })
  })

  test.describe('üîß PWA –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å', () => {
    
    test('üìã Manifest.json –¥–æ—Å—Ç—É–ø–µ–Ω', async ({ page }) => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–∞–Ω–∏—Ñ–µ—Å—Ç –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
      const manifestResponse = await page.goto('/manifest.json')
      expect(manifestResponse?.status()).toBe(200)
      
      const manifestContent = await manifestResponse?.json()
      expect(manifestContent).toHaveProperty('name')
      expect(manifestContent).toHaveProperty('short_name')
      expect(manifestContent).toHaveProperty('icons')
      
      console.log('‚úÖ PWA Manifest –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω:', manifestContent.name)
    })
    
    test('üîÑ Service Worker —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', async ({ page }) => {
      await page.goto('/')
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Service Worker –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
      const swSupported = await page.evaluate(() => {
        return 'serviceWorker' in navigator
      })
      
      expect(swSupported).toBe(true)
      console.log('‚úÖ Service Worker –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è')
    })
    
    test('üì± PWA —É—Å—Ç–∞–Ω–æ–≤–∫–∞ - —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏', async ({ page }) => {
      await page.goto('/')
      
      // –¢–µ—Å—Ç 1: –ö–Ω–æ–ø–∫–∞ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –¥–æ —Å–æ–±—ã—Ç–∏—è
      let installButton = page.locator('button:has-text("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")')
      expect(await installButton.isVisible()).toBe(false)
      
      // –¢–µ—Å—Ç 2: –ö–Ω–æ–ø–∫–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ —Å–æ–±—ã—Ç–∏—è
      await page.addInitScript(() => {
        setTimeout(() => {
          const mockEvent = {
            preventDefault: () => {},
            prompt: async () => Promise.resolve(),
            userChoice: Promise.resolve({ outcome: 'accepted' })
          }
          
          window.dispatchEvent(new CustomEvent('beforeinstallprompt', { detail: mockEvent }))
        }, 1000)
      })
      
      await page.reload()
      await page.waitForTimeout(2000)
      
      installButton = page.locator('button:has-text("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")')
      
      if (await installButton.isVisible()) {
        console.log('‚úÖ PWA –∫–Ω–æ–ø–∫–∞ –ø–æ—è–≤–∏–ª–∞—Å—å –ø–æ—Å–ª–µ —Å–æ–±—ã—Ç–∏—è')
        
        // –¢–µ—Å—Ç 3: –ö–Ω–æ–ø–∫–∞ –∏—Å—á–µ–∑–∞–µ—Ç –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        await installButton.click()
        await page.waitForTimeout(1000)
        
        // –í —Ä–µ–∞–ª—å–Ω–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∫–Ω–æ–ø–∫–∞ –¥–æ–ª–∂–Ω–∞ –∏—Å—á–µ–∑–Ω—É—Ç—å
        console.log('‚úÖ PWA —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
      }
    })
  })

  test.describe('üåê –ö—Ä–æ—Å—Å–±—Ä–∞—É–∑–µ—Ä–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å', () => {
    
    test('üîç Chrome - –ø–æ–ª–Ω–∞—è PWA –ø–æ–¥–¥–µ—Ä–∂–∫–∞', async ({ page, browserName }) => {
      test.skip(browserName !== 'chromium', '–¢–µ—Å—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è Chrome')
      
      await page.goto('/')
      console.log('‚úÖ Chrome: –ü–æ–ª–Ω–∞—è PWA –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –æ–∂–∏–¥–∞–µ—Ç—Å—è')
      
      // Chrome –¥–æ–ª–∂–µ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤—Å–µ PWA —Ñ—É–Ω–∫—Ü–∏–∏
      const pwaSupport = await page.evaluate(() => {
        return {
          beforeInstallPrompt: 'onbeforeinstallprompt' in window,
          serviceWorker: 'serviceWorker' in navigator,
          manifest: document.querySelector('link[rel="manifest"]') !== null
        }
      })
      
      expect(pwaSupport.serviceWorker).toBe(true)
      expect(pwaSupport.manifest).toBe(true)
      
      console.log('‚úÖ Chrome PWA –ø–æ–¥–¥–µ—Ä–∂–∫–∞:', pwaSupport)
    })
    
    test('ü¶ä Firefox - –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è PWA –ø–æ–¥–¥–µ—Ä–∂–∫–∞', async ({ page, browserName }) => {
      test.skip(browserName !== 'firefox', '–¢–µ—Å—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è Firefox')
      
      await page.goto('/')
      console.log('‚ÑπÔ∏è Firefox: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è PWA –ø–æ–¥–¥–µ—Ä–∂–∫–∞')
      
      // Firefox –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É PWA
      const pwaSupport = await page.evaluate(() => {
        return {
          beforeInstallPrompt: 'onbeforeinstallprompt' in window,
          serviceWorker: 'serviceWorker' in navigator,
          manifest: document.querySelector('link[rel="manifest"]') !== null
        }
      })
      
      expect(pwaSupport.serviceWorker).toBe(true)
      expect(pwaSupport.manifest).toBe(true)
      // beforeInstallPrompt –º–æ–∂–µ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è –≤ Firefox
      
      console.log('‚ÑπÔ∏è Firefox PWA –ø–æ–¥–¥–µ—Ä–∂–∫–∞:', pwaSupport)
    })
    
    test('üß≠ Safari - –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π PWA –º–µ—Ö–∞–Ω–∏–∑–º', async ({ page, browserName }) => {
      test.skip(browserName !== 'webkit', '–¢–µ—Å—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è Safari')
      
      await page.goto('/')
      console.log('üçé Safari: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π PWA –º–µ—Ö–∞–Ω–∏–∑–º')
      
      // Safari –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥ –∫ PWA
      const safariPWA = await page.evaluate(() => {
        return {
          standalone: 'standalone' in navigator,
          serviceWorker: 'serviceWorker' in navigator,
          manifest: document.querySelector('link[rel="manifest"]') !== null,
          addToHomeScreen: true // Safari –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º
        }
      })
      
      expect(safariPWA.serviceWorker).toBe(true)
      expect(safariPWA.manifest).toBe(true)
      
      console.log('üçé Safari PWA –ø–æ–¥–¥–µ—Ä–∂–∫–∞:', safariPWA)
    })
  })
})
