/**
 * üîç –ò–°–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –¢–ï–°–¢–´
 * –ü–æ–∫—Ä—ã—Ç–∏–µ: —Å–≤–æ–±–æ–¥–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ, –ø–æ–∏—Å–∫ –±–∞–≥–æ–≤, UX —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
 */

import { test, expect, Page } from '@playwright/test'

describe('üéØ Free Exploration Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å', async ({ page }) => {
    await page.goto('/')
    
    // –ò—Å—Å–ª–µ–¥—É–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await expect(page.locator('h1')).toBeVisible()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    const buttons = page.locator('button')
    const buttonCount = await buttons.count()
    
    for (let i = 0; i < buttonCount; i++) {
      const button = buttons.nth(i)
      const text = await button.textContent()
      const isVisible = await button.isVisible()
      
      if (isVisible && text) {
        // –ö–ª–∏–∫–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–∫—Ü–∏—é
        await button.click()
        await page.waitForTimeout(500)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç –æ—à–∏–±–æ–∫ –≤ –∫–æ–Ω—Å–æ–ª–∏
        const consoleErrors = []
        page.on('console', msg => {
          if (msg.type() === 'error') {
            consoleErrors.push(msg.text())
          }
        })
        
        // –ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
        const criticalErrors = consoleErrors.filter(error => 
          error.includes('Error') || error.includes('Failed')
        )
        expect(criticalErrors.length).toBe(0)
      }
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏', async ({ page }) => {
    await page.goto('/')
    
    // –ò—Å—Å–ª–µ–¥—É–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    const links = page.locator('a')
    const linkCount = await links.count()
    
    for (let i = 0; i < linkCount; i++) {
      const link = links.nth(i)
      const href = await link.getAttribute('href')
      const isVisible = await link.isVisible()
      
      if (isVisible && href && !href.startsWith('http')) {
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –ø–æ —Å—Å—ã–ª–∫–µ
        await link.click()
        await page.waitForTimeout(1000)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
        await expect(page.locator('body')).toBeVisible()
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥
        await page.goBack()
        await page.waitForTimeout(500)
      }
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å —Ñ–æ—Ä–º—ã –∏ –ø–æ–ª—è –≤–≤–æ–¥–∞', async ({ page }) => {
    await page.goto('/')
    
    // –ò—Å—Å–ª–µ–¥—É–µ–º –≤—Å–µ –ø–æ–ª—è –≤–≤–æ–¥–∞
    const inputs = page.locator('input, textarea, select')
    const inputCount = await inputs.count()
    
    for (let i = 0; i < inputCount; i++) {
      const input = inputs.nth(i)
      const type = await input.getAttribute('type')
      const placeholder = await input.getAttribute('placeholder')
      const isVisible = await input.isVisible()
      
      if (isVisible) {
        // –ü—ã—Ç–∞–µ–º—Å—è –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ
        if (type === 'email') {
          await input.fill('test@example.com')
        } else if (type === 'password') {
          await input.fill('password123')
        } else if (type === 'text') {
          await input.fill('Test Text')
        } else if (placeholder) {
          await input.fill('Test Input')
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã
        const value = await input.inputValue()
        expect(value).toBeTruthy()
      }
    }
  })
})

describe('üêõ Bug Hunting Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –∏—Å–∫–∞—Ç—å –±–∞–≥–∏ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—à–∏–±–æ–∫', async ({ page }) => {
    await page.goto('/')
    
    // –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫–∏
    const errorScenarios = [
      { input: '', expected: 'empty input' },
      { input: 'a'.repeat(1000), expected: 'long input' },
      { input: '<script>alert("xss")</script>', expected: 'xss attempt' },
      { input: '; DROP TABLE users; --', expected: 'sql injection' },
      { input: '${7*7}', expected: 'template injection' },
      { input: '{{7*7}}', expected: 'template injection' },
      { input: '#{7*7}', expected: 'template injection' }
    ]
    
    for (const scenario of errorScenarios) {
      const emailInput = page.locator('[data-testid="email-input"]')
      const subscribeButton = page.locator('[data-testid="subscribe-button"]')
      
      await emailInput.fill(scenario.input)
      await subscribeButton.click()
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —Å–ª–æ–º–∞–ª–æ—Å—å
      await expect(page.locator('body')).toBeVisible()
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç –æ—à–∏–±–æ–∫ –≤ –∫–æ–Ω—Å–æ–ª–∏
      const consoleErrors = []
      page.on('console', msg => {
        if (msg.type() === 'error') {
          consoleErrors.push(msg.text())
        }
      })
      
      await page.waitForTimeout(500)
      
      // –ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
      const criticalErrors = consoleErrors.filter(error => 
        error.includes('Error') || error.includes('Failed')
      )
      expect(criticalErrors.length).toBe(0)
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –∏—Å–∫–∞—Ç—å –±–∞–≥–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', async ({ page }) => {
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
      localStorage.setItem('auth-token', 'mock-token')
      localStorage.setItem('user', JSON.stringify({
        id: 'user-1',
        email: 'test@example.com',
        name: 'Test User',
        subscription: 'free'
      }))
    })
    
    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–∑–≤–∞—Ç—å –±–∞–≥–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    const bugScenarios = [
      { action: 'add multiple tasks', count: 100 },
      { action: 'rapid clicks', count: 50 },
      { action: 'concurrent operations', count: 10 }
    ]
    
    for (const scenario of bugScenarios) {
      if (scenario.action === 'add multiple tasks') {
        // –î–æ–±–∞–≤–ª—è–µ–º –º–Ω–æ–≥–æ –∑–∞–¥–∞—á
        for (let i = 0; i < scenario.count; i++) {
          await page.click('[data-testid="add-task-button"]')
          await page.fill('[data-testid="task-title"]', `Task ${i}`)
          await page.click('[data-testid="save-task-button"]')
          await page.waitForTimeout(100)
        }
      } else if (scenario.action === 'rapid clicks') {
        // –ë—ã—Å—Ç—Ä—ã–µ –∫–ª–∏–∫–∏
        const button = page.locator('[data-testid="add-task-button"]')
        for (let i = 0; i < scenario.count; i++) {
          await button.click()
          await page.waitForTimeout(10)
        }
      } else if (scenario.action === 'concurrent operations') {
        // –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        const promises = []
        for (let i = 0; i < scenario.count; i++) {
          promises.push(page.click('[data-testid="add-task-button"]'))
        }
        await Promise.all(promises)
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —Å–ª–æ–º–∞–ª–æ—Å—å
      await expect(page.locator('[data-testid="planner-content"]')).toBeVisible()
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –∏—Å–∫–∞—Ç—å –±–∞–≥–∏ –≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏', async ({ page }) => {
    await page.goto('/')
    
    // –ò–∑–º–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    const startTime = Date.now()
    await page.waitForLoadState('networkidle')
    const loadTime = Date.now() - startTime
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –±—ã—Å—Ç—Ä–æ
    expect(loadTime).toBeLessThan(5000)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
    const memoryUsage = await page.evaluate(() => {
      if ('memory' in performance) {
        return (performance as any).memory.usedJSHeapSize
      }
      return 0
    })
    
    // –ü–∞–º—è—Ç—å –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å —Ä–∞–∑—É–º–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã
    expect(memoryUsage).toBeLessThan(100 * 1024 * 1024) // 100MB
  })
})

describe('üé® UX Exploration Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ–ø—ã—Ç', async ({ page }) => {
    await page.goto('/')
    
    // –ò—Å—Å–ª–µ–¥—É–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    const elements = page.locator('h1, h2, h3, p, button, a, input, select, textarea')
    const elementCount = await elements.count()
    
    for (let i = 0; i < elementCount; i++) {
      const element = elements.nth(i)
      const tagName = await element.evaluate(el => el.tagName.toLowerCase())
      const text = await element.textContent()
      const isVisible = await element.isVisible()
      
      if (isVisible) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –∏–º–µ–µ—Ç —Ä–∞–∑—É–º–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        const boundingBox = await element.boundingBox()
        if (boundingBox) {
          expect(boundingBox.width).toBeGreaterThan(0)
          expect(boundingBox.height).toBeGreaterThan(0)
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç —á–∏—Ç–∞–µ–º
        if (text && text.trim()) {
          expect(text.trim().length).toBeGreaterThan(0)
        }
      }
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å', async ({ page }) => {
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    const semanticElements = page.locator('main, nav, header, footer, section, article, aside')
    const semanticCount = await semanticElements.count()
    
    for (let i = 0; i < semanticCount; i++) {
      const element = semanticElements.nth(i)
      const isVisible = await element.isVisible()
      
      if (isVisible) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ä–æ–ª—å
        const role = await element.getAttribute('role')
        const tagName = await element.evaluate(el => el.tagName.toLowerCase())
        
        // –†–æ–ª—å –¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–µ–≥—É
        if (role) {
          expect(role).toBeTruthy()
        }
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º ARIA –∞—Ç—Ä–∏–±—É—Ç—ã
    const ariaElements = page.locator('[aria-label], [aria-describedby], [aria-labelledby]')
    const ariaCount = await ariaElements.count()
    
    for (let i = 0; i < ariaCount; i++) {
      const element = ariaElements.nth(i)
      const ariaLabel = await element.getAttribute('aria-label')
      const ariaDescribedBy = await element.getAttribute('aria-describedby')
      const ariaLabelledBy = await element.getAttribute('aria-labelledby')
      
      // –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω ARIA –∞—Ç—Ä–∏–±—É—Ç
      expect(ariaLabel || ariaDescribedBy || ariaLabelledBy).toBeTruthy()
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –º–æ–±–∏–ª—å–Ω—É—é –∞–¥–∞–ø—Ç–∞—Ü–∏—é', async ({ page }) => {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–±–∏–ª—å–Ω—ã–π viewport
    await page.setViewportSize({ width: 375, height: 667 })
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ–º–µ—â–∞–µ—Ç—Å—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ
    const body = page.locator('body')
    const scrollWidth = await body.evaluate(el => el.scrollWidth)
    const clientWidth = await body.evaluate(el => el.clientWidth)
    
    expect(scrollWidth).toBeLessThanOrEqual(clientWidth * 1.1)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–∏–µ –¥–ª—è touch
    const buttons = page.locator('button')
    const buttonCount = await buttons.count()
    
    for (let i = 0; i < buttonCount; i++) {
      const button = buttons.nth(i)
      const boundingBox = await button.boundingBox()
      
      if (boundingBox) {
        // –ö–Ω–æ–ø–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 44x44 –ø–∏–∫—Å–µ–ª–µ–π
        expect(boundingBox.width).toBeGreaterThanOrEqual(44)
        expect(boundingBox.height).toBeGreaterThanOrEqual(44)
      }
    }
  })
})

describe('üîç Edge Case Exploration Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ –≤–≤–æ–¥–∞', async ({ page }) => {
    await page.goto('/')
    
    const edgeCases = [
      { input: '', description: 'empty input' },
      { input: ' ', description: 'whitespace only' },
      { input: 'a', description: 'single character' },
      { input: 'a'.repeat(1000), description: 'very long input' },
      { input: '—Ç–µ—Å—Ç', description: 'unicode characters' },
      { input: 'üöÄ', description: 'emoji' },
      { input: 'test@', description: 'incomplete email' },
      { input: '@example.com', description: 'email without local part' },
      { input: 'test@example', description: 'email without domain' },
      { input: 'test@example.com.', description: 'email with trailing dot' },
      { input: 'test..test@example.com', description: 'email with double dots' },
      { input: 'test@example..com', description: 'email with double dots in domain' }
    ]
    
    for (const edgeCase of edgeCases) {
      const emailInput = page.locator('[data-testid="email-input"]')
      const subscribeButton = page.locator('[data-testid="subscribe-button"]')
      
      await emailInput.fill(edgeCase.input)
      await subscribeButton.click()
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —Å–ª–æ–º–∞–ª–æ—Å—å
      await expect(page.locator('body')).toBeVisible()
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
      const statusElement = page.locator('[data-testid="subscription-status"]')
      if (await statusElement.count() > 0) {
        await expect(statusElement).toBeVisible()
      }
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏', async ({ page }) => {
    await page.goto('/')
    
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const nonExistentPages = [
      '/nonexistent',
      '/planner/nonexistent',
      '/api/nonexistent',
      '/static/nonexistent.html'
    ]
    
    for (const pagePath of nonExistentPages) {
      const response = await page.goto(pagePath)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è 404 –∏–ª–∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç
      expect(response?.status()).toBeOneOf([404, 200, 301, 302])
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è', async ({ page }) => {
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    const states = [
      { user: null, description: 'no user' },
      { user: { id: '', email: '', name: '' }, description: 'empty user' },
      { user: { id: 'user-1', email: 'test@example.com', name: 'Test User', subscription: null }, description: 'no subscription' },
      { user: { id: 'user-1', email: 'test@example.com', name: 'Test User', subscription: 'invalid' }, description: 'invalid subscription' }
    ]
    
    for (const state of states) {
      await page.evaluate((userState) => {
        if (userState.user) {
          localStorage.setItem('user', JSON.stringify(userState.user))
          localStorage.setItem('auth-token', 'mock-token')
        } else {
          localStorage.removeItem('user')
          localStorage.removeItem('auth-token')
        }
      }, state)
      
      await page.reload()
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —Å–ª–æ–º–∞–ª–æ—Å—å
      await expect(page.locator('body')).toBeVisible()
    }
  })
})

describe('üéØ Scenario-Based Exploration Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', async ({ page }) => {
    // –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ö–æ–¥–∏—Ç –Ω–∞ —Å–∞–π—Ç
    await page.goto('/')
    
    // –ò—Å—Å–ª–µ–¥—É–µ—Ç –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await expect(page.locator('h1')).toBeVisible()
    
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É
    await page.fill('[data-testid="email-input"]', 'newuser@example.com')
    await page.click('[data-testid="subscribe-button"]')
    await expect(page.locator('[data-testid="subscription-status"]')).toBeVisible()
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫—É
    await page.goto('/planner')
    
    // –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await expect(page.locator('body')).toBeVisible()
  })

  test('–¥–æ–ª–∂–µ–Ω –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', async ({ page }) => {
    // –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ö–æ–¥–∏—Ç –≤ —Å–∏—Å—Ç–µ–º—É
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
      localStorage.setItem('auth-token', 'mock-token')
      localStorage.setItem('user', JSON.stringify({
        id: 'user-1',
        email: 'test@example.com',
        name: 'Test User',
        subscription: 'free'
      }))
    })
    
    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // –ò—Å—Å–ª–µ–¥—É–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    await expect(page.locator('[data-testid="planner-content"]')).toBeVisible()
    
    // –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É
    await page.click('[data-testid="add-task-button"]')
    await page.fill('[data-testid="task-title"]', 'Test Task')
    await page.click('[data-testid="save-task-button"]')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∑–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–∏–ª–∞—Å—å
    await expect(page.locator('.task-card')).toBeVisible()
  })

  test('–¥–æ–ª–∂–µ–Ω –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', async ({ page }) => {
    // –ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ö–æ–¥–∏—Ç –≤ —Å–∏—Å—Ç–µ–º—É
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É
    await page.evaluate(() => {
      localStorage.setItem('auth-token', 'mock-token')
      localStorage.setItem('user', JSON.stringify({
        id: 'user-1',
        email: 'test@example.com',
        name: 'Test User',
        subscription: 'premium'
      }))
    })
    
    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // –ò—Å—Å–ª–µ–¥—É–µ—Ç –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–∏
    await expect(page.locator('[data-testid="planner-content"]')).toBeVisible()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –ò–ò —Ñ—É–Ω–∫—Ü–∏—è–º
    const aiSection = page.locator('[data-testid="ai-section"]')
    if (await aiSection.count() > 0) {
      await expect(aiSection).toBeVisible()
    }
  })
})

describe('üîß Technical Exploration Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å API endpoints', async ({ page }) => {
    await page.goto('/')
    
    // –ò—Å—Å–ª–µ–¥—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ API endpoints
    const endpoints = [
      '/api/test',
      '/api/subscribe',
      '/api/health',
      '/api/status'
    ]
    
    for (const endpoint of endpoints) {
      const response = await page.request.get(endpoint)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ endpoint –æ—Ç–≤–µ—á–∞–µ—Ç
      expect(response.status()).toBeOneOf([200, 404, 405])
      
      if (response.status() === 200) {
        const data = await response.json()
        expect(data).toBeTruthy()
      }
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –∫–æ–Ω—Å–æ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è', async ({ page }) => {
    await page.goto('/')
    
    const consoleMessages = []
    page.on('console', msg => {
      consoleMessages.push({
        type: msg.type(),
        text: msg.text(),
        location: msg.location()
      })
    })
    
    await page.waitForLoadState('networkidle')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
    const errors = consoleMessages.filter(msg => msg.type === 'error')
    const criticalErrors = errors.filter(error => 
      error.text.includes('Error') || error.text.includes('Failed')
    )
    
    expect(criticalErrors.length).toBe(0)
  })

  test('–¥–æ–ª–∂–µ–Ω –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å —Å–µ—Ç–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã', async ({ page }) => {
    const requests = []
    const responses = []
    
    page.on('request', request => {
      requests.push({
        url: request.url(),
        method: request.method(),
        headers: request.headers()
      })
    })
    
    page.on('response', response => {
      responses.push({
        url: response.url(),
        status: response.status(),
        headers: response.headers()
      })
    })
    
    await page.goto('/')
    await page.waitForLoadState('networkidle')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã —É—Å–ø–µ—à–Ω—ã
    const failedRequests = responses.filter(response => 
      response.status >= 400
    )
    
    expect(failedRequests.length).toBe(0)
  })
})