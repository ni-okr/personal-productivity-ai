/**
 * üë• –¢–ï–°–¢–´ –Æ–ó–ê–ë–ò–õ–ò–¢–ò
 * –ü–æ–∫—Ä—ã—Ç–∏–µ: —É–¥–æ–±—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ–ø—ã—Ç, –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
 */

import { test, expect, Page } from '@playwright/test'

describe('üéØ User Experience Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ –ø–æ–Ω—è—Ç–Ω—ã–º –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', async ({ page }) => {
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ä–∞–∑—É –ø–æ–Ω–∏–º–∞–µ—Ç, —á—Ç–æ –¥–µ–ª–∞—Ç—å
    const h1 = page.locator('h1')
    await expect(h1).toBeVisible()
    
    const title = await h1.textContent()
    expect(title).toContain('Personal Productivity AI')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —á–µ—Ç–∫–∏–π –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é
    const ctaButton = page.locator('[data-testid="subscribe-button"]')
    await expect(ctaButton).toBeVisible()
    
    const ctaText = await ctaButton.textContent()
    expect(ctaText).toContain('–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ email
    const emailInput = page.locator('[data-testid="email-input"]')
    await expect(emailInput).toBeVisible()
    
    const placeholder = await emailInput.getAttribute('placeholder')
    expect(placeholder).toContain('email')
  })

  test('–¥–æ–ª–∂–µ–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', async ({ page }) => {
    await page.goto('/')
    
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
    await page.fill('[data-testid="email-input"]', 'test@example.com')
    await page.click('[data-testid="subscribe-button"]')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—è–≤–∏–ª–æ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
    const statusElement = page.locator('[data-testid="subscription-status"]')
    await expect(statusElement).toBeVisible()
    
    const statusText = await statusElement.textContent()
    expect(statusText).toBeTruthy()
  })

  test('–¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ª–æ–≥–∏—á–Ω—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é', async ({ page }) => {
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—è
    const nav = page.locator('nav')
    if (await nav.count() > 0) {
      await expect(nav).toBeVisible()
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–≤–∏–≥–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–æ–≥–∏—á–Ω—ã–µ —Å—Å—ã–ª–∫–∏
      const links = nav.locator('a')
      const linkCount = await links.count()
      
      for (let i = 0; i < linkCount; i++) {
        const link = links.nth(i)
        const text = await link.textContent()
        const href = await link.getAttribute('href')
        
        // –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –ø–æ–Ω—è—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ –≤–∞–ª–∏–¥–Ω—ã–π href
        expect(text).toBeTruthy()
        expect(href).toBeTruthy()
      }
    }
  })
})

describe('‚å®Ô∏è Keyboard Navigation Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã', async ({ page }) => {
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–Ω–æ –Ω–∞–≤–∏–≥–∏—Ä–æ–≤–∞—Ç—å —Å Tab
    await page.keyboard.press('Tab')
    let focusedElement = page.locator(':focus')
    await expect(focusedElement).toBeVisible()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–Ω–æ –Ω–∞–≤–∏–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–∞–¥ —Å Shift+Tab
    await page.keyboard.press('Shift+Tab')
    focusedElement = page.locator(':focus')
    await expect(focusedElement).toBeVisible()
  })

  test('–¥–æ–ª–∂–µ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∞–∫—Ç–∏–≤–∞—Ü–∏—é —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã', async ({ page }) => {
    await page.goto('/')
    
    // –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É –ø–æ–¥–ø–∏—Å–∫–∏
    const subscribeButton = page.locator('[data-testid="subscribe-button"]')
    await subscribeButton.focus()
    
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å Enter
    await page.keyboard.press('Enter')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ —Å—Ä–∞–±–æ—Ç–∞–ª–∞
    const statusElement = page.locator('[data-testid="subscription-status"]')
    if (await statusElement.count() > 0) {
      await expect(statusElement).toBeVisible()
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–∞–º', async ({ page }) => {
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
      localStorage.setItem('auth-token', 'mock-token')
      localStorage.setItem('user', JSON.stringify({
        id: 'user-1',
        email: 'test@example.com',
        name: 'Test User',
        subscription: 'free'
      }))
    })
    
    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª
    await page.click('[data-testid="add-task-button"]')
    await expect(page.locator('[data-testid="task-modal"]')).toBeVisible()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–Ω–æ –Ω–∞–≤–∏–≥–∏—Ä–æ–≤–∞—Ç—å –≤–Ω—É—Ç—Ä–∏ –º–æ–¥–∞–ª–∞
    await page.keyboard.press('Tab')
    await page.keyboard.press('Tab')
    await page.keyboard.press('Tab')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–æ–∫—É—Å –æ—Å—Ç–∞–µ—Ç—Å—è –≤ –º–æ–¥–∞–ª–µ
    const focusedElement = page.locator(':focus')
    await expect(focusedElement).toBeAttached()
  })
})

describe('üì± Mobile Usability Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–¥–æ–±–Ω—ã–º –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö', async ({ page }) => {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–±–∏–ª—å–Ω—ã–π viewport
    await page.setViewportSize({ width: 375, height: 667 })
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ–º–µ—â–∞–µ—Ç—Å—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ
    const body = page.locator('body')
    const scrollWidth = await body.evaluate(el => el.scrollWidth)
    const clientWidth = await body.evaluate(el => el.clientWidth)
    
    expect(scrollWidth).toBeLessThanOrEqual(clientWidth * 1.1)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–∏–µ –¥–ª—è touch
    const buttons = page.locator('button')
    const buttonCount = await buttons.count()
    
    for (let i = 0; i < buttonCount; i++) {
      const button = buttons.nth(i)
      const boundingBox = await button.boundingBox()
      
      if (boundingBox) {
        // –ö–Ω–æ–ø–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 44x44 –ø–∏–∫—Å–µ–ª–µ–π
        expect(boundingBox.width).toBeGreaterThanOrEqual(44)
        expect(boundingBox.height).toBeGreaterThanOrEqual(44)
      }
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å touch –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ', async ({ page }) => {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–±–∏–ª—å–Ω—ã–π viewport
    await page.setViewportSize({ width: 375, height: 667 })
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º touch –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
    const subscribeButton = page.locator('[data-testid="subscribe-button"]')
    await subscribeButton.tap()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ —Å—Ä–∞–±–æ—Ç–∞–ª–∞
    const statusElement = page.locator('[data-testid="subscription-status"]')
    if (await statusElement.count() > 0) {
      await expect(statusElement).toBeVisible()
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å swipe –Ω–∞–≤–∏–≥–∞—Ü–∏—é', async ({ page }) => {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–±–∏–ª—å–Ω—ã–π viewport
    await page.setViewportSize({ width: 375, height: 667 })
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
      localStorage.setItem('auth-token', 'mock-token')
      localStorage.setItem('user', JSON.stringify({
        id: 'user-1',
        email: 'test@example.com',
        name: 'Test User',
        subscription: 'free'
      }))
    })
    
    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–Ω–æ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç
    const scrollableElement = page.locator('[data-testid="planner-content"]')
    const initialScrollTop = await scrollableElement.evaluate(el => el.scrollTop)
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º swipe –≤–Ω–∏–∑
    await page.mouse.move(200, 300)
    await page.mouse.down()
    await page.mouse.move(200, 200)
    await page.mouse.up()
    
    const newScrollTop = await scrollableElement.evaluate(el => el.scrollTop)
    expect(newScrollTop).not.toBe(initialScrollTop)
  })
})

describe('‚ôø Accessibility Usability Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏', async ({ page }) => {
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å alt –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    const images = page.locator('img')
    const imageCount = await images.count()
    
    for (let i = 0; i < imageCount; i++) {
      const img = images.nth(i)
      const alt = await img.getAttribute('alt')
      const role = await img.getAttribute('role')
      
      // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∏–º–µ—Ç—å alt –∞—Ç—Ä–∏–±—É—Ç –∏–ª–∏ role="presentation"
      expect(alt !== null || role === 'presentation').toBeTruthy()
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å screen readers', async ({ page }) => {
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å ARIA –∞—Ç—Ä–∏–±—É—Ç—ã
    const ariaElements = page.locator('[aria-label], [aria-describedby], [aria-labelledby]')
    const ariaCount = await ariaElements.count()
    
    // –î–æ–ª–∂–Ω—ã –±—ã—Ç—å ARIA –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è –≤–∞–∂–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    expect(ariaCount).toBeGreaterThan(0)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∏ –∏–º–µ—é—Ç –æ–ø–∏—Å–∞–Ω–∏—è
    const buttons = page.locator('button')
    const buttonCount = await buttons.count()
    
    for (let i = 0; i < buttonCount; i++) {
      const button = buttons.nth(i)
      const ariaLabel = await button.getAttribute('aria-label')
      const textContent = await button.textContent()
      
      // –ö–Ω–æ–ø–∫–∞ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –ª–∏–±–æ aria-label, –ª–∏–±–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
      expect(ariaLabel || textContent?.trim()).toBeTruthy()
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —Ü–≤–µ—Ç–æ–≤–æ–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç', async ({ page }) => {
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const elements = page.locator('h1, h2, h3, p, button, a')
    const elementCount = await elements.count()
    
    for (let i = 0; i < elementCount; i++) {
      const element = elements.nth(i)
      const isVisible = await element.isVisible()
      
      if (isVisible) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –∏–º–µ–µ—Ç —Ü–≤–µ—Ç
        const color = await element.evaluate(el => {
          return window.getComputedStyle(el).color
        })
        
        expect(color).not.toBe('rgba(0, 0, 0, 0)') // –ù–µ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π
        expect(color).not.toBe('transparent')
      }
    }
  })
})

describe('üé® Visual Design Usability Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–π –¥–∏–∑–∞–π–Ω', async ({ page }) => {
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —Å—Ç–∏–ª—å
    const buttons = page.locator('button')
    const buttonCount = await buttons.count()
    
    for (let i = 0; i < buttonCount; i++) {
      const button = buttons.nth(i)
      const isVisible = await button.isVisible()
      
      if (isVisible) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –∏–º–µ–µ—Ç —Ä–∞–∑—É–º–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        const boundingBox = await button.boundingBox()
        if (boundingBox) {
          expect(boundingBox.width).toBeGreaterThan(0)
          expect(boundingBox.height).toBeGreaterThan(0)
        }
      }
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —á–∏—Ç–∞–µ–º—ã–µ —à—Ä–∏—Ñ—Ç—ã', async ({ page }) => {
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç —á–∏—Ç–∞–µ–º
    const textElements = page.locator('h1, h2, h3, p, span, div')
    const elementCount = await textElements.count()
    
    for (let i = 0; i < elementCount; i++) {
      const element = textElements.nth(i)
      const text = await element.textContent()
      const isVisible = await element.isVisible()
      
      if (isVisible && text && text.trim()) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –Ω–µ —Å–ª–∏—à–∫–æ–º –º–µ–ª–∫–∏–π
        const fontSize = await element.evaluate(el => {
          return window.getComputedStyle(el).fontSize
        })
        
        const fontSizeValue = parseFloat(fontSize)
        expect(fontSizeValue).toBeGreaterThan(10) // –ú–∏–Ω–∏–º—É–º 10px
      }
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ª–æ–≥–∏—á–Ω—É—é –∏–µ—Ä–∞—Ä—Ö–∏—é –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤', async ({ page }) => {
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–¥—É—Ç –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    const headings = page.locator('h1, h2, h3, h4, h5, h6')
    const headingCount = await headings.count()
    
    for (let i = 0; i < headingCount; i++) {
      const heading = headings.nth(i)
      const tagName = await heading.evaluate(el => el.tagName.toLowerCase())
      const level = parseInt(tagName.substring(1))
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Ä–æ–≤–µ–Ω—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è
      if (i > 0) {
        const prevHeading = headings.nth(i - 1)
        const prevTagName = await prevHeading.evaluate(el => el.tagName.toLowerCase())
        const prevLevel = parseInt(prevTagName.substring(1))
        
        expect(level).toBeLessThanOrEqual(prevLevel + 1)
      }
    }
  })
})

describe('üîÑ Error Handling Usability Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–Ω—è—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö', async ({ page }) => {
    await page.goto('/')
    
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è —Å –Ω–µ–≤–µ—Ä–Ω—ã–º email
    await page.fill('[data-testid="email-input"]', 'invalid-email')
    await page.click('[data-testid="subscribe-button"]')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—è–≤–∏–ª–æ—Å—å –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    const errorMessage = page.locator('.error-message')
    if (await errorMessage.count() > 0) {
      const errorText = await errorMessage.textContent()
      expect(errorText).toContain('email')
      expect(errorText).toContain('–Ω–µ–≤–µ—Ä–Ω')
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –ø–æ–∑–≤–æ–ª—è—Ç—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏', async ({ page }) => {
    await page.goto('/')
    
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è —Å –Ω–µ–≤–µ—Ä–Ω—ã–º email
    await page.fill('[data-testid="email-input"]', 'invalid-email')
    await page.click('[data-testid="subscribe-button"]')
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º email
    await page.fill('[data-testid="email-input"]', 'test@example.com')
    await page.click('[data-testid="subscribe-button"]')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—à–∏–±–∫–∞ –∏—Å—á–µ–∑–ª–∞
    const errorMessage = page.locator('.error-message')
    if (await errorMessage.count() > 0) {
      const errorText = await errorMessage.textContent()
      expect(errorText).not.toContain('–Ω–µ–≤–µ—Ä–Ω')
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞—Ç—å –ø–æ—Ç–µ—Ä—é –¥–∞–Ω–Ω—ã—Ö', async ({ page }) => {
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
      localStorage.setItem('auth-token', 'mock-token')
      localStorage.setItem('user', JSON.stringify({
        id: 'user-1',
        email: 'test@example.com',
        name: 'Test User',
        subscription: 'free'
      }))
    })
    
    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
    await page.click('[data-testid="add-task-button"]')
    await page.fill('[data-testid="task-title"]', 'Test Task')
    await page.fill('[data-testid="task-description"]', 'Test Description')
    
    // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    await page.keyboard.press('Escape')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—è–≤–∏–ª–æ—Å—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ø–æ—Ç–µ—Ä–µ –¥–∞–Ω–Ω—ã—Ö
    const warningMessage = page.locator('.warning-message')
    if (await warningMessage.count() > 0) {
      const warningText = await warningMessage.textContent()
      expect(warningText).toContain('–ø–æ—Ç–µ—Ä—è')
    }
  })
})

describe('‚ö° Performance Usability Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –±—ã—Å—Ç—Ä–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è', async ({ page }) => {
    const startTime = Date.now()
    await page.goto('/')
    await page.waitForLoadState('networkidle')
    const loadTime = Date.now() - startTime
    
    // –°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 5 —Å–µ–∫—É–Ω–¥
    expect(loadTime).toBeLessThan(5000)
  })

  test('–¥–æ–ª–∂–µ–Ω –±—ã—Å—Ç—Ä–æ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è', async ({ page }) => {
    await page.goto('/')
    
    // –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –∫–ª–∏–∫
    const startTime = Date.now()
    await page.click('[data-testid="subscribe-button"]')
    const responseTime = Date.now() - startTime
    
    // –û—Ç–∫–ª–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω–µ–µ 1 —Å–µ–∫—É–Ω–¥—ã
    expect(responseTime).toBeLessThan(1000)
  })

  test('–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∑–∞–≥—Ä—É–∑–∫–∏', async ({ page }) => {
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
      localStorage.setItem('auth-token', 'mock-token')
      localStorage.setItem('user', JSON.stringify({
        id: 'user-1',
        email: 'test@example.com',
        name: 'Test User',
        subscription: 'free'
      }))
    })
    
    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∑–∞–≥—Ä—É–∑–∫–∏
    const loadingIndicators = page.locator('[aria-label="loading"], .loading, [data-testid="loading"]')
    if (await loadingIndicators.count() > 0) {
      await expect(loadingIndicators).toBeVisible()
    }
  })
})

describe('üéØ Task Completion Usability Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –ø–æ–∑–≤–æ–ª—è—Ç—å –ª–µ–≥–∫–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏', async ({ page }) => {
    await page.goto('/')
    
    // –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞: –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É
    await page.fill('[data-testid="email-input"]', 'test@example.com')
    await page.click('[data-testid="subscribe-button"]')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
    const statusElement = page.locator('[data-testid="subscription-status"]')
    await expect(statusElement).toBeVisible()
  })

  test('–¥–æ–ª–∂–µ–Ω –ø–æ–∑–≤–æ–ª—è—Ç—å –ª–µ–≥–∫–æ —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∞–º–∏', async ({ page }) => {
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
      localStorage.setItem('auth-token', 'mock-token')
      localStorage.setItem('user', JSON.stringify({
        id: 'user-1',
        email: 'test@example.com',
        name: 'Test User',
        subscription: 'free'
      }))
    })
    
    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞: –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É
    await page.click('[data-testid="add-task-button"]')
    await page.fill('[data-testid="task-title"]', 'Test Task')
    await page.click('[data-testid="save-task-button"]')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–∏–ª–∞—Å—å
    await expect(page.locator('.task-card')).toBeVisible()
  })

  test('–¥–æ–ª–∂–µ–Ω –ø–æ–∑–≤–æ–ª—è—Ç—å –ª–µ–≥–∫–æ –Ω–∞–≤–∏–≥–∏—Ä–æ–≤–∞—Ç—å –º–µ–∂–¥—É —Ä–∞–∑–¥–µ–ª–∞–º–∏', async ({ page }) => {
    await page.goto('/')
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫—É
    await page.goto('/planner')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
    await expect(page.locator('body')).toBeVisible()
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
    await expect(page.locator('h1')).toBeVisible()
  })
})