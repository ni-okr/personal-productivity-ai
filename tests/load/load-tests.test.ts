/**
 * ‚ö° –ù–ê–ì–†–£–ó–û–ß–ù–´–ï –¢–ï–°–¢–´
 * –ü–æ–∫—Ä—ã—Ç–∏–µ: –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π, —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
 */

import { test, expect, Page } from '@playwright/test'

describe('üöÄ Basic Load Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –≤—ã–¥–µ—Ä–∂–∏–≤–∞—Ç—å –±–∞–∑–æ–≤—É—é –Ω–∞–≥—Ä—É–∑–∫—É', async ({ page }) => {
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π
    const startTime = Date.now()
    await page.waitForLoadState('networkidle')
    const loadTime = Date.now() - startTime
    
    // –°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 5 —Å–µ–∫—É–Ω–¥
    expect(loadTime).toBeLessThan(5000)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    await expect(page.locator('h1')).toBeVisible()
    await expect(page.locator('[data-testid="email-input"]')).toBeVisible()
    await expect(page.locator('[data-testid="subscribe-button"]')).toBeVisible()
  })

  test('–¥–æ–ª–∂–µ–Ω –≤—ã–¥–µ—Ä–∂–∏–≤–∞—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã', async ({ page }) => {
    await page.goto('/')
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    const requests = []
    page.on('request', request => {
      requests.push(request.url())
    })
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
    for (let i = 0; i < 5; i++) {
      await page.reload()
      await page.waitForLoadState('networkidle')
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã —É—Å–ø–µ—à–Ω—ã
    const responses = []
    page.on('response', response => {
      responses.push(response.status())
    })
    
    await page.reload()
    await page.waitForLoadState('networkidle')
    
    // –ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—à–∏–±–æ–∫ 4xx –∏ 5xx
    const errorResponses = responses.filter(status => status >= 400)
    expect(errorResponses.length).toBe(0)
  })

  test('–¥–æ–ª–∂–µ–Ω –≤—ã–¥–µ—Ä–∂–∏–≤–∞—Ç—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è', async ({ page }) => {
    await page.goto('/')
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    const actions = [
      page.fill('[data-testid="email-input"]', 'test1@example.com'),
      page.fill('[data-testid="email-input"]', 'test2@example.com'),
      page.fill('[data-testid="email-input"]', 'test3@example.com'),
      page.click('[data-testid="subscribe-button"]'),
      page.click('[data-testid="subscribe-button"]'),
      page.click('[data-testid="subscribe-button"]')
    ]
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    await Promise.all(actions)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ —Å–ª–æ–º–∞–ª–∞—Å—å
    await expect(page.locator('h1')).toBeVisible()
    await expect(page.locator('[data-testid="email-input"]')).toBeVisible()
    await expect(page.locator('[data-testid="subscribe-button"]')).toBeVisible()
  })
})

describe('üìä Memory Load Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–∞–º—è—Ç—å', async ({ page }) => {
    await page.goto('/')
    await page.waitForLoadState('networkidle')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
    const memoryUsage = await page.evaluate(() => {
      if ('memory' in performance) {
        return (performance as any).memory.usedJSHeapSize
      }
      return 0
    })
    
    // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–∑—É–º–Ω—ã–º
    expect(memoryUsage).toBeLessThan(100 * 1024 * 1024) // 100MB
  })

  test('–¥–æ–ª–∂–µ–Ω –æ—Å–≤–æ–±–æ–∂–¥–∞—Ç—å –ø–∞–º—è—Ç—å –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏', async ({ page }) => {
    await page.goto('/')
    await page.waitForLoadState('networkidle')
    
    const initialMemory = await page.evaluate(() => {
      if ('memory' in performance) {
        return (performance as any).memory.usedJSHeapSize
      }
      return 0
    })
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –¥—Ä—É–≥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await page.goto('/planner')
    await page.waitForLoadState('networkidle')
    
    const afterNavigationMemory = await page.evaluate(() => {
      if ('memory' in performance) {
        return (performance as any).memory.usedJSHeapSize
      }
      return 0
    })
    
    // –ü–∞–º—è—Ç—å –Ω–µ –¥–æ–ª–∂–Ω–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å—Å—è
    expect(afterNavigationMemory - initialMemory).toBeLessThan(50 * 1024 * 1024) // 50MB
  })

  test('–¥–æ–ª–∂–µ–Ω –æ—á–∏—â–∞—Ç—å event listeners', async ({ page }) => {
    await page.goto('/')
    await page.waitForLoadState('networkidle')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏ –≤ event listeners
    const eventListeners = await page.evaluate(() => {
      const elements = document.querySelectorAll('*')
      let totalListeners = 0
      
      elements.forEach(element => {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ event listeners
        // –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        totalListeners += element.attributes.length
      })
      
      return totalListeners
    })
    
    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–∑—É–º–Ω—ã–º
    expect(eventListeners).toBeLessThan(1000)
  })
})

describe('üîÑ Concurrency Load Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', async ({ page }) => {
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const userCount = 10
    const promises = []
    
    for (let i = 0; i < userCount; i++) {
      const promise = page.goto('/').then(async () => {
        await page.waitForLoadState('networkidle')
        return page.locator('h1').isVisible()
      })
      promises.push(promise)
    }
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    const results = await Promise.all(promises)
    
    // –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º–∏
    expect(results.every(result => result)).toBe(true)
  })

  test('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ API –∑–∞–ø—Ä–æ—Å—ã', async ({ page }) => {
    await page.goto('/')
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ API –∑–∞–ø—Ä–æ—Å—ã
    const apiRequests = []
    for (let i = 0; i < 10; i++) {
      const request = page.request.get('/api/test')
      apiRequests.push(request)
    }
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    const responses = await Promise.all(apiRequests)
    
    // –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º–∏
    const successResponses = responses.filter(response => response.status() === 200)
    expect(successResponses.length).toBe(responses.length)
  })

  test('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã', async ({ page }) => {
    await page.goto('/')
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º
    const formSubmissions = []
    for (let i = 0; i < 5; i++) {
      const submission = page.fill('[data-testid="email-input"]', `test${i}@example.com`)
        .then(() => page.click('[data-testid="subscribe-button"]'))
      formSubmissions.push(submission)
    }
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    await Promise.all(formSubmissions)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ —Å–ª–æ–º–∞–ª–∞—Å—å
    await expect(page.locator('h1')).toBeVisible()
    await expect(page.locator('[data-testid="email-input"]')).toBeVisible()
    await expect(page.locator('[data-testid="subscribe-button"]')).toBeVisible()
  })
})

describe('üì± Mobile Load Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –≤—ã–¥–µ—Ä–∂–∏–≤–∞—Ç—å –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö', async ({ page }) => {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–±–∏–ª—å–Ω—ã–π viewport
    await page.setViewportSize({ width: 375, height: 667 })
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –±—ã—Å—Ç—Ä–æ
    const startTime = Date.now()
    await page.waitForLoadState('networkidle')
    const loadTime = Date.now() - startTime
    
    // –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –±—ã—Å—Ç—Ä–µ–µ
    expect(loadTime).toBeLessThan(3000)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ–º–µ—â–∞–µ—Ç—Å—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ
    const body = page.locator('body')
    const scrollWidth = await body.evaluate(el => el.scrollWidth)
    const clientWidth = await body.evaluate(el => el.clientWidth)
    
    expect(scrollWidth).toBeLessThanOrEqual(clientWidth * 1.1)
  })

  test('–¥–æ–ª–∂–µ–Ω –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤', async ({ page }) => {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–±–∏–ª—å–Ω—ã–π viewport
    await page.setViewportSize({ width: 375, height: 667 })
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
    const images = page.locator('img')
    const imageCount = await images.count()
    
    for (let i = 0; i < imageCount; i++) {
      const img = images.nth(i)
      const src = await img.getAttribute('src')
      const srcset = await img.getAttribute('srcset')
      
      // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å srcset –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ —ç–∫—Ä–∞–Ω–∞
      if (src && !srcset) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ
        const boundingBox = await img.boundingBox()
        if (boundingBox) {
          expect(boundingBox.width).toBeLessThan(400) // –ù–µ –±–æ–ª—å—à–µ —à–∏—Ä–∏–Ω—ã —ç–∫—Ä–∞–Ω–∞
        }
      }
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å touch –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π', async ({ page }) => {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–±–∏–ª—å–Ω—ã–π viewport
    await page.setViewportSize({ width: 375, height: 667 })
    await page.goto('/')
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ touch –¥–µ–π—Å—Ç–≤–∏—è
    const touchActions = []
    for (let i = 0; i < 10; i++) {
      const action = page.tap('[data-testid="subscribe-button"]')
      touchActions.push(action)
    }
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    await Promise.all(touchActions)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ —Å–ª–æ–º–∞–ª–∞—Å—å
    await expect(page.locator('h1')).toBeVisible()
    await expect(page.locator('[data-testid="subscribe-button"]')).toBeVisible()
  })
})

describe('üåê Network Load Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –≤—ã–¥–µ—Ä–∂–∏–≤–∞—Ç—å –º–µ–¥–ª–µ–Ω–Ω—É—é —Å–µ—Ç—å', async ({ page }) => {
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –º–µ–¥–ª–µ–Ω–Ω—É—é —Å–µ—Ç—å
    await page.route('**/*', route => {
      setTimeout(() => route.continue(), 1000) // 1 —Å–µ–∫—É–Ω–¥–∞ –∑–∞–¥–µ—Ä–∂–∫–∏
    })
    
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –º–µ–¥–ª–µ–Ω–Ω—É—é —Å–µ—Ç—å
    const startTime = Date.now()
    await page.waitForLoadState('networkidle')
    const loadTime = Date.now() - startTime
    
    // –°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 10 —Å–µ–∫—É–Ω–¥ –¥–∞–∂–µ –ø—Ä–∏ –º–µ–¥–ª–µ–Ω–Ω–æ–π —Å–µ—Ç–∏
    expect(loadTime).toBeLessThan(10000)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    await expect(page.locator('h1')).toBeVisible()
    await expect(page.locator('[data-testid="email-input"]')).toBeVisible()
    await expect(page.locator('[data-testid="subscribe-button"]')).toBeVisible()
  })

  test('–¥–æ–ª–∂–µ–Ω –≤—ã–¥–µ—Ä–∂–∏–≤–∞—Ç—å –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—É—é —Å–µ—Ç—å', async ({ page }) => {
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—É—é —Å–µ—Ç—å
    let requestCount = 0
    await page.route('**/*', route => {
      requestCount++
      if (requestCount % 3 === 0) {
        // –ö–∞–∂–¥—ã–π —Ç—Ä–µ—Ç–∏–π –∑–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—è–µ–º
        route.abort()
      } else {
        route.continue()
      }
    })
    
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—É—é —Å–µ—Ç—å
    await expect(page.locator('h1')).toBeVisible()
    await expect(page.locator('[data-testid="email-input"]')).toBeVisible()
    await expect(page.locator('[data-testid="subscribe-button"]')).toBeVisible()
  })

  test('–¥–æ–ª–∂–µ–Ω –≤—ã–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤—ã—Å–æ–∫—É—é –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ API', async ({ page }) => {
    await page.goto('/')
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ API –∑–∞–ø—Ä–æ—Å–æ–≤
    const apiRequests = []
    for (let i = 0; i < 50; i++) {
      const request = page.request.get('/api/test')
      apiRequests.push(request)
    }
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    const responses = await Promise.all(apiRequests)
    
    // –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º–∏
    const successResponses = responses.filter(response => response.status() === 200)
    expect(successResponses.length).toBeGreaterThan(responses.length * 0.8) // 80% —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
  })
})

describe('üíæ Data Load Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –±–æ–ª—å—à–∏–µ –æ–±—ä–µ–º—ã –¥–∞–Ω–Ω—ã—Ö', async ({ page }) => {
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
      localStorage.setItem('auth-token', 'mock-token')
      localStorage.setItem('user', JSON.stringify({
        id: 'user-1',
        email: 'test@example.com',
        name: 'Test User',
        subscription: 'free'
      }))
    })
    
    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // –î–æ–±–∞–≤–ª—è–µ–º –º–Ω–æ–≥–æ –∑–∞–¥–∞—á
    const taskCount = 100
    for (let i = 0; i < taskCount; i++) {
      await page.click('[data-testid="add-task-button"]')
      await page.fill('[data-testid="task-title"]', `Task ${i}`)
      await page.fill('[data-testid="task-description"]', `Description for task ${i}`)
      await page.click('[data-testid="save-task-button"]')
      await page.waitForTimeout(10) // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∑–∞–¥–∞—á–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    const taskCards = page.locator('.task-card')
    const loadedTaskCount = await taskCards.count()
    expect(loadedTaskCount).toBeGreaterThan(0)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ —Å–ª–æ–º–∞–ª–∞—Å—å
    await expect(page.locator('[data-testid="planner-content"]')).toBeVisible()
  })

  test('–¥–æ–ª–∂–µ–Ω —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –±–æ–ª—å—à–∏–µ —Ñ–æ—Ä–º—ã', async ({ page }) => {
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
      localStorage.setItem('auth-token', 'mock-token')
      localStorage.setItem('user', JSON.stringify({
        id: 'user-1',
        email: 'test@example.com',
        name: 'Test User',
        subscription: 'free'
      }))
    })
    
    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –±–æ–ª—å—à—É—é —Ñ–æ—Ä–º—É
    await page.click('[data-testid="add-task-button"]')
    
    const longTitle = 'A'.repeat(1000) // –û—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    const longDescription = 'B'.repeat(10000) // –û—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
    
    await page.fill('[data-testid="task-title"]', longTitle)
    await page.fill('[data-testid="task-description"]', longDescription)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–æ—Ä–º–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
    const titleValue = await page.locator('[data-testid="task-title"]').inputValue()
    const descriptionValue = await page.locator('[data-testid="task-description"]').inputValue()
    
    expect(titleValue).toBe(longTitle)
    expect(descriptionValue).toBe(longDescription)
  })

  test('–¥–æ–ª–∂–µ–Ω —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –±–æ–ª—å—à–∏–µ —Å–ø–∏—Å–∫–∏', async ({ page }) => {
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
      localStorage.setItem('auth-token', 'mock-token')
      localStorage.setItem('user', JSON.stringify({
        id: 'user-1',
        email: 'test@example.com',
        name: 'Test User',
        subscription: 'free'
      }))
    })
    
    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // –î–æ–±–∞–≤–ª—è–µ–º –º–Ω–æ–≥–æ –∑–∞–¥–∞—á –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ–ª—å—à–æ–≥–æ —Å–ø–∏—Å–∫–∞
    const taskCount = 50
    for (let i = 0; i < taskCount; i++) {
      await page.click('[data-testid="add-task-button"]')
      await page.fill('[data-testid="task-title"]', `Task ${i}`)
      await page.click('[data-testid="save-task-button"]')
      await page.waitForTimeout(10)
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ø–∏—Å–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è
    const taskCards = page.locator('.task-card')
    const loadedTaskCount = await taskCards.count()
    expect(loadedTaskCount).toBeGreaterThan(0)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–Ω–æ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫
    const scrollableElement = page.locator('[data-testid="planner-content"]')
    const initialScrollTop = await scrollableElement.evaluate(el => el.scrollTop)
    
    await scrollableElement.evaluate(el => el.scrollTop = 1000)
    const newScrollTop = await scrollableElement.evaluate(el => el.scrollTop)
    
    expect(newScrollTop).not.toBe(initialScrollTop)
  })
})

describe('‚ö° Performance Load Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤—ã—Å–æ–∫—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π', async ({ page }) => {
    await page.goto('/')
    
    // –ò–∑–º–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π
    const startTime = Date.now()
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏–π
    for (let i = 0; i < 10; i++) {
      await page.fill('[data-testid="email-input"]', `test${i}@example.com`)
      await page.click('[data-testid="subscribe-button"]')
      await page.waitForTimeout(100)
    }
    
    const endTime = Date.now()
    const totalTime = endTime - startTime
    
    // –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ–ª–∂–Ω—ã –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –±—ã—Å—Ç—Ä–æ
    expect(totalTime).toBeLessThan(5000) // 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è 10 –¥–µ–π—Å—Ç–≤–∏–π
  })

  test('–¥–æ–ª–∂–µ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', async ({ page }) => {
    await page.goto('/')
    
    // –ò–∑–º–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
    const performanceMeasurements = []
    
    for (let i = 0; i < 5; i++) {
      const startTime = Date.now()
      await page.reload()
      await page.waitForLoadState('networkidle')
      const endTime = Date.now()
      
      performanceMeasurements.push(endTime - startTime)
    }
    
    // –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω–æ–π
    const averageTime = performanceMeasurements.reduce((a, b) => a + b, 0) / performanceMeasurements.length
    const maxTime = Math.max(...performanceMeasurements)
    const minTime = Math.min(...performanceMeasurements)
    
    // –†–∞–∑–±—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–º
    expect(maxTime - minTime).toBeLessThan(averageTime * 0.5) // 50% –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
  })

  test('–¥–æ–ª–∂–µ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –±—ã—Å—Ç—Ä—ã–π –æ—Ç–∫–ª–∏–∫ –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è', async ({ page }) => {
    await page.goto('/')
    
    // –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è
    const responseTimes = []
    
    for (let i = 0; i < 10; i++) {
      const startTime = Date.now()
      await page.click('[data-testid="subscribe-button"]')
      const endTime = Date.now()
      
      responseTimes.push(endTime - startTime)
    }
    
    // –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±—ã—Å—Ç—Ä—ã–º –∏ —Å—Ç–∞–±–∏–ª—å–Ω—ã–º
    const averageResponseTime = responseTimes.reduce((a, b) => a + b, 0) / responseTimes.length
    expect(averageResponseTime).toBeLessThan(100) // 100 –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥
    
    // –†–∞–∑–±—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–º
    const maxResponseTime = Math.max(...responseTimes)
    const minResponseTime = Math.min(...responseTimes)
    expect(maxResponseTime - minResponseTime).toBeLessThan(50) // 50 –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥
  })
})