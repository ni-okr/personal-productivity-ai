/**
 * ‚ôø –¢–ï–°–¢–´ –î–û–°–¢–£–ü–ù–û–°–¢–ò
 * –ü–æ–∫—Ä—ã—Ç–∏–µ: WCAG 2.1 AA, ARIA, —Å–µ–º–∞–Ω—Ç–∏–∫–∞
 */

import { test, expect, Page } from '@playwright/test'

describe('üéØ Keyboard Navigation Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã', async ({ page }) => {
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–Ω–æ –¥–æ–±—Ä–∞—Ç—å—Å—è –¥–æ –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    await page.keyboard.press('Tab')
    await expect(page.locator(':focus')).toBeVisible()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ –æ—Å–Ω–æ–≤–Ω—ã–º —ç–ª–µ–º–µ–Ω—Ç–∞–º
    const focusableElements = [
      '[data-testid="subscribe-button"]',
      '[data-testid="email-input"]',
      'button',
      'a',
      'input',
      'select',
      'textarea'
    ]
    
    for (const selector of focusableElements) {
      const element = page.locator(selector).first()
      if (await element.count() > 0) {
        await element.focus()
        await expect(element).toBeFocused()
      }
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é —Å Tab –∏ Shift+Tab', async ({ page }) => {
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
      localStorage.setItem('auth-token', 'mock-token')
      localStorage.setItem('user', JSON.stringify({
        id: 'user-1',
        email: 'test@example.com',
        name: 'Test User',
        subscription: 'free'
      }))
    })
    
    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –≤–ø–µ—Ä–µ–¥
    await page.keyboard.press('Tab')
    let focusedElement = page.locator(':focus')
    await expect(focusedElement).toBeVisible()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –Ω–∞–∑–∞–¥
    await page.keyboard.press('Shift+Tab')
    focusedElement = page.locator(':focus')
    await expect(focusedElement).toBeVisible()
  })

  test('–¥–æ–ª–∂–µ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∞–∫—Ç–∏–≤–∞—Ü–∏—é —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å Enter –∏ Space', async ({ page }) => {
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
      localStorage.setItem('auth-token', 'mock-token')
      localStorage.setItem('user', JSON.stringify({
        id: 'user-1',
        email: 'test@example.com',
        name: 'Test User',
        subscription: 'free'
      }))
    })
    
    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
    const addButton = page.locator('[data-testid="add-task-button"]')
    await addButton.focus()
    
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å Enter
    await page.keyboard.press('Enter')
    await expect(page.locator('[data-testid="task-modal"]')).toBeVisible()
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª
    await page.keyboard.press('Escape')
    await expect(page.locator('[data-testid="task-modal"]')).not.toBeVisible()
    
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å Space
    await addButton.focus()
    await page.keyboard.press('Space')
    await expect(page.locator('[data-testid="task-modal"]')).toBeVisible()
  })

  test('–¥–æ–ª–∂–µ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–∞–º', async ({ page }) => {
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
      localStorage.setItem('auth-token', 'mock-token')
      localStorage.setItem('user', JSON.stringify({
        id: 'user-1',
        email: 'test@example.com',
        name: 'Test User',
        subscription: 'free'
      }))
    })
    
    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª
    await page.click('[data-testid="add-task-button"]')
    await expect(page.locator('[data-testid="task-modal"]')).toBeVisible()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–æ–∫—É—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –º–æ–¥–∞–ª–µ
    const modal = page.locator('[data-testid="task-modal"]')
    const focusedElement = page.locator(':focus')
    await expect(focusedElement).toBeAttached()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–Ω–æ –Ω–∞–≤–∏–≥–∏—Ä–æ–≤–∞—Ç—å –≤–Ω—É—Ç—Ä–∏ –º–æ–¥–∞–ª–∞
    await page.keyboard.press('Tab')
    await page.keyboard.press('Tab')
    await page.keyboard.press('Tab')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–æ–∫—É—Å –æ—Å—Ç–∞–µ—Ç—Å—è –≤ –º–æ–¥–∞–ª–µ
    const focusedInModal = page.locator(':focus')
    await expect(focusedInModal).toBeAttached()
  })
})

describe('üîç Screen Reader Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ ARIA –∞—Ç—Ä–∏–±—É—Ç—ã', async ({ page }) => {
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ aria-label –¥–ª—è –∫–Ω–æ–ø–æ–∫
    const buttons = page.locator('button')
    const buttonCount = await buttons.count()
    
    for (let i = 0; i < buttonCount; i++) {
      const button = buttons.nth(i)
      const ariaLabel = await button.getAttribute('aria-label')
      const textContent = await button.textContent()
      
      // –ö–Ω–æ–ø–∫–∞ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –ª–∏–±–æ aria-label, –ª–∏–±–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
      expect(ariaLabel || textContent?.trim()).toBeTruthy()
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ ARIA —Ä–æ–ª–∏', async ({ page }) => {
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ ARIA —Ä–æ–ª–∏
    const main = page.locator('main')
    await expect(main).toHaveAttribute('role', 'main')
    
    const navigation = page.locator('nav')
    await expect(navigation).toHaveAttribute('role', 'navigation')
    
    const heading = page.locator('h1')
    await expect(heading).toHaveAttribute('role', 'heading')
  })

  test('–¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤', async ({ page }) => {
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å h1
    const h1 = page.locator('h1')
    await expect(h1).toHaveCount(1)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–¥—É—Ç –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    const headings = page.locator('h1, h2, h3, h4, h5, h6')
    const headingCount = await headings.count()
    
    for (let i = 0; i < headingCount; i++) {
      const heading = headings.nth(i)
      const tagName = await heading.evaluate(el => el.tagName.toLowerCase())
      const level = parseInt(tagName.substring(1))
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Ä–æ–≤–µ–Ω—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è
      if (i > 0) {
        const prevHeading = headings.nth(i - 1)
        const prevTagName = await prevHeading.evaluate(el => el.tagName.toLowerCase())
        const prevLevel = parseInt(prevTagName.substring(1))
        
        expect(level).toBeLessThanOrEqual(prevLevel + 1)
      }
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ alt –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π', async ({ page }) => {
    await page.goto('/')
    
    const images = page.locator('img')
    const imageCount = await images.count()
    
    for (let i = 0; i < imageCount; i++) {
      const img = images.nth(i)
      const alt = await img.getAttribute('alt')
      const role = await img.getAttribute('role')
      
      // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∏–º–µ—Ç—å alt –∞—Ç—Ä–∏–±—É—Ç –∏–ª–∏ role="presentation"
      expect(alt !== null || role === 'presentation').toBeTruthy()
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ aria-describedby –∞—Ç—Ä–∏–±—É—Ç—ã', async ({ page }) => {
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
      localStorage.setItem('auth-token', 'mock-token')
      localStorage.setItem('user', JSON.stringify({
        id: 'user-1',
        email: 'test@example.com',
        name: 'Test User',
        subscription: 'free'
      }))
    })
    
    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—è –≤–≤–æ–¥–∞ –∏–º–µ—é—Ç –æ–ø–∏—Å–∞–Ω–∏—è
    const inputs = page.locator('input, textarea, select')
    const inputCount = await inputs.count()
    
    for (let i = 0; i < inputCount; i++) {
      const input = inputs.nth(i)
      const ariaDescribedBy = await input.getAttribute('aria-describedby')
      const ariaLabel = await input.getAttribute('aria-label')
      const placeholder = await input.getAttribute('placeholder')
      
      // –ü–æ–ª–µ –≤–≤–æ–¥–∞ –¥–æ–ª–∂–Ω–æ –∏–º–µ—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ
      expect(ariaDescribedBy || ariaLabel || placeholder).toBeTruthy()
    }
  })
})

describe('üé® Visual Accessibility Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —Ü–≤–µ—Ç–æ–≤–æ–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç', async ({ page }) => {
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const elements = [
      'h1', 'h2', 'h3', 'p', 'button', 'a', 'input', 'label'
    ]
    
    for (const selector of elements) {
      const element = page.locator(selector).first()
      if (await element.count() > 0) {
        const color = await element.evaluate(el => {
          const styles = window.getComputedStyle(el)
          return {
            color: styles.color,
            backgroundColor: styles.backgroundColor
          }
        })
        
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞
        expect(color.color).toBeTruthy()
      }
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –¥–æ 200%', async ({ page }) => {
    await page.goto('/')
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∞—Å—à—Ç–∞–± –¥–æ 200%
    await page.evaluate(() => {
      document.body.style.zoom = '200%'
    })
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–Ω—Ç –æ—Å—Ç–∞–µ—Ç—Å—è —á–∏—Ç–∞–µ–º—ã–º
    const h1 = page.locator('h1')
    await expect(h1).toBeVisible()
    
    const button = page.locator('button').first()
    await expect(button).toBeVisible()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
    const body = page.locator('body')
    const scrollWidth = await body.evaluate(el => el.scrollWidth)
    const clientWidth = await body.evaluate(el => el.clientWidth)
    
    expect(scrollWidth).toBeLessThanOrEqual(clientWidth * 1.1) // 10% –¥–æ–ø—É—Å–∫
  })

  test('–¥–æ–ª–∂–µ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ç–µ–º–Ω—É—é —Ç–µ–º—É', async ({ page }) => {
    await page.goto('/')
    
    // –í–∫–ª—é—á–∞–µ–º —Ç–µ–º–Ω—É—é —Ç–µ–º—É
    await page.evaluate(() => {
      document.documentElement.setAttribute('data-theme', 'dark')
    })
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–Ω—Ç –æ—Å—Ç–∞–µ—Ç—Å—è —á–∏—Ç–∞–µ–º—ã–º
    const h1 = page.locator('h1')
    await expect(h1).toBeVisible()
    
    const button = page.locator('button').first()
    await expect(button).toBeVisible()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–≤–µ—Ç–∞ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
    const body = page.locator('body')
    const backgroundColor = await body.evaluate(el => {
      return window.getComputedStyle(el).backgroundColor
    })
    
    expect(backgroundColor).toBeTruthy()
  })

  test('–¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –≤–∏–¥–∏–º—ã–µ —Ñ–æ–∫—É—Å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã', async ({ page }) => {
    await page.goto('/')
    
    // –ù–∞—Ö–æ–¥–∏–º —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º—ã–π —ç–ª–µ–º–µ–Ω—Ç
    const button = page.locator('button').first()
    await button.focus()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –≤–∏–¥–∏–º—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ñ–æ–∫—É—Å–∞
    const focusStyles = await button.evaluate(el => {
      const styles = window.getComputedStyle(el)
      return {
        outline: styles.outline,
        outlineWidth: styles.outlineWidth,
        outlineStyle: styles.outlineStyle,
        outlineColor: styles.outlineColor
      }
    })
    
    // –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∏–¥–∏–º—ã–π outline –∏–ª–∏ box-shadow
    expect(focusStyles.outlineWidth !== '0px' || focusStyles.outlineStyle !== 'none').toBeTruthy()
  })
})

describe('üîä Audio Accessibility Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –¥–ª—è –∞—É–¥–∏–æ', async ({ page }) => {
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç –∞—É–¥–∏–æ –±–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤
    const audioElements = page.locator('audio')
    const audioCount = await audioElements.count()
    
    for (let i = 0; i < audioCount; i++) {
      const audio = audioElements.nth(i)
      const controls = await audio.getAttribute('controls')
      const ariaLabel = await audio.getAttribute('aria-label')
      const title = await audio.getAttribute('title')
      
      // –ê—É–¥–∏–æ –¥–æ–ª–∂–Ω–æ –∏–º–µ—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ
      expect(controls || ariaLabel || title).toBeTruthy()
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–≤—É–∫–æ–º', async ({ page }) => {
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞
    const audioElements = page.locator('audio')
    const audioCount = await audioElements.count()
    
    for (let i = 0; i < audioCount; i++) {
      const audio = audioElements.nth(i)
      const autoplay = await audio.getAttribute('autoplay')
      const muted = await audio.getAttribute('muted')
      
      // –ê—É–¥–∏–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è
      expect(autoplay).toBeFalsy()
    }
  })
})

describe('üì± Mobile Accessibility Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö', async ({ page }) => {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–±–∏–ª—å–Ω—ã–π viewport
    await page.setViewportSize({ width: 375, height: 667 })
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ–º–µ—â–∞–µ—Ç—Å—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ
    const body = page.locator('body')
    const scrollWidth = await body.evaluate(el => el.scrollWidth)
    const clientWidth = await body.evaluate(el => el.clientWidth)
    
    expect(scrollWidth).toBeLessThanOrEqual(clientWidth * 1.1)
  })

  test('–¥–æ–ª–∂–µ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å touch –Ω–∞–≤–∏–≥–∞—Ü–∏—é', async ({ page }) => {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–±–∏–ª—å–Ω—ã–π viewport
    await page.setViewportSize({ width: 375, height: 667 })
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
      localStorage.setItem('auth-token', 'mock-token')
      localStorage.setItem('user', JSON.stringify({
        id: 'user-1',
        email: 'test@example.com',
        name: 'Test User',
        subscription: 'free'
      }))
    })
    
    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–∏–µ –¥–ª—è touch
    const buttons = page.locator('button')
    const buttonCount = await buttons.count()
    
    for (let i = 0; i < buttonCount; i++) {
      const button = buttons.nth(i)
      const boundingBox = await button.boundingBox()
      
      if (boundingBox) {
        // –ö–Ω–æ–ø–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 44x44 –ø–∏–∫—Å–µ–ª–µ–π
        expect(boundingBox.width).toBeGreaterThanOrEqual(44)
        expect(boundingBox.height).toBeGreaterThanOrEqual(44)
      }
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å swipe –Ω–∞–≤–∏–≥–∞—Ü–∏—é', async ({ page }) => {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–±–∏–ª—å–Ω—ã–π viewport
    await page.setViewportSize({ width: 375, height: 667 })
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
      localStorage.setItem('auth-token', 'mock-token')
      localStorage.setItem('user', JSON.stringify({
        id: 'user-1',
        email: 'test@example.com',
        name: 'Test User',
        subscription: 'free'
      }))
    })
    
    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–Ω–æ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç
    const scrollableElement = page.locator('[data-testid="planner-content"]')
    const initialScrollTop = await scrollableElement.evaluate(el => el.scrollTop)
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º swipe –≤–Ω–∏–∑
    await page.mouse.move(200, 300)
    await page.mouse.down()
    await page.mouse.move(200, 200)
    await page.mouse.up()
    
    const newScrollTop = await scrollableElement.evaluate(el => el.scrollTop)
    expect(newScrollTop).not.toBe(initialScrollTop)
  })
})

describe('üß† Cognitive Accessibility Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø–æ–Ω—è—Ç–Ω—ã–µ –∏ –ø—Ä–æ—Å—Ç—ã–µ —Ç–µ–∫—Å—Ç—ã', async ({ page }) => {
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç—ã –Ω–µ —Å–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω—ã–µ
    const texts = page.locator('p, h1, h2, h3, h4, h5, h6, button, a, label')
    const textCount = await texts.count()
    
    for (let i = 0; i < textCount; i++) {
      const text = texts.nth(i)
      const textContent = await text.textContent()
      
      if (textContent) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
        expect(textContent.length).toBeLessThan(200)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤ –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π
        const complexTerms = ['API', 'SDK', 'Framework', 'Library']
        const hasComplexTerms = complexTerms.some(term => 
          textContent.includes(term)
        )
        
        if (hasComplexTerms) {
          // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–ª–æ–∂–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã, –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
          const parent = text.locator('..')
          const parentText = await parent.textContent()
          expect(parentText?.length).toBeGreaterThan(textContent.length)
        }
      }
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —á–µ—Ç–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—é', async ({ page }) => {
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —á–µ—Ç–∫–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
    const nav = page.locator('nav')
    await expect(nav).toBeVisible()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ö–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏
    const breadcrumbs = page.locator('[aria-label="breadcrumb"], .breadcrumb')
    if (await breadcrumbs.count() > 0) {
      await expect(breadcrumbs).toBeVisible()
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å skip links
    const skipLinks = page.locator('a[href="#main"], a[href="#content"]')
    if (await skipLinks.count() > 0) {
      await expect(skipLinks).toBeVisible()
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –æ—Ç–º–µ–Ω—É –¥–µ–π—Å—Ç–≤–∏–π', async ({ page }) => {
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
      localStorage.setItem('auth-token', 'mock-token')
      localStorage.setItem('user', JSON.stringify({
        id: 'user-1',
        email: 'test@example.com',
        name: 'Test User',
        subscription: 'free'
      }))
    })
    
    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
    await page.click('[data-testid="add-task-button"]')
    await expect(page.locator('[data-testid="task-modal"]')).toBeVisible()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ
    await page.keyboard.press('Escape')
    await expect(page.locator('[data-testid="task-modal"]')).not.toBeVisible()
    
    // –ò–ª–∏ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    await page.click('[data-testid="add-task-button"]')
    await expect(page.locator('[data-testid="task-modal"]')).toBeVisible()
    
    const cancelButton = page.locator('[data-testid="cancel-button"]')
    if (await cancelButton.count() > 0) {
      await cancelButton.click()
      await expect(page.locator('[data-testid="task-modal"]')).not.toBeVisible()
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –æ –¥–µ–π—Å—Ç–≤–∏—è—Ö', async ({ page }) => {
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
      localStorage.setItem('auth-token', 'mock-token')
      localStorage.setItem('user', JSON.stringify({
        id: 'user-1',
        email: 'test@example.com',
        name: 'Test User',
        subscription: 'free'
      }))
    })
    
    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    await page.click('[data-testid="add-task-button"]')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
    const modal = page.locator('[data-testid="task-modal"]')
    await expect(modal).toBeVisible()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    const loadingIndicator = page.locator('[aria-label="loading"], .loading, [data-testid="loading"]')
    if (await loadingIndicator.count() > 0) {
      await expect(loadingIndicator).toBeVisible()
    }
  })
})

describe('üåê Internationalization Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å RTL —è–∑—ã–∫–∏', async ({ page }) => {
    await page.goto('/')
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º RTL –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    await page.evaluate(() => {
      document.documentElement.setAttribute('dir', 'rtl')
    })
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–Ω—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    const body = page.locator('body')
    const textAlign = await body.evaluate(el => {
      return window.getComputedStyle(el).textAlign
    })
    
    // –í RTL —Ä–µ–∂–∏–º–µ —Ç–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã—Ä–æ–≤–Ω–µ–Ω –ø–æ –ø—Ä–∞–≤–æ–º—É –∫—Ä–∞—é
    expect(textAlign).toBe('right')
  })

  test('–¥–æ–ª–∂–µ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —è–∑—ã–∫–∏', async ({ page }) => {
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å lang –∞—Ç—Ä–∏–±—É—Ç
    const html = page.locator('html')
    const lang = await html.getAttribute('lang')
    expect(lang).toBeTruthy()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–Ω—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
    const h1 = page.locator('h1')
    const text = await h1.textContent()
    expect(text).toBeTruthy()
  })

  test('–¥–æ–ª–∂–µ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç –∏ —á–∏—Å–µ–ª', async ({ page }) => {
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
      localStorage.setItem('auth-token', 'mock-token')
      localStorage.setItem('user', JSON.stringify({
        id: 'user-1',
        email: 'test@example.com',
        name: 'Test User',
        subscription: 'free'
      }))
    })
    
    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç—ã –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    const dateElements = page.locator('[data-testid*="date"], .date, time')
    const dateCount = await dateElements.count()
    
    for (let i = 0; i < dateCount; i++) {
      const dateElement = dateElements.nth(i)
      const text = await dateElement.textContent()
      
      if (text) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        const dateRegex = /\d{1,2}[\/\-\.]\d{1,2}[\/\-\.]\d{2,4}|\d{4}[\/\-\.]\d{1,2}[\/\-\.]\d{1,2}/
        expect(dateRegex.test(text)).toBeTruthy()
      }
    }
  })
})