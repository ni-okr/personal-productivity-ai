/**
 * üîí –¢–ï–°–¢–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò
 * –ü–æ–∫—Ä—ã—Ç–∏–µ: 100% —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –∏ –∞—Ç–∞–∫
 */

import { test, expect, Page } from '@playwright/test'

describe('üõ°Ô∏è Authentication Security Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –∑–∞—â–∏—â–∞—Ç—å –æ—Ç –±—Ä—É—Ç—Ñ–æ—Ä—Å –∞—Ç–∞–∫', async ({ page }) => {
    await page.goto('/planner')
    
    // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –º–Ω–æ–≥–æ —Ä–∞–∑
    for (let i = 0; i < 10; i++) {
      await page.fill('input[type="email"]', 'test@example.com')
      await page.fill('input[type="password"]', 'wrongpassword')
      await page.click('button[type="submit"]')
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—è–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      await expect(page.locator('.error-message')).toBeVisible()
    }
    
    // –ü–æ—Å–ª–µ 10 –ø–æ–ø—ã—Ç–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
    await page.fill('input[type="email"]', 'test@example.com')
    await page.fill('input[type="password"]', 'wrongpassword')
    await page.click('button[type="submit"]')
    
    // –î–æ–ª–∂–Ω–æ –ø–æ—è–≤–∏—Ç—å—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
    await expect(page.locator('.error-message')).toContainText('–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω')
  })

  test('–¥–æ–ª–∂–µ–Ω –∑–∞—â–∏—â–∞—Ç—å –æ—Ç SQL –∏–Ω—ä–µ–∫—Ü–∏–π', async ({ page }) => {
    await page.goto('/')
    
    // –ü—ã—Ç–∞–µ–º—Å—è –≤–≤–µ—Å—Ç–∏ SQL –∏–Ω—ä–µ–∫—Ü–∏—é –≤ –ø–æ–ª–µ email
    const sqlInjection = "'; DROP TABLE users; --"
    await page.fill('[data-testid="email-input"]', sqlInjection)
    await page.click('[data-testid="subscribe-button"]')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω –±–µ–∑–æ–ø–∞—Å–Ω–æ
    await expect(page.locator('[data-testid="subscription-status"]')).toBeVisible()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞
    await page.goto('/')
    await expect(page.locator('h1')).toBeVisible()
  })

  test('–¥–æ–ª–∂–µ–Ω –∑–∞—â–∏—â–∞—Ç—å –æ—Ç NoSQL –∏–Ω—ä–µ–∫—Ü–∏–π', async ({ page }) => {
    await page.goto('/')
    
    // –ü—ã—Ç–∞–µ–º—Å—è –≤–≤–µ—Å—Ç–∏ NoSQL –∏–Ω—ä–µ–∫—Ü–∏—é
    const nosqlInjection = '{"$ne": null}'
    await page.fill('[data-testid="email-input"]', nosqlInjection)
    await page.click('[data-testid="subscribe-button"]')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω –±–µ–∑–æ–ø–∞—Å–Ω–æ
    await expect(page.locator('[data-testid="subscription-status"]')).toBeVisible()
  })
})

describe('üö® XSS Protection Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –∑–∞—â–∏—â–∞—Ç—å –æ—Ç XSS –∞—Ç–∞–∫ –≤ –ø–æ–ª—è—Ö –≤–≤–æ–¥–∞', async ({ page }) => {
    await page.goto('/')
    
    const xssPayloads = [
      '<script>alert("xss")</script>',
      '<img src=x onerror=alert("xss")>',
      '<svg onload=alert("xss")>',
      'javascript:alert("xss")',
      '<iframe src="javascript:alert(\'xss\')"></iframe>'
    ]
    
    for (const payload of xssPayloads) {
      await page.fill('[data-testid="email-input"]', payload)
      await page.click('[data-testid="subscribe-button"]')
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è
      const pageContent = await page.content()
      expect(pageContent).not.toContain('<script>')
      expect(pageContent).not.toContain('onerror=')
      expect(pageContent).not.toContain('onload=')
      expect(pageContent).not.toContain('javascript:')
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–Ω—Ç —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω
      expect(pageContent).toContain('&lt;script&gt;')
      expect(pageContent).toContain('&lt;img')
      expect(pageContent).toContain('&lt;svg')
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –∑–∞—â–∏—â–∞—Ç—å –æ—Ç XSS –≤ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö', async ({ page }) => {
    const xssPayload = '<script>alert("xss")</script>'
    const encodedPayload = encodeURIComponent(xssPayload)
    
    await page.goto(`/?test=${encodedPayload}`)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è
    const pageContent = await page.content()
    expect(pageContent).not.toContain('<script>')
    expect(pageContent).toContain('&lt;script&gt;')
  })

  test('–¥–æ–ª–∂–µ–Ω –∑–∞—â–∏—â–∞—Ç—å –æ—Ç XSS –≤ localStorage', async ({ page }) => {
    await page.goto('/')
    
    // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å XSS –≤ localStorage
    await page.evaluate(() => {
      localStorage.setItem('xss', '<script>alert("xss")</script>')
    })
    
    await page.reload()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è
    const pageContent = await page.content()
    expect(pageContent).not.toContain('<script>')
  })
})

describe('üîê CSRF Protection Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –∑–∞—â–∏—â–∞—Ç—å –æ—Ç CSRF –∞—Ç–∞–∫', async ({ page }) => {
    await page.goto('/')
    
    // –ü–æ–ª—É—á–∞–µ–º CSRF —Ç–æ–∫–µ–Ω
    const csrfToken = await page.evaluate(() => {
      return document.querySelector('meta[name="csrf-token"]')?.getAttribute('content')
    })
    
    // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –±–µ–∑ —Ç–æ–∫–µ–Ω–∞
    const response = await page.request.post('/api/subscribe', {
      data: { email: 'test@example.com' },
      headers: {
        'X-CSRF-Token': 'invalid-token'
      }
    })
    
    // –ó–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω
    expect(response.status()).toBe(403)
  })

  test('–¥–æ–ª–∂–µ–Ω —Ç—Ä–µ–±–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π CSRF —Ç–æ–∫–µ–Ω', async ({ page }) => {
    await page.goto('/')
    
    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π CSRF —Ç–æ–∫–µ–Ω
    const csrfToken = await page.evaluate(() => {
      return document.querySelector('meta[name="csrf-token"]')?.getAttribute('content')
    })
    
    if (csrfToken) {
      const response = await page.request.post('/api/subscribe', {
        data: { email: 'test@example.com' },
        headers: {
          'X-CSRF-Token': csrfToken
        }
      })
      
      // –ó–∞–ø—Ä–æ—Å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏
      expect(response.status()).toBe(200)
    }
  })
})

describe('üîí Data Protection Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –∑–∞—â–∏—â–∞—Ç—å —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ localStorage', async ({ page }) => {
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
      localStorage.setItem('auth-token', 'sensitive-token-123')
      localStorage.setItem('user', JSON.stringify({
        id: 'user-1',
        email: 'test@example.com',
        password: 'plaintext-password' // –ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ localStorage
      }))
    })
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞—Ä–æ–ª—å –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ localStorage
    const userData = await page.evaluate(() => {
      return localStorage.getItem('user')
    })
    
    expect(userData).not.toContain('plaintext-password')
    expect(userData).not.toContain('password')
  })

  test('–¥–æ–ª–∂–µ–Ω –∑–∞—â–∏—â–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ sessionStorage', async ({ page }) => {
    await page.goto('/')
    
    // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ sessionStorage
    await page.evaluate(() => {
      sessionStorage.setItem('sensitive-data', 'secret-information')
    })
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã –∏–∑–≤–Ω–µ
    const sensitiveData = await page.evaluate(() => {
      return sessionStorage.getItem('sensitive-data')
    })
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã
    expect(sensitiveData).toBe('secret-information')
  })

  test('–¥–æ–ª–∂–µ–Ω –∑–∞—â–∏—â–∞—Ç—å –æ—Ç —É—Ç–µ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ URL', async ({ page }) => {
    await page.goto('/planner')
    
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–¥–∞—Ç—å —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ URL
    const sensitiveData = 'password123'
    await page.goto(`/planner?password=${sensitiveData}`)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
    const pageContent = await page.content()
    expect(pageContent).not.toContain(sensitiveData)
  })
})

describe('üåê Network Security Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTTPS –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ', async ({ page }) => {
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç HTTPS
    const requests = []
    page.on('request', request => {
      requests.push(request.url())
    })
    
    await page.click('[data-testid="subscribe-button"]')
    await page.waitForTimeout(1000)
    
    // –í —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥–µ –º–æ–∂–µ—Ç –±—ã—Ç—å HTTP, –Ω–æ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å HTTPS
    const hasHttpRequests = requests.some(url => url.startsWith('http://') && !url.includes('localhost'))
    expect(hasHttpRequests).toBe(false)
  })

  test('–¥–æ–ª–∂–µ–Ω –∑–∞—â–∏—â–∞—Ç—å –æ—Ç man-in-the-middle –∞—Ç–∞–∫', async ({ page }) => {
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    const response = await page.request.get('/')
    const headers = response.headers()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ security headers
    expect(headers['x-frame-options']).toBeDefined()
    expect(headers['x-content-type-options']).toBe('nosniff')
    expect(headers['x-xss-protection']).toBeDefined()
    expect(headers['strict-transport-security']).toBeDefined()
  })

  test('–¥–æ–ª–∂–µ–Ω –∑–∞—â–∏—â–∞—Ç—å –æ—Ç clickjacking', async ({ page }) => {
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ X-Frame-Options
    const response = await page.request.get('/')
    const frameOptions = response.headers()['x-frame-options']
    
    expect(frameOptions).toBe('DENY') // –∏–ª–∏ 'SAMEORIGIN'
  })
})

describe('üîë Input Validation Security Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', async ({ page }) => {
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
      localStorage.setItem('auth-token', 'mock-token')
      localStorage.setItem('user', JSON.stringify({
        id: 'user-1',
        email: 'test@example.com',
        name: 'Test User',
        subscription: 'free'
      }))
    })
    
    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')
    
    const maliciousInputs = [
      '"><script>alert("xss")</script>',
      '; DROP TABLE tasks; --',
      '../../../etc/passwd',
      '${7*7}',
      '{{7*7}}',
      '#{7*7}',
      '{{config}}',
      '{{self.__init__.__globals__.__builtins__.__import__("os").popen("id").read()}}'
    ]
    
    for (const input of maliciousInputs) {
      await page.click('[data-testid="add-task-button"]')
      await page.fill('[data-testid="task-title"]', input)
      await page.click('[data-testid="save-task-button"]')
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã
      const taskCard = page.locator('.task-card').first()
      const taskTitle = await taskCard.textContent()
      
      expect(taskTitle).not.toContain('<script>')
      expect(taskTitle).not.toContain('DROP TABLE')
      expect(taskTitle).not.toContain('etc/passwd')
    }
  })

  test('–¥–æ–ª–∂–µ–Ω –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—Ç—å –¥–ª–∏–Ω—É –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö', async ({ page }) => {
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
      localStorage.setItem('auth-token', 'mock-token')
      localStorage.setItem('user', JSON.stringify({
        id: 'user-1',
        email: 'test@example.com',
        name: 'Test User',
        subscription: 'free'
      }))
    })
    
    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // –ü—ã—Ç–∞–µ–º—Å—è –≤–≤–µ—Å—Ç–∏ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
    const longTitle = 'a'.repeat(10000)
    await page.click('[data-testid="add-task-button"]')
    await page.fill('[data-testid="task-title"]', longTitle)
    await page.click('[data-testid="save-task-button"]')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—è–≤–∏–ª–∞—Å—å –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    await expect(page.locator('.error-message')).toContainText('–ø—Ä–µ–≤—ã—à–∞–µ—Ç')
  })

  test('–¥–æ–ª–∂–µ–Ω —Å–∞–Ω–∏—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å HTML –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º –≤–≤–æ–¥–µ', async ({ page }) => {
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
      localStorage.setItem('auth-token', 'mock-token')
      localStorage.setItem('user', JSON.stringify({
        id: 'user-1',
        email: 'test@example.com',
        name: 'Test User',
        subscription: 'free'
      }))
    })
    
    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')
    
    const htmlInput = '<b>Bold text</b><i>Italic text</i><script>alert("xss")</script>'
    
    await page.click('[data-testid="add-task-button"]')
    await page.fill('[data-testid="task-title"]', htmlInput)
    await page.click('[data-testid="save-task-button"]')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ HTML —Ç–µ–≥–∏ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã
    const taskCard = page.locator('.task-card').first()
    const taskTitle = await taskCard.textContent()
    
    expect(taskTitle).toContain('&lt;b&gt;Bold text&lt;/b&gt;')
    expect(taskTitle).toContain('&lt;i&gt;Italic text&lt;/i&gt;')
    expect(taskTitle).not.toContain('<script>')
  })
})

describe('üîê Authentication Security Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –∑–∞—â–∏—â–∞—Ç—å –æ—Ç session fixation', async ({ page }) => {
    await page.goto('/planner')
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å–µ—Å—Å–∏—é
    const initialSession = await page.evaluate(() => {
      return document.cookie
    })
    
    // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É
    await page.fill('input[type="email"]', 'test@example.com')
    await page.fill('input[type="password"]', 'password123')
    await page.click('button[type="submit"]')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Å—Å–∏—è –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
    const newSession = await page.evaluate(() => {
      return document.cookie
    })
    
    expect(newSession).not.toBe(initialSession)
  })

  test('–¥–æ–ª–∂–µ–Ω –∑–∞—â–∏—â–∞—Ç—å –æ—Ç session hijacking', async ({ page }) => {
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
      localStorage.setItem('auth-token', 'mock-token')
      localStorage.setItem('user', JSON.stringify({
        id: 'user-1',
        email: 'test@example.com',
        name: 'Test User',
        subscription: 'free'
      }))
    })
    
    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    const token = await page.evaluate(() => {
      return localStorage.getItem('auth-token')
    })
    
    // –¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å JWT –∏–ª–∏ –¥—Ä—É–≥–æ–π –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    expect(token).toMatch(/^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+$/)
  })

  test('–¥–æ–ª–∂–µ–Ω –∑–∞—â–∏—â–∞—Ç—å –æ—Ç brute force –∞—Ç–∞–∫', async ({ page }) => {
    await page.goto('/planner')
    
    const passwords = ['123456', 'password', 'admin', 'qwerty', 'letmein']
    
    for (const password of passwords) {
      await page.fill('input[type="email"]', 'test@example.com')
      await page.fill('input[type="password"]', password)
      await page.click('button[type="submit"]')
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—è–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      await expect(page.locator('.error-message')).toBeVisible()
    }
    
    // –ü–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
    await page.fill('input[type="email"]', 'test@example.com')
    await page.fill('input[type="password"]', 'anypassword')
    await page.click('button[type="submit"]')
    
    // –î–æ–ª–∂–Ω–æ –ø–æ—è–≤–∏—Ç—å—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
    await expect(page.locator('.error-message')).toContainText('–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω')
  })
})

describe('üîí Data Encryption Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω —à–∏—Ñ—Ä–æ–≤–∞—Ç—å —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', async ({ page }) => {
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
      localStorage.setItem('auth-token', 'mock-token')
      localStorage.setItem('user', JSON.stringify({
        id: 'user-1',
        email: 'test@example.com',
        name: 'Test User',
        subscription: 'free'
      }))
    })
    
    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –≤ localStorage –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç plaintext –ø–∞—Ä–æ–ª–µ–π
    const userData = await page.evaluate(() => {
      return localStorage.getItem('user')
    })
    
    const parsedUser = JSON.parse(userData)
    expect(parsedUser.password).toBeUndefined()
    expect(parsedUser.plaintextPassword).toBeUndefined()
  })

  test('–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è', async ({ page }) => {
    await page.goto('/')
    
    // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
    await page.fill('input[type="email"]', 'test@example.com')
    await page.fill('input[type="password"]', 'password123')
    await page.fill('input[type="text"]', 'Test User')
    await page.click('button[type="submit"]')
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω
    // –ó–¥–µ—Å—å –º—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è
    await expect(page.locator('.success-message')).toBeVisible()
  })
})

describe('üåê CORS Security Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å CORS', async ({ page }) => {
    await page.goto('/')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
    const response = await page.request.get('/')
    const headers = response.headers()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ CORS –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    expect(headers['access-control-allow-origin']).toBeDefined()
    expect(headers['access-control-allow-methods']).toBeDefined()
    expect(headers['access-control-allow-headers']).toBeDefined()
  })

  test('–¥–æ–ª–∂–µ–Ω –∑–∞—â–∏—â–∞—Ç—å –æ—Ç CORS –∞—Ç–∞–∫', async ({ page }) => {
    await page.goto('/')
    
    // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å —Å –Ω–µ—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞
    const response = await page.request.post('/api/subscribe', {
      data: { email: 'test@example.com' },
      headers: {
        'Origin': 'https://malicious-site.com'
      }
    })
    
    // –ó–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω –∏–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω
    expect(response.status()).toBeOneOf([200, 403, 404])
  })
})