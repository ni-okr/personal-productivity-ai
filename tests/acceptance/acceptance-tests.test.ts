/**
 * ‚úÖ –¢–ï–°–¢–´ –ü–†–ò–ï–ú–û–ß–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
 * –ü–æ–∫—Ä—ã—Ç–∏–µ: user acceptance criteria, business requirements, stakeholder validation
 */

import { test, expect, Page } from '@playwright/test'

describe('üéØ User Acceptance Criteria Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏—è–º –ø—Ä–∏–µ–º–∫–∏ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', async ({ page }) => {
    await page.goto('/')
    
    // UAC-001: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    await page.click('[data-testid="get-started-button"]')
    await page.click('[data-testid="sign-up-link"]')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    await expect(page.locator('[data-testid="signup-email"]')).toBeVisible()
    await expect(page.locator('[data-testid="signup-password"]')).toBeVisible()
    await expect(page.locator('[data-testid="signup-name"]')).toBeVisible()
    await expect(page.locator('[data-testid="terms-checkbox"]')).toBeVisible()
    
    // UAC-002: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    await page.fill('[data-testid="signup-email"]', 'acceptance@example.com')
    await page.fill('[data-testid="signup-password"]', 'AcceptanceTest123!')
    await page.fill('[data-testid="signup-name"]', 'Acceptance User')
    await page.check('[data-testid="terms-checkbox"]')
    await page.click('[data-testid="signup-button"]')
    
    await expect(page.locator('[data-testid="signup-success"]')).toBeVisible()
    await expect(page.locator('[data-testid="signup-success"]')).toContainText('Account created successfully')
    
    // UAC-003: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    await page.click('[data-testid="go-to-login-button"]')
    await expect(page.locator('[data-testid="login-form"]')).toBeVisible()
  })

  test('–¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏—è–º –ø—Ä–∏–µ–º–∫–∏ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É', async ({ page }) => {
    await page.goto('/')
    
    // UAC-004: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    await page.click('[data-testid="get-started-button"]')
    
    await page.fill('[data-testid="login-email"]', 'user@example.com')
    await page.fill('[data-testid="login-password"]', 'password123')
    await page.click('[data-testid="login-button"]')
    
    // UAC-005: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
    await expect(page.locator('[data-testid="planner-content"]')).toBeVisible()
    await expect(page.locator('[data-testid="welcome-message"]')).toContainText('Welcome back!')
    
    // UAC-006: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
    await expect(page.locator('[data-testid="user-name"]')).toContainText('Test User')
    await expect(page.locator('[data-testid="user-email"]')).toContainText('user@example.com')
  })

  test('–¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏—è–º –ø—Ä–∏–µ–º–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏', async ({ page }) => {
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
      localStorage.setItem('auth-token', 'mock-token')
      localStorage.setItem('user', JSON.stringify({
        id: 'user-1',
        email: 'user@example.com',
        name: 'Test User',
        subscription: 'free'
      }))
    })
    
    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // UAC-007: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞—á–∏
    await page.click('[data-testid="add-task-button"]')
    await page.fill('[data-testid="task-title"]', 'Acceptance Test Task')
    await page.fill('[data-testid="task-description"]', 'This task meets acceptance criteria')
    await page.selectOption('[data-testid="task-priority"]', 'high')
    await page.selectOption('[data-testid="task-category"]', 'work')
    await page.fill('[data-testid="task-due-date"]', '2024-12-31')
    await page.click('[data-testid="save-task-button"]')
    
    await expect(page.locator('.task-card')).toContainText('Acceptance Test Task')
    await expect(page.locator('.task-card')).toContainText('This task meets acceptance criteria')
    
    // UAC-008: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏
    await page.locator('.task-card').click()
    await page.fill('[data-testid="task-title"]', 'Updated Acceptance Task')
    await page.fill('[data-testid="task-description"]', 'This task has been updated')
    await page.click('[data-testid="save-task-button"]')
    
    await expect(page.locator('.task-card')).toContainText('Updated Acceptance Task')
    await expect(page.locator('.task-card')).toContainText('This task has been updated')
    
    // UAC-009: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–≤–µ—Ä—à–∞—Ç—å –∑–∞–¥–∞—á–∏
    await page.locator('.task-card').locator('[data-testid="complete-task-button"]').click()
    await expect(page.locator('.task-card').locator('[data-testid="task-completed"]')).toBeChecked()
    
    // UAC-010: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–¥–∞–ª—è—Ç—å –∑–∞–¥–∞—á–∏
    await page.locator('.task-card').locator('[data-testid="delete-task-button"]').click()
    await page.click('[data-testid="confirm-delete-button"]')
    await expect(page.locator('.task-card')).not.toContainText('Updated Acceptance Task')
  })

  test('–¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏—è–º –ø—Ä–∏–µ–º–∫–∏ –¥–ª—è –ò–ò —Ñ—É–Ω–∫—Ü–∏–π', async ({ page }) => {
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.evaluate(() => {
      localStorage.setItem('auth-token', 'mock-token')
      localStorage.setItem('user', JSON.stringify({
        id: 'user-1',
        email: 'user@example.com',
        name: 'Test User',
        subscription: 'free'
      }))
    })
    
    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // UAC-011: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø –∫ —É–º–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ
    await expect(page.locator('[data-testid="smart-sort-button"]')).toBeVisible()
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    await page.click('[data-testid="add-task-button"]')
    await page.fill('[data-testid="task-title"]', 'Low Priority Task')
    await page.selectOption('[data-testid="task-priority"]', 'low')
    await page.selectOption('[data-testid="task-category"]', 'personal')
    await page.click('[data-testid="save-task-button"]')
    
    await page.click('[data-testid="add-task-button"]')
    await page.fill('[data-testid="task-title"]', 'High Priority Task')
    await page.selectOption('[data-testid="task-priority"]', 'high')
    await page.selectOption('[data-testid="task-category"]', 'work')
    await page.click('[data-testid="save-task-button"]')
    
    // UAC-012: –£–º–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    await page.click('[data-testid="smart-sort-button"]')
    await page.waitForSelector('[data-testid="sorting-complete"]')
    
    const taskCards = page.locator('.task-card')
    await expect(taskCards.first()).toContainText('High Priority Task')
    await expect(taskCards.nth(1)).toContainText('Low Priority Task')
    
    // UAC-013: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ò–ò –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º
    await expect(page.locator('[data-testid="generate-suggestions-button"]')).toBeVisible()
    
    await page.click('[data-testid="generate-suggestions-button"]')
    await page.waitForSelector('[data-testid="ai-suggestions"]')
    
    const suggestionCards = page.locator('.suggestion-card')
    await expect(suggestionCards).toHaveCount.greaterThan(0)
    
    // UAC-014: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∞–Ω–∞–ª–∏–∑—É –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    await expect(page.locator('[data-testid="analyze-productivity-button"]')).toBeVisible()
    
    await page.click('[data-testid="analyze-productivity-button"]')
    await page.waitForSelector('[data-testid="productivity-analysis"]')
    
    await expect(page.locator('[data-testid="productivity-score"]')).toBeVisible()
    await expect(page.locator('[data-testid="productivity-insights"]')).toBeVisible()
    await expect(page.locator('[data-testid="productivity-recommendations"]')).toBeVisible()
  })
})

describe('üíº Business Requirements Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –±–∏–∑–Ω–µ—Å-—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–ª–∞–Ω–∞', async ({ page }) => {
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º –ø–ª–∞–Ω–æ–º
    await page.evaluate(() => {
      localStorage.setItem('auth-token', 'mock-token')
      localStorage.setItem('user', JSON.stringify({
        id: 'user-1',
        email: 'user@example.com',
        name: 'Test User',
        subscription: 'free'
      }))
    })
    
    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // BR-001: –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á
    await expect(page.locator('[data-testid="task-limit"]')).toBeVisible()
    await expect(page.locator('[data-testid="task-limit"]')).toContainText('50')
    
    // BR-002: –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –ò–ò –∑–∞–ø—Ä–æ—Å—ã
    await expect(page.locator('[data-testid="ai-limit"]')).toBeVisible()
    await expect(page.locator('[data-testid="ai-limit"]')).toContainText('100')
    
    // BR-003: –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    await expect(page.locator('[data-testid="upgrade-prompt"]')).toBeVisible()
    await expect(page.locator('[data-testid="upgrade-prompt"]')).toContainText('Upgrade to Premium')
    
    // BR-004: –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –±–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    await expect(page.locator('[data-testid="basic-features"]')).toBeVisible()
    await expect(page.locator('[data-testid="basic-features"]')).toContainText('Basic task management')
    await expect(page.locator('[data-testid="basic-features"]')).toContainText('Basic AI suggestions')
  })

  test('–¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –±–∏–∑–Ω–µ—Å-—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–ª–∞–Ω–∞', async ({ page }) => {
    await page.goto('/planner')
    
    // –ú–æ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å –ø—Ä–µ–º–∏—É–º –ø–ª–∞–Ω–æ–º
    await page.evaluate(() => {
      localStorage.setItem('auth-token', 'mock-token')
      localStorage.setItem('user', JSON.stringify({
        id: 'user-1',
        email: 'user@example.com',
        name: 'Test User',
        subscription: 'premium'
      }))
    })
    
    await page.reload()
    await page.waitForSelector('[data-testid="planner-content"]')
    
    // BR-005: –ü—Ä–µ–º–∏—É–º –ø–ª–∞–Ω –¥–æ–ª–∂–µ–Ω —Å–Ω–∏–º–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –∑–∞–¥–∞—á–∏
    await expect(page.locator('[data-testid="task-limit"]')).toContainText('Unlimited')
    
    // BR-006: –ü—Ä–µ–º–∏—É–º –ø–ª–∞–Ω –¥–æ–ª–∂–µ–Ω —Å–Ω–∏–º–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –ò–ò –∑–∞–ø—Ä–æ—Å—ã
    await expect(page.locator('[data-testid="ai-limit"]')).toContainText('Unlimited')
    
    // BR-007: –ü—Ä–µ–º–∏—É–º –ø–ª–∞–Ω –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    await expect(page.locator('[data-testid="premium-features"]')).toBeVisible()
    await expect(page.locator('[data-testid="premium-features"]')).toContainText('Advanced AI')
    await expect(page.locator('[data-testid="premium-features"]')).toContainText('Priority Support')
    
    // BR-008: –ü—Ä–µ–º–∏—É–º –ø–ª–∞–Ω –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
    await expect(page.locator('[data-testid="subscription-status"]')).toBeVisible()
    await expect(page.locator('[data-testid="subscription-status"]')).toContainText('Premium')
  })

  test('–¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –±–∏–∑–Ω–µ—Å-—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –¥–ª—è –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏', async ({ page }) => {
    await page.goto('/')
    
    // BR-009: –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã
    await expect(page.locator('[data-testid="pricing-section"]')).toBeVisible()
    
    const planCards = page.locator('[data-testid="plan-card"]')
    await expect(planCards).toHaveCount(4) // free, premium, pro, enterprise
    
    // BR-010: –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å —á–µ—Ç–∫–∏–µ —Ü–µ–Ω—ã
    const freePlan = page.locator('[data-testid="plan-free"]')
    await expect(freePlan).toContainText('Free')
    await expect(freePlan).toContainText('$0')
    
    const premiumPlan = page.locator('[data-testid="plan-premium"]')
    await expect(premiumPlan).toContainText('Premium')
    await expect(premiumPlan).toContainText('$9.99')
    
    const proPlan = page.locator('[data-testid="plan-pro"]')
    await expect(proPlan).toContainText('Pro')
    await expect(proPlan).toContainText('$19.99')
    
    const enterprisePlan = page.locator('[data-testid="plan-enterprise"]')
    await expect(enterprisePlan).toContainText('Enterprise')
    await expect(enterprisePlan).toContainText('$49.99')
    
    // BR-011: –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    await expect(premiumPlan.locator('[data-testid="select-plan-button"]')).toBeVisible()
    await expect(proPlan.locator('[data-testid="select-plan-button"]')).toBeVisible()
    await expect(enterprisePlan.locator('[data-testid="select-plan-button"]')).toBeVisible()
  })
})

describe('üé® User Experience Requirements Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞', async ({ page }) => {
    await page.goto('/')
    
    // UX-001: –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –±—ã—Å—Ç—Ä–æ
    const startTime = Date.now()
    await page.goto('/')
    const loadTime = Date.now() - startTime
    expect(loadTime).toBeLessThan(3000)
    
    // UX-002: –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–∑—ã–≤—á–∏–≤—ã–º
    await expect(page.locator('h1')).toBeVisible()
    await expect(page.locator('[data-testid="email-input"]')).toBeVisible()
    await expect(page.locator('[data-testid="subscribe-button"]')).toBeVisible()
    
    // UX-003: –ù–∞–≤–∏–≥–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ–π
    await page.click('[data-testid="get-started-button"]')
    await expect(page.locator('[data-testid="login-form"]')).toBeVisible()
    
    await page.click('[data-testid="sign-up-link"]')
    await expect(page.locator('[data-testid="signup-form"]')).toBeVisible()
    
    await page.click('[data-testid="sign-in-link"]')
    await expect(page.locator('[data-testid="login-form"]')).toBeVisible()
    
    // UX-004: –§–æ—Ä–º—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é
    await page.fill('[data-testid="login-email"]', 'invalid-email')
    await page.fill('[data-testid="login-password"]', '123')
    await page.click('[data-testid="login-button"]')
    
    await expect(page.locator('[data-testid="email-error"]')).toBeVisible()
    await expect(page.locator('[data-testid="password-error"]')).toBeVisible()
    
    // UX-005: –°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–Ω—è—Ç–Ω—ã–º–∏
    await expect(page.locator('[data-testid="email-error"]')).toContainText('Please enter a valid email address')
    await expect(page.locator('[data-testid="password-error"]')).toContainText('Password must be at least 8 characters')
  })

  test('–¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏', async ({ page }) => {
    await page.goto('/')
    
    // A11Y-001: –≠–ª–µ–º–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ ARIA –∞—Ç—Ä–∏–±—É—Ç—ã
    const emailInput = page.locator('[data-testid="email-input"]')
    await expect(emailInput).toHaveAttribute('type', 'email')
    await expect(emailInput).toHaveAttribute('required')
    
    const subscribeButton = page.locator('[data-testid="subscribe-button"]')
    await expect(subscribeButton).toHaveAttribute('type', 'submit')
    
    // A11Y-002: –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∏–µ—Ä–∞—Ä—Ö–∏—é
    const h1 = page.locator('h1')
    await expect(h1).toBeVisible()
    
    const h2 = page.locator('h2')
    await expect(h2).toHaveCount.greaterThan(0)
    
    // A11Y-003: –§–æ—Ä–º—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –º–µ—Ç–∫–∏
    const emailLabel = page.locator('label[for="email"]')
    await expect(emailLabel).toBeVisible()
    
    // A11Y-004: –ö–Ω–æ–ø–∫–∏ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
    await expect(subscribeButton).toContainText('Subscribe')
    
    // A11Y-005: –¶–≤–µ—Ç–∞ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç
    const emailInputColor = await emailInput.evaluate(el => getComputedStyle(el).color)
    const emailInputBgColor = await emailInput.evaluate(el => getComputedStyle(el).backgroundColor)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–≤–µ—Ç–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã (–Ω–µ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ)
    expect(emailInputColor).not.toBe('rgba(0, 0, 0, 0)')
    expect(emailInputBgColor).not.toBe('rgba(0, 0, 0, 0)')
  })

  test('–¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏', async ({ page }) => {
    await page.goto('/')
    
    // PERF-001: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –±—ã—Å—Ç—Ä–æ
    const startTime = Date.now()
    await page.goto('/')
    const loadTime = Date.now() - startTime
    expect(loadTime).toBeLessThan(3000)
    
    // PERF-002: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –±—ã—Å—Ç—Ä–æ
    await page.waitForSelector('[data-testid="email-input"]')
    const interactiveTime = Date.now() - startTime
    expect(interactiveTime).toBeLessThan(5000)
    
    // PERF-003: –§–æ—Ä–º—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–≤–µ—á–∞—Ç—å –±—ã—Å—Ç—Ä–æ
    const formStartTime = Date.now()
    await page.fill('[data-testid="email-input"]', 'test@example.com')
    await page.click('[data-testid="subscribe-button"]')
    const formResponseTime = Date.now() - formStartTime
    expect(formResponseTime).toBeLessThan(2000)
    
    // PERF-004: –ù–∞–≤–∏–≥–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±—ã—Å—Ç—Ä–æ–π
    const navStartTime = Date.now()
    await page.click('[data-testid="get-started-button"]')
    await page.waitForSelector('[data-testid="login-form"]')
    const navTime = Date.now() - navStartTime
    expect(navTime).toBeLessThan(1000)
  })
})

describe('üîí Security Requirements Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏', async ({ page }) => {
    await page.goto('/')
    
    // SEC-001: –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞—â–∏—â–µ–Ω–æ HTTPS
    const protocol = await page.evaluate(() => window.location.protocol)
    expect(protocol).toBe('https:')
    
    // SEC-002: –ü–∞—Ä–æ–ª–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–∫—Ä—ã—Ç—ã
    await page.click('[data-testid="get-started-button"]')
    await page.fill('[data-testid="login-password"]', 'password123')
    
    const passwordInput = page.locator('[data-testid="login-password"]')
    await expect(passwordInput).toHaveAttribute('type', 'password')
    
    // SEC-003: –§–æ—Ä–º—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –∑–∞—â–∏—Ç—É –æ—Ç CSRF
    const csrfToken = await page.locator('[data-testid="csrf-token"]').textContent()
    expect(csrfToken).toBeDefined()
    expect(csrfToken.length).toBeGreaterThan(0)
    
    // SEC-004: –î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ –∏ —Å–µ—Ä–≤–µ—Ä–µ
    await page.fill('[data-testid="login-email"]', 'invalid-email')
    await page.fill('[data-testid="login-password"]', '123')
    await page.click('[data-testid="login-button"]')
    
    await expect(page.locator('[data-testid="email-error"]')).toBeVisible()
    await expect(page.locator('[data-testid="password-error"]')).toBeVisible()
    
    // SEC-005: –°–µ—Å—Å–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏
    const sessionCookie = await page.context().cookies()
    const sessionCookieExists = sessionCookie.some(cookie => cookie.name === 'session')
    expect(sessionCookieExists).toBe(true)
  })

  test('–¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏', async ({ page }) => {
    await page.goto('/')
    
    // PRIV-001: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –≤–∏–¥–µ—Ç—å –ø–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
    await expect(page.locator('[data-testid="privacy-policy-link"]')).toBeVisible()
    
    await page.click('[data-testid="privacy-policy-link"]')
    await expect(page.locator('[data-testid="privacy-policy"]')).toBeVisible()
    
    // PRIV-002: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –≤–∏–¥–µ—Ç—å —É—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    await expect(page.locator('[data-testid="terms-of-service-link"]')).toBeVisible()
    
    await page.click('[data-testid="terms-of-service-link"]')
    await expect(page.locator('[data-testid="terms-of-service"]')).toBeVisible()
    
    // PRIV-003: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–ø—Ä–∞–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–º–∏
    await page.click('[data-testid="data-management-link"]')
    await expect(page.locator('[data-testid="data-management"]')).toBeVisible()
    
    // PRIV-004: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç
    await page.click('[data-testid="delete-account-link"]')
    await expect(page.locator('[data-testid="delete-account-confirmation"]')).toBeVisible()
  })
})

describe('üì± Mobile Requirements Tests', () => {
  test('–¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤', async ({ page }) => {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–±–∏–ª—å–Ω—ã–π viewport
    await page.setViewportSize({ width: 375, height: 667 })
    await page.goto('/')
    
    // MOBILE-001: –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ–ª–∂–µ–Ω –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫ –º–æ–±–∏–ª—å–Ω—ã–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º
    await expect(page.locator('h1')).toBeVisible()
    await expect(page.locator('[data-testid="email-input"]')).toBeVisible()
    await expect(page.locator('[data-testid="subscribe-button"]')).toBeVisible()
    
    // MOBILE-002: –≠–ª–µ–º–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–∏–º–∏ –¥–ª—è –∫–∞—Å–∞–Ω–∏—è
    const subscribeButton = page.locator('[data-testid="subscribe-button"]')
    const buttonSize = await subscribeButton.boundingBox()
    expect(buttonSize.height).toBeGreaterThanOrEqual(44) // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –∫–∞—Å–∞–Ω–∏—è
    
    // MOBILE-003: –§–æ—Ä–º—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–¥–æ–±–Ω—ã–º–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    await page.fill('[data-testid="email-input"]', 'test@example.com')
    await page.click('[data-testid="subscribe-button"]')
    
    await expect(page.locator('[data-testid="success-message"]')).toBeVisible()
    
    // MOBILE-004: –ù–∞–≤–∏–≥–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
    await page.click('[data-testid="get-started-button"]')
    await expect(page.locator('[data-testid="login-form"]')).toBeVisible()
    
    // MOBILE-005: –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Ç–∞–µ–º—ã–º –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
    const h1 = page.locator('h1')
    const h1FontSize = await h1.evaluate(el => getComputedStyle(el).fontSize)
    expect(parseInt(h1FontSize)).toBeGreaterThanOrEqual(24) // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
  })

  test('–¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ø–ª–∞–Ω—à–µ—Ç–æ–≤', async ({ page }) => {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω—à–µ—Ç–Ω—ã–π viewport
    await page.setViewportSize({ width: 768, height: 1024 })
    await page.goto('/')
    
    // TABLET-001: –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ–ª–∂–µ–Ω –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫ –ø–ª–∞–Ω—à–µ—Ç–∞–º
    await expect(page.locator('h1')).toBeVisible()
    await expect(page.locator('[data-testid="email-input"]')).toBeVisible()
    await expect(page.locator('[data-testid="subscribe-button"]')).toBeVisible()
    
    // TABLET-002: –≠–ª–µ–º–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
    const heroSection = page.locator('[data-testid="hero-section"]')
    const heroSectionSize = await heroSection.boundingBox()
    expect(heroSectionSize.width).toBeGreaterThan(600) // –î–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –¥–ª—è –ø–ª–∞–Ω—à–µ—Ç–∞
    
    // TABLET-003: –ù–∞–≤–∏–≥–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É–¥–æ–±–Ω–æ–π –¥–ª—è –ø–ª–∞–Ω—à–µ—Ç–æ–≤
    await page.click('[data-testid="get-started-button"]')
    await expect(page.locator('[data-testid="login-form"]')).toBeVisible()
    
    // TABLET-004: –§–æ—Ä–º—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–¥–æ–±–Ω—ã–º–∏ –¥–ª—è –ø–ª–∞–Ω—à–µ—Ç–æ–≤
    await page.fill('[data-testid="login-email"]', 'test@example.com')
    await page.fill('[data-testid="login-password"]', 'password123')
    await page.click('[data-testid="login-button"]')
    
    // TABLET-005: –ö–æ–Ω—Ç–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö–æ—Ä–æ—à–æ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω –Ω–∞ –ø–ª–∞–Ω—à–µ—Ç–∞—Ö
    const featuresSection = page.locator('[data-testid="features-section"]')
    const featuresSectionSize = await featuresSection.boundingBox()
    expect(featuresSectionSize.width).toBeGreaterThan(700) // –î–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –¥–ª—è –ø–ª–∞–Ω—à–µ—Ç–∞
  })
})