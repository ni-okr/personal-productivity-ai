// üîí –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö

export interface ValidationResult {
    isValid: boolean
    errors: string[]
}

export interface TaskValidation {
    title: string
    description?: string
    priority: string
    estimatedMinutes: number
    dueDate?: string
}

/**
 * üìù –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∏
 */
export function validateTask(data: Partial<TaskValidation>): ValidationResult {
    const errors: string[] = []

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
    if (!data.title || data.title.trim().length === 0) {
        errors.push('–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ')
    } else if (data.title.trim().length > 200) {
        errors.push('–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 200 —Å–∏–º–≤–æ–ª–æ–≤')
    } else if (data.title.trim().length < 3) {
        errors.push('–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞')
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è
    if (data.description && data.description.length > 1000) {
        errors.push('–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 1000 —Å–∏–º–≤–æ–ª–æ–≤')
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    const validPriorities = ['low', 'medium', 'high', 'urgent']
    if (data.priority && !validPriorities.includes(data.priority)) {
        errors.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏')
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    if (data.estimatedMinutes !== undefined) {
        if (data.estimatedMinutes < 1) {
            errors.push('–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0 –º–∏–Ω—É—Ç')
        } else if (data.estimatedMinutes > 480) { // 8 —á–∞—Å–æ–≤
            errors.push('–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 480 –º–∏–Ω—É—Ç (8 —á–∞—Å–æ–≤)')
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    if (data.dueDate) {
        const dueDate = new Date(data.dueDate)
        const now = new Date()

        if (isNaN(dueDate.getTime())) {
            errors.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
        } else if (dueDate < now) {
            errors.push('–î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º')
        }
    }

    return {
        isValid: errors.length === 0,
        errors
    }
}

/**
 * üìß –í–∞–ª–∏–¥–∞—Ü–∏—è email
 */
export function validateEmail(email: string): ValidationResult {
    const errors: string[] = []

    if (!email || email.trim().length === 0) {
        errors.push('Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω')
    } else {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
        if (!emailRegex.test(email.trim())) {
            errors.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email')
        } else if (email.length > 254) {
            errors.push('Email —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π')
        }
    }

    return {
        isValid: errors.length === 0,
        errors
    }
}

/**
 * üîê –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
 */
export function validatePassword(password: string): ValidationResult {
    const errors: string[] = []

    if (!password) {
        errors.push('–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω')
    } else {
        if (password.length < 8) {
            errors.push('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤')
        }
        if (password.length > 128) {
            errors.push('–ü–∞—Ä–æ–ª—å –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 128 —Å–∏–º–≤–æ–ª–æ–≤')
        }
        if (!/[a-z]/.test(password)) {
            errors.push('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã')
        }
        if (!/[A-Z]/.test(password)) {
            errors.push('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã')
        }
        if (!/\d/.test(password)) {
            errors.push('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ü–∏—Ñ—Ä—ã')
        }
    }

    return {
        isValid: errors.length === 0,
        errors
    }
}

/**
 * üë§ –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export function validateName(name: string): ValidationResult {
    const errors: string[] = []

    if (!name || name.trim().length === 0) {
        errors.push('–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ')
    } else if (name.trim().length < 2) {
        errors.push('–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞')
    } else if (name.trim().length > 50) {
        errors.push('–ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤')
    } else if (!/^[a-zA-Z–∞-—è–ê-–Ø—ë–Å\s-']+$/.test(name.trim())) {
        errors.push('–ò–º—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã, –¥–µ—Ñ–∏—Å—ã –∏ –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã')
    }

    return {
        isValid: errors.length === 0,
        errors
    }
}

/**
 * üõ°Ô∏è –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–æ–∫ (–∑–∞—â–∏—Ç–∞ –æ—Ç XSS)
 */
export function sanitizeString(input: string): string {
    return input
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;')
        .replace(/"/g, '&quot;')
        .replace(/'/g, '&#x27;')
        .replace(/\//g, '&#x2F;')
        .trim()
}

/**
 * üî¢ –í–∞–ª–∏–¥–∞—Ü–∏—è —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
 */
export function validateNumber(
    value: number,
    min?: number,
    max?: number,
    fieldName: string = '–ó–Ω–∞—á–µ–Ω–∏–µ'
): ValidationResult {
    const errors: string[] = []

    if (isNaN(value) || !isFinite(value)) {
        errors.push(`${fieldName} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º`)
    } else {
        if (min !== undefined && value < min) {
            errors.push(`${fieldName} –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ ${min}`)
        }
        if (max !== undefined && value > max) {
            errors.push(`${fieldName} –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ ${max}`)
        }
    }

    return {
        isValid: errors.length === 0,
        errors
    }
}

/**
 * üìÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
 */
export function validateTimeRange(start: string, end: string): ValidationResult {
    const errors: string[] = []

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ (HH:MM)
    const timeRegex = /^([01]?[0-9]|2[0-3]):[0-5][0-9]$/

    if (!timeRegex.test(start)) {
        errors.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ HH:MM)')
    }

    if (!timeRegex.test(end)) {
        errors.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ HH:MM)')
    }

    if (errors.length === 0) {
        const [startHour, startMin] = start.split(':').map(Number)
        const [endHour, endMin] = end.split(':').map(Number)

        const startMinutes = startHour * 60 + startMin
        const endMinutes = endHour * 60 + endMin

        if (startMinutes >= endMinutes) {
            errors.push('–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è')
        }
    }

    return {
        isValid: errors.length === 0,
        errors
    }
}

/**
 * üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
 */
export async function validateApiConnection(url: string): Promise<ValidationResult> {
    const errors: string[] = []

    try {
        const controller = new AbortController()
        const timeoutId = setTimeout(() => controller.abort(), 5000) // 5 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç

        const response = await fetch(url, {
            method: 'GET',
            signal: controller.signal,
            headers: {
                'Content-Type': 'application/json',
            },
        })

        clearTimeout(timeoutId)

        if (!response.ok) {
            errors.push(`API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å: ${response.status})`)
        }
    } catch (error) {
        if (error instanceof Error) {
            if (error.name === 'AbortError') {
                errors.push('–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API')
            } else {
                errors.push(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`)
            }
        } else {
            errors.push('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API')
        }
    }

    return {
        isValid: errors.length === 0,
        errors
    }
}

/**
 * üé® –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 */
export function formatValidationErrors(errors: string[]): string {
    if (errors.length === 0) return ''
    if (errors.length === 1) return errors[0]

    return errors.map((error, index) => `${index + 1}. ${error}`).join('\n')
}
