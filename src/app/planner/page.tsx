'use client'

import { ErrorBoundary } from '@/components/ErrorBoundary'
import { Button } from '@/components/ui/Button'
import { AIPlanner, AI_MODELS } from '@/lib/aiModels'
import { analyzeProductivityAndSuggest, smartTaskPrioritization } from '@/lib/smartPlanning'
import { useAppStore } from '@/stores/useAppStore'
import { Task, TaskPriority, TaskStatus } from '@/types'
import { validateTask } from '@/utils/validation'
import { BrainIcon, CalendarIcon, CheckCircleIcon, ClockIcon, LightbulbIcon, PlusIcon, TrendingUpIcon, ZapIcon } from 'lucide-react'
import { useEffect, useState } from 'react'

function PlannerPageContent() {
    const {
        tasks,
        addTask,
        updateTask,
        deleteTask,
        pendingTasks,
        urgentTasks,
        completedTasksToday
    } = useAppStore()

    const [showAddTask, setShowAddTask] = useState(false)
    const [newTask, setNewTask] = useState({
        title: '',
        description: '',
        priority: 'medium' as TaskPriority,
        estimatedMinutes: 30,
        dueDate: ''
    })

    // –ò–ò —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const [aiInsights, setAiInsights] = useState<{
        score: number
        insights: string[]
        recommendations: string[]
    }>({ score: 0, insights: [], recommendations: [] })

    const [isAiLoading, setIsAiLoading] = useState(false)
    const [smartSortEnabled, setSmartSortEnabled] = useState(true)
    const [aiModel] = useState('mock-ai') // –î–ª—è –¥–µ–º–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º mock

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    const [validationErrors, setValidationErrors] = useState<string[]>([])
    const [isSubmitting, setIsSubmitting] = useState(false)

    // –£–º–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∑–∞–¥–∞—á
    const getSortedTasks = (taskList: Task[]) => {
        return smartSortEnabled ? smartTaskPrioritization(taskList) : taskList
    }

    // –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    useEffect(() => {
        const runProductivityAnalysis = async () => {
            setIsAiLoading(true)
            try {
                const completedTasks = tasks.filter(t => t.status === 'completed')
                const analysis = analyzeProductivityAndSuggest(completedTasks)

                // –ï—Å–ª–∏ –µ—Å—Ç—å –ò–ò - –¥–æ–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
                if (aiModel && completedTasks.length > 0) {
                    try {
                        const aiPlanner = new AIPlanner(aiModel)
                        const aiAnalysis = await aiPlanner.analyzeProductivity(completedTasks)

                        setAiInsights({
                            score: aiAnalysis.score,
                            insights: [...analysis.insights, ...aiAnalysis.insights],
                            recommendations: [...analysis.recommendations, ...aiAnalysis.recommendations]
                        })
                    } catch (error) {
                        // Fallback –∫ –æ–±—ã—á–Ω–æ–º—É –∞–Ω–∞–ª–∏–∑—É
                        setAiInsights(analysis)
                    }
                } else {
                    setAiInsights(analysis)
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error)
            } finally {
                setIsAiLoading(false)
            }
        }

        runProductivityAnalysis()
    }, [tasks, aiModel])

    const handleAddTask = async () => {
        setIsSubmitting(true)
        setValidationErrors([])

        try {
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            const validation = validateTask({
                title: newTask.title,
                description: newTask.description,
                priority: newTask.priority,
                estimatedMinutes: newTask.estimatedMinutes,
                dueDate: newTask.dueDate
            })

            if (!validation.isValid) {
                setValidationErrors(validation.errors)
                setIsSubmitting(false)
                return
            }

            const task: Task = {
                id: crypto.randomUUID(),
                title: newTask.title.trim(),
                description: newTask.description?.trim() || undefined,
                priority: newTask.priority,
                status: 'todo' as TaskStatus,
                estimatedMinutes: newTask.estimatedMinutes,
                dueDate: newTask.dueDate ? new Date(newTask.dueDate) : undefined,
                source: 'manual',
                tags: [],
                userId: 'temp-user', // TODO: –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                createdAt: new Date(),
                updatedAt: new Date()
            }

            addTask(task)

            // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
            setNewTask({
                title: '',
                description: '',
                priority: 'medium',
                estimatedMinutes: 30,
                dueDate: ''
            })
            setValidationErrors([])
            setShowAddTask(false)
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:', error)
            setValidationErrors(['–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏'])
        } finally {
            setIsSubmitting(false)
        }
    }

    const handleToggleTask = (task: Task) => {
        const newStatus: TaskStatus = task.status === 'completed' ? 'todo' : 'completed'
        updateTask(task.id, {
            status: newStatus,
            completedAt: newStatus === 'completed' ? new Date() : undefined
        })
    }

    const getPriorityColor = (priority: TaskPriority) => {
        switch (priority) {
            case 'urgent': return 'bg-red-100 text-red-800 border-red-200'
            case 'high': return 'bg-orange-100 text-orange-800 border-orange-200'
            case 'medium': return 'bg-blue-100 text-blue-800 border-blue-200'
            case 'low': return 'bg-gray-100 text-gray-800 border-gray-200'
        }
    }

    const getPriorityIcon = (priority: TaskPriority) => {
        switch (priority) {
            case 'urgent': return 'üî¥'
            case 'high': return 'üü†'
            case 'medium': return 'üîµ'
            case 'low': return '‚ö™'
        }
    }

    return (
        <div className="min-h-screen bg-gradient-to-br from-indigo-50 via-white to-purple-50">
            {/* Header */}
            <header className="bg-white shadow-sm border-b">
                <div className="container mx-auto px-4 py-4">
                    <div className="flex items-center justify-between">
                        <div className="flex items-center gap-3">
                            <div className="w-10 h-10 bg-gradient-to-r from-indigo-600 to-purple-600 rounded-lg flex items-center justify-center">
                                <BrainIcon className="w-6 h-6 text-white" />
                            </div>
                            <div>
                                <h1 className="text-2xl font-bold text-gray-900">–ò–ò-–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫</h1>
                                <p className="text-sm text-gray-600">–ü—Ä–µ–≤—Ä–∞—â–∞–µ–º —Ö–∞–æ—Å –≤ —Å–∏—Å—Ç–µ–º—É</p>
                            </div>
                        </div>

                        <div className="flex items-center gap-3">
                            <div className="text-right">
                                <p className="text-sm text-gray-600">–°–µ–≥–æ–¥–Ω—è –≤—ã–ø–æ–ª–Ω–µ–Ω–æ</p>
                                <p className="text-lg font-semibold text-green-600">{completedTasksToday().length} –∑–∞–¥–∞—á</p>
                            </div>
                            <Button
                                onClick={() => setShowAddTask(true)}
                                className="gap-2"
                            >
                                <PlusIcon className="w-4 h-4" />
                                –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É
                            </Button>
                        </div>
                    </div>
                </div>
            </header>

            <main className="container mx-auto px-4 py-8">
                <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">

                    {/* –°—Ä–æ—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ */}
                    <div className="bg-white rounded-xl shadow-sm border p-6">
                        <div className="flex items-center gap-2 mb-4">
                            <div className="w-2 h-2 bg-red-500 rounded-full"></div>
                            <h2 className="text-lg font-semibold text-gray-900">–°—Ä–æ—á–Ω–æ</h2>
                            <span className="text-sm text-gray-500">({urgentTasks().length})</span>
                        </div>

                        <div className="space-y-3">
                            {getSortedTasks(urgentTasks()).map(task => (
                                <TaskCard
                                    key={task.id}
                                    task={task}
                                    onToggle={handleToggleTask}
                                    onDelete={deleteTask}
                                />
                            ))}
                            {urgentTasks().length === 0 && (
                                <p className="text-gray-500 text-sm py-4 text-center">
                                    üéâ –ù–µ—Ç —Å—Ä–æ—á–Ω—ã—Ö –∑–∞–¥–∞—á
                                </p>
                            )}
                        </div>
                    </div>

                    {/* –í—Å–µ –∑–∞–¥–∞—á–∏ */}
                    <div className="bg-white rounded-xl shadow-sm border p-6">
                        <div className="flex items-center gap-2 mb-4">
                            <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                            <h2 className="text-lg font-semibold text-gray-900">–í —Ä–∞–±–æ—Ç–µ</h2>
                            <span className="text-sm text-gray-500">({pendingTasks().length})</span>
                        </div>

                        <div className="space-y-3 max-h-96 overflow-y-auto">
                            {getSortedTasks(pendingTasks()).map(task => (
                                <TaskCard
                                    key={task.id}
                                    task={task}
                                    onToggle={handleToggleTask}
                                    onDelete={deleteTask}
                                />
                            ))}
                            {pendingTasks().length === 0 && (
                                <p className="text-gray-500 text-sm py-4 text-center">
                                    ‚ú® –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É
                                </p>
                            )}
                        </div>
                    </div>

                    {/* –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ */}
                    <div className="bg-white rounded-xl shadow-sm border p-6">
                        <div className="flex items-center gap-2 mb-4">
                            <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                            <h2 className="text-lg font-semibold text-gray-900">–í—ã–ø–æ–ª–Ω–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è</h2>
                            <span className="text-sm text-gray-500">({completedTasksToday().length})</span>
                        </div>

                        <div className="space-y-3 max-h-96 overflow-y-auto">
                            {completedTasksToday().map(task => (
                                <TaskCard
                                    key={task.id}
                                    task={task}
                                    onToggle={handleToggleTask}
                                    onDelete={deleteTask}
                                    completed
                                />
                            ))}
                            {completedTasksToday().length === 0 && (
                                <p className="text-gray-500 text-sm py-4 text-center">
                                    üéØ –ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
                                </p>
                            )}
                        </div>
                    </div>
                </div>

                {/* –ò–ò –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ */}
                <div className="mt-8 space-y-6">
                    {/* –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ò–ò */}
                    <div className="bg-white rounded-xl shadow-sm border p-6">
                        <div className="flex items-center justify-between mb-4">
                            <div className="flex items-center gap-3">
                                <ZapIcon className="w-6 h-6 text-indigo-600" />
                                <h3 className="text-lg font-semibold">–£–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏</h3>
                            </div>
                            <div className="flex items-center gap-3">
                                <label className="flex items-center gap-2 text-sm">
                                    <input
                                        type="checkbox"
                                        checked={smartSortEnabled}
                                        onChange={(e) => setSmartSortEnabled(e.target.checked)}
                                        className="rounded"
                                    />
                                    –£–º–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
                                </label>
                                <div className="text-xs text-gray-500 bg-gray-100 px-2 py-1 rounded">
                                    {AI_MODELS[aiModel]?.name || '–ú–æ–¥–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞'}
                                </div>
                            </div>
                        </div>

                        {smartSortEnabled && (
                            <div className="text-sm text-gray-600 bg-blue-50 p-3 rounded-lg">
                                üß† –ó–∞–¥–∞—á–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É, –¥–µ–¥–ª–∞–π–Ω–∞–º –∏ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                            </div>
                        )}
                    </div>

                    {/* –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ */}
                    <div className="bg-gradient-to-r from-indigo-600 to-purple-600 rounded-xl p-6 text-white">
                        <div className="flex items-center justify-between mb-4">
                            <div className="flex items-center gap-3">
                                <TrendingUpIcon className="w-6 h-6" />
                                <h3 className="text-lg font-semibold">–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</h3>
                            </div>
                            <div className="text-2xl font-bold">
                                {isAiLoading ? '...' : `${aiInsights.score}%`}
                            </div>
                        </div>

                        {isAiLoading ? (
                            <div className="text-center py-4">
                                <div className="animate-spin w-6 h-6 border-2 border-white border-t-transparent rounded-full mx-auto"></div>
                                <p className="text-sm mt-2 opacity-90">–ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à—É –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å...</p>
                            </div>
                        ) : (
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                {/* –ò–Ω—Å–∞–π—Ç—ã */}
                                <div className="bg-white/10 rounded-lg p-4">
                                    <h4 className="font-medium mb-2 flex items-center gap-2">
                                        <TrendingUpIcon className="w-4 h-4" />
                                        –ê–Ω–∞–ª–∏–∑
                                    </h4>
                                    <div className="space-y-1">
                                        {aiInsights.insights.slice(0, 3).map((insight, index) => (
                                            <p key={index} className="text-sm opacity-90">‚Ä¢ {insight}</p>
                                        ))}
                                        {aiInsights.insights.length === 0 && (
                                            <p className="text-sm opacity-75">–î–æ–±–∞–≤—å—Ç–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞</p>
                                        )}
                                    </div>
                                </div>

                                {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ */}
                                <div className="bg-white/10 rounded-lg p-4">
                                    <h4 className="font-medium mb-2 flex items-center gap-2">
                                        <LightbulbIcon className="w-4 h-4" />
                                        –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ò–ò
                                    </h4>
                                    <div className="space-y-1">
                                        {aiInsights.recommendations.slice(0, 3).map((rec, index) => (
                                            <p key={index} className="text-sm opacity-90">‚Ä¢ {rec}</p>
                                        ))}
                                        {aiInsights.recommendations.length === 0 && (
                                            <p className="text-sm opacity-75">–í—ã–ø–æ–ª–Ω–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π</p>
                                        )}
                                    </div>
                                </div>
                            </div>
                        )}

                        {/* –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ */}
                        <div className="mt-4 pt-4 border-t border-white/20">
                            <div className="flex items-center justify-between text-sm">
                                <span className="opacity-75">–î–æ—Å—Ç—É–ø–Ω—ã–µ –ò–ò –º–æ–¥–µ–ª–∏:</span>
                                <div className="flex gap-2">
                                    <span className="bg-white/20 px-2 py-1 rounded text-xs">üÜì Mock AI</span>
                                    <span className="bg-white/10 px-2 py-1 rounded text-xs opacity-50">üíé GPT-4o Mini</span>
                                    <span className="bg-white/10 px-2 py-1 rounded text-xs opacity-50">üöÄ Claude Sonnet</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </main>

            {/* –ú–æ–¥–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ */}
            {showAddTask && (
                <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
                    <div className="bg-white rounded-xl p-6 w-full max-w-md">
                        <h3 className="text-lg font-semibold mb-4">–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É</h3>

                        {/* –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ */}
                        {validationErrors.length > 0 && (
                            <div className="bg-red-50 border border-red-200 rounded-lg p-3 mb-4">
                                <h4 className="text-sm font-medium text-red-800 mb-2">–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏:</h4>
                                <ul className="text-sm text-red-700 space-y-1">
                                    {validationErrors.map((error, index) => (
                                        <li key={index} className="flex items-start gap-2">
                                            <span className="text-red-500 mt-0.5">‚Ä¢</span>
                                            <span>{error}</span>
                                        </li>
                                    ))}
                                </ul>
                            </div>
                        )}

                        <div className="space-y-4">
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">
                                    –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ *
                                </label>
                                <input
                                    type="text"
                                    value={newTask.title}
                                    onChange={(e) => setNewTask(prev => ({ ...prev, title: e.target.value }))}
                                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                                    placeholder="–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å?"
                                    autoFocus
                                />
                            </div>

                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">
                                    –û–ø–∏—Å–∞–Ω–∏–µ
                                </label>
                                <textarea
                                    value={newTask.description}
                                    onChange={(e) => setNewTask(prev => ({ ...prev, description: e.target.value }))}
                                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                                    rows={2}
                                    placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏..."
                                />
                            </div>

                            <div className="grid grid-cols-2 gap-4">
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-1">
                                        –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                                    </label>
                                    <select
                                        value={newTask.priority}
                                        onChange={(e) => setNewTask(prev => ({ ...prev, priority: e.target.value as TaskPriority }))}
                                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                                    >
                                        <option value="low">üü¢ –ù–∏–∑–∫–∏–π</option>
                                        <option value="medium">üîµ –°—Ä–µ–¥–Ω–∏–π</option>
                                        <option value="high">üü† –í—ã—Å–æ–∫–∏–π</option>
                                        <option value="urgent">üî¥ –°—Ä–æ—á–Ω—ã–π</option>
                                    </select>
                                </div>

                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-1">
                                        –í—Ä–µ–º—è (–º–∏–Ω)
                                    </label>
                                    <input
                                        type="number"
                                        value={newTask.estimatedMinutes}
                                        onChange={(e) => setNewTask(prev => ({ ...prev, estimatedMinutes: parseInt(e.target.value) || 30 }))}
                                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                                        min="5"
                                        step="5"
                                    />
                                </div>
                            </div>

                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">
                                    –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                                </label>
                                <input
                                    type="datetime-local"
                                    value={newTask.dueDate}
                                    onChange={(e) => setNewTask(prev => ({ ...prev, dueDate: e.target.value }))}
                                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                                />
                            </div>
                        </div>

                        <div className="flex gap-3 mt-6">
                            <Button
                                onClick={handleAddTask}
                                className="flex-1"
                                disabled={isSubmitting}
                                isLoading={isSubmitting}
                            >
                                {isSubmitting ? '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ...' : '–î–æ–±–∞–≤–∏—Ç—å'}
                            </Button>
                            <Button
                                onClick={() => {
                                    setShowAddTask(false)
                                    setValidationErrors([])
                                }}
                                variant="outline"
                                className="flex-1"
                                disabled={isSubmitting}
                            >
                                –û—Ç–º–µ–Ω–∞
                            </Button>
                        </div>
                    </div>
                </div>
            )}
        </div>
    )
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–¥–∞—á–∏
interface TaskCardProps {
    task: Task
    onToggle: (task: Task) => void
    onDelete: (id: string) => void
    completed?: boolean
}

function TaskCard({ task, onToggle, onDelete, completed }: TaskCardProps) {
    const getPriorityColor = (priority: TaskPriority) => {
        switch (priority) {
            case 'urgent': return 'bg-red-100 text-red-800 border-red-200'
            case 'high': return 'bg-orange-100 text-orange-800 border-orange-200'
            case 'medium': return 'bg-blue-100 text-blue-800 border-blue-200'
            case 'low': return 'bg-gray-100 text-gray-800 border-gray-200'
        }
    }

    const getPriorityIcon = (priority: TaskPriority) => {
        switch (priority) {
            case 'urgent': return 'üî¥'
            case 'high': return 'üü†'
            case 'medium': return 'üîµ'
            case 'low': return '‚ö™'
        }
    }

    return (
        <div className={`p-3 border rounded-lg transition-all hover:shadow-sm ${completed ? 'bg-gray-50 opacity-75' : 'bg-white hover:bg-gray-50'
            }`}>
            <div className="flex items-start gap-3">
                <button
                    onClick={() => onToggle(task)}
                    className={`mt-1 w-5 h-5 rounded-full border-2 flex items-center justify-center transition-colors ${task.status === 'completed'
                        ? 'bg-green-500 border-green-500 text-white'
                        : 'border-gray-300 hover:border-green-500'
                        }`}
                >
                    {task.status === 'completed' && <CheckCircleIcon className="w-3 h-3" />}
                </button>

                <div className="flex-1 min-w-0">
                    <div className="flex items-center gap-2 mb-1">
                        <h4 className={`font-medium ${task.status === 'completed' ? 'line-through text-gray-500' : 'text-gray-900'
                            }`}>
                            {task.title}
                        </h4>
                        <span className={`px-2 py-0.5 text-xs rounded-full border ${getPriorityColor(task.priority)}`}>
                            {getPriorityIcon(task.priority)}
                        </span>
                    </div>

                    {task.description && (
                        <p className="text-sm text-gray-600 mb-2">{task.description}</p>
                    )}

                    <div className="flex items-center gap-4 text-xs text-gray-500">
                        {task.estimatedMinutes && (
                            <div className="flex items-center gap-1">
                                <ClockIcon className="w-3 h-3" />
                                {task.estimatedMinutes}–º
                            </div>
                        )}
                        {task.dueDate && (
                            <div className="flex items-center gap-1">
                                <CalendarIcon className="w-3 h-3" />
                                {new Date(task.dueDate).toLocaleDateString('ru')}
                            </div>
                        )}
                    </div>
                </div>

                <button
                    onClick={() => onDelete(task.id)}
                    className="text-gray-400 hover:text-red-500 transition-colors p-1"
                    title="–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É"
                >
                    ‚úï
                </button>
            </div>
        </div>
    )
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å ErrorBoundary
export default function PlannerPage() {
    return (
        <ErrorBoundary>
            <PlannerPageContent />
        </ErrorBoundary>
    )
}
