// üîî Stripe webhook –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π –ø–æ–¥–ø–∏—Å–æ–∫
import { handleWebhookEvent, verifyWebhookSignature } from '@/lib/stripe'
import { headers } from 'next/headers'
import { NextRequest, NextResponse } from 'next/server'

export async function POST(request: NextRequest) {
    try {
        const body = await request.text()
        const signature = headers().get('stripe-signature')

        if (!signature) {
            console.error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Stripe signature')
            return NextResponse.json(
                { error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç signature' },
                { status: 400 }
            )
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å webhook
        if (!verifyWebhookSignature(body, signature)) {
            return NextResponse.json(
                { error: 'Invalid signature' },
                { status: 400 }
            )
        }

        // –ü–∞—Ä—Å–∏–º —Å–æ–±—ã—Ç–∏–µ
        const event = JSON.parse(body)

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º webhook
        const result = await handleWebhookEvent(event)

        if (!result.success) {
            console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:', result.error)
            return NextResponse.json(
                { error: result.error },
                { status: 400 }
            )
        }

        return NextResponse.json({ received: true })
    } catch (error: any) {
        console.error('–û—à–∏–±–∫–∞ webhook:', error)
        return NextResponse.json(
            { error: 'Webhook error' },
            { status: 500 }
        )
    }
}
