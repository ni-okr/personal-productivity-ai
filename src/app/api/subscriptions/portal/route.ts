// üè† API –¥–ª—è –¢–∏–Ω—å–∫–æ—Ñ—Ñ Customer Portal (–∑–∞–≥–ª—É—à–∫–∞)
import { getCurrentUser } from '@/lib/auth'
import { NextRequest, NextResponse } from 'next/server'

export async function POST(request: NextRequest) {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        const user = await getCurrentUser()
        if (!user) {
            return NextResponse.json(
                { success: false, error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' },
                { status: 401 }
            )
        }

        const { returnUrl } = await request.json()

        // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¢–∏–Ω—å–∫–æ—Ñ—Ñ Customer Portal
        // –í —Ä–µ–∞–ª—å–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ –¢–∏–Ω—å–∫–æ—Ñ—Ñ API
        console.log('üîÑ –¢–∏–Ω—å–∫–æ—Ñ—Ñ Customer Portal (–∑–∞–≥–ª—É—à–∫–∞):', {
            userId: user.id,
            returnUrl: returnUrl || `${process.env.NEXT_PUBLIC_APP_URL}/planner`
        })

        // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ API
        await new Promise(resolve => setTimeout(resolve, 100))

        return NextResponse.json({
            success: true,
            data: {
                url: returnUrl || `${process.env.NEXT_PUBLIC_APP_URL}/planner`,
                message: 'Customer Portal (–∑–∞–≥–ª—É—à–∫–∞)'
            }
        })
    } catch (error: any) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è portal —Å–µ—Å—Å–∏–∏:', error)
        return NextResponse.json(
            { success: false, error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
            { status: 500 }
        )
    }
}
