// üí≥ API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è checkout —Å–µ—Å—Å–∏–∏
import { createPaymentSession } from '@/lib/tinkoff'
import { NextRequest, NextResponse } from 'next/server'
import { getSubscriptionPlan } from '@/lib/subscriptions'
import { createPaymentRow, setPaymentProviderInfo } from '@/lib/payments'
import { createLiveTinkoffPayment, createTestTinkoffPayment } from '@/lib/tinkoff-api'
import crypto from 'crypto'

export async function POST(request: NextRequest) {
    try {
        const { planId, paymentMethod = 'bank_transfer' } = await request.json()

        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º getCurrentUserFromRequest –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        const { getCurrentUserFromRequest } = await import('@/lib/auth')

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
        const user = await getCurrentUserFromRequest(request)
        if (!user) {
            return NextResponse.json(
                { success: false, error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' },
                { status: 401 }
            )
        }

        if (!planId) {
            return NextResponse.json(
                { success: false, error: '–ü–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ —É–∫–∞–∑–∞–Ω' },
                { status: 400 }
            )
        }

        const plan = getSubscriptionPlan(planId)
        if (!plan) {
            return NextResponse.json(
                { success: false, error: '–ü–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω' },
                { status: 400 }
            )
        }

        // –í–µ—Ç–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∫–∞—Ä—Ç–æ–π —á–µ—Ä–µ–∑ Kassa API (Init ‚Üí PaymentURL)
        if (paymentMethod === 'card') {
            // 1) –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –≤ –Ω–∞—à–µ–π –ë–î
            const orderId = crypto.randomUUID()
            const createRow = await createPaymentRow({
                orderId,
                userId: user.id,
                planId,
                amountCents: plan.price,
                currency: 'RUB',
                meta: { plan }
            })
            if (!createRow.success) {
                return NextResponse.json({ success: false, error: createRow.error }, { status: 500 })
            }

            // 2) –í—ã–∑–æ–≤ Init
            const amountRub = Math.round(plan.price) / 100
            const description = `–ü–æ–¥–ø–∏—Å–∫–∞ ${planId}`

            const isTest = (process.env.TINKOFF_ENV || 'test') === 'test'
            const initResp = isTest
                ? await createTestTinkoffPayment(amountRub, description, orderId)
                : await createLiveTinkoffPayment(amountRub, description, orderId)

            if (!initResp.Success || !initResp.PaymentURL) {
                // –û–±–Ω–æ–≤–∏–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –∫–∞–∫ failed
                await setPaymentProviderInfo({ orderId, status: 'failed', metaAppend: initResp as any })
                return NextResponse.json({ success: false, error: initResp.Message || 'Init failed' }, { status: 400 })
            }

            // 3) –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
            await setPaymentProviderInfo({
                orderId,
                paymentId: initResp.PaymentId ? String(initResp.PaymentId) : undefined,
                paymentUrl: initResp.PaymentURL,
                status: 'pending',
                metaAppend: initResp as any
            })

            return NextResponse.json({
                success: true,
                data: {
                    paymentUrl: initResp.PaymentURL,
                    orderId
                }
            })
        }

        // –î–ª—è –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ / QR / –°–ë–ü ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–ª–æ—É
        const result = await createPaymentSession({
            userId: user.id,
            planId,
            amount: Math.round(plan.price) / 100,
            currency: 'RUB',
            description: `–ü–æ–¥–ø–∏—Å–∫–∞ ${planId}`,
            paymentMethod: paymentMethod as 'bank_transfer' | 'qr_code' | 'sbp' | 'card'
        })

        if (!result.success) {
            return NextResponse.json(
                { success: false, error: result.error },
                { status: 400 }
            )
        }

        return NextResponse.json({ success: true, data: result.data })
    } catch (error: any) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è checkout —Å–µ—Å—Å–∏–∏:', error)
        return NextResponse.json(
            { success: false, error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
            { status: 500 }
        )
    }
}
