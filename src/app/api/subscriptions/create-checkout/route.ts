// üí≥ API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¢–∏–Ω—å–∫–æ—Ñ—Ñ checkout —Å–µ—Å—Å–∏–∏
import { createPaymentSession, getTinkoffPriceId } from '@/lib/tinkoff'
import { NextRequest, NextResponse } from 'next/server'

export async function POST(request: NextRequest) {
    try {
        const { planId, successUrl, cancelUrl, paymentMethod = 'bank_transfer' } = await request.json()

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (mock —Ä–µ–∂–∏–º)
        if (process.env.NEXT_PUBLIC_DISABLE_EMAIL === 'true' || !process.env.TINKOFF_TERMINAL_KEY) {
            console.log('üß™ MOCK –†–ï–ñ–ò–ú: –°–æ–∑–¥–∞–Ω–∏–µ checkout —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–ª–∞–Ω–∞:', planId)

            // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
            return NextResponse.json({
                success: true,
                data: {
                    sessionId: 'mock-session-' + Date.now(),
                    url: successUrl || '/planner?payment=success&plan=' + planId,
                    message: 'Checkout —Å–µ—Å—Å–∏—è (–∑–∞–≥–ª—É—à–∫–∞ - —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)',
                    planId: planId
                }
            })
        }

        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º getCurrentUser —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        const { getCurrentUser } = await import('@/lib/auth')

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        const user = await getCurrentUser()
        if (!user) {
            return NextResponse.json(
                { success: false, error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' },
                { status: 401 }
            )
        }

        if (!planId) {
            return NextResponse.json(
                { success: false, error: '–ü–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ —É–∫–∞–∑–∞–Ω' },
                { status: 400 }
            )
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –ø–ª–∞–Ω–∞
        const priceInfo = getTinkoffPriceId(planId)
        if (!priceInfo) {
            return NextResponse.json(
                { success: false, error: '–ü–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω' },
                { status: 400 }
            )
        }

        // –°–æ–∑–¥–∞–µ–º checkout —Å–µ—Å—Å–∏—é
        const result = await createPaymentSession({
            userId: user.id,
            planId,
            amount: priceInfo.amount,
            currency: priceInfo.currency,
            description: `–ü–æ–¥–ø–∏—Å–∫–∞ ${planId}`,
            paymentMethod: paymentMethod as 'bank_transfer' | 'qr_code' | 'sbp' | 'card'
        })

        if (!result.success) {
            return NextResponse.json(
                { success: false, error: result.error },
                { status: 400 }
            )
        }

        return NextResponse.json({
            success: true,
            data: result.data
        })
    } catch (error: any) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è checkout —Å–µ—Å—Å–∏–∏:', error)
        return NextResponse.json(
            { success: false, error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
            { status: 500 }
        )
    }
}
