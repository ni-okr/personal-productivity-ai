import { NextRequest, NextResponse } from 'next/server'
import { z } from 'zod'
import { supabase } from '@/lib/supabase'

// –°—Ö–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è email
const subscribeSchema = z.object({
    email: z.string().email('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å'),
})

export async function POST(request: NextRequest) {
    try {
        console.log('üöÄ API /subscribe –≤—ã–∑–≤–∞–Ω')

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        console.log('üîß –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:', {
            supabaseUrl: process.env.NEXT_PUBLIC_SUPABASE_URL ? 'SET' : 'NOT SET',
            supabaseKey: process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY ? 'SET' : 'NOT SET'
        })

        const body = await request.json()
        console.log('üìù –ü–æ–ª—É—á–µ–Ω body:', body)

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        const result = subscribeSchema.safeParse(body)

        if (!result.success) {
            console.log('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞:', result.error.errors)
            return NextResponse.json(
                {
                    success: false,
                    error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å',
                    details: result.error.errors
                },
                { status: 400 }
            )
        }

        const { email } = result.data
        console.log('‚úÖ Email –≤–∞–ª–∏–¥–µ–Ω:', email)

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase
        if (!process.env.NEXT_PUBLIC_SUPABASE_URL || !process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY) {
            console.log('‚ö†Ô∏è –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É')
            return NextResponse.json({
                success: true,
                message: '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!',
                data: { email, subscribedAt: new Date().toISOString() }
            })
        }

        console.log('üì° –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ —á–µ—Ä–µ–∑ Supabase')
        const { data, error } = await supabase.from('subscribers').insert({ email })
        if (error) throw error
        console.log('üì° –ü–æ–¥–ø–∏—Å—á–∏–∫ —Å–æ–∑–¥–∞–Ω:', data)

        return NextResponse.json({ success: true, subscription: data })

    } catch (error: any) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ:', error)

        // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ
        const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
        console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
            message: errorMessage,
            stack: error instanceof Error ? error.stack : 'No stack trace',
            type: typeof error,
            supabaseUrl: process.env.NEXT_PUBLIC_SUPABASE_URL ? 'SET' : 'NOT SET',
            supabaseKey: process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY ? 'SET' : 'NOT SET'
        })

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è email
        if (errorMessage.includes('—É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω') || errorMessage.includes('duplicate key') || errorMessage.includes('23505')) {
            return NextResponse.json(
                {
                    success: false,
                    error: '–≠—Ç–æ—Ç email —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å –∫ –ø—Ä–æ–µ–∫—Ç—É!'
                },
                { status: 200 } // –ú–µ–Ω—è–µ–º –Ω–∞ 200, —á—Ç–æ–±—ã —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –æ–±—Ä–∞–±–æ—Ç–∞–ª –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç
            )
        }

        return NextResponse.json(
            {
                success: false,
                error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                details: process.env.NODE_ENV === 'development' ? errorMessage : undefined,
                debug: process.env.NODE_ENV === 'development' ? {
                    supabaseConfigured: !!(process.env.NEXT_PUBLIC_SUPABASE_URL && process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY)
                } : undefined
            },
            { status: 500 }
        )
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ GET –∑–∞–ø—Ä–æ—Å–æ–≤ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
export async function GET() {
    return NextResponse.json({
        message: 'API –ø–æ–¥–ø–∏—Å–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç',
        endpoint: '/api/subscribe',
        method: 'POST',
        required_fields: ['email']
    })
}
