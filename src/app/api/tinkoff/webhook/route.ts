// üîó Webhook endpoint –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç –¢–∏–Ω—å–∫–æ—Ñ—Ñ

import { NextRequest, NextResponse } from 'next/server'
import { handleTinkoffWebhook, verifyTinkoffWebhookSignature } from '@/lib/tinkoff'

export async function POST(request: NextRequest) {
    try {
        const body = await request.text()
        const signature = request.headers.get('x-tinkoff-signature') || ''

        console.log('üîó –ü–æ–ª—É—á–µ–Ω webhook –æ—Ç –¢–∏–Ω—å–∫–æ—Ñ—Ñ', {
            body: body.substring(0, 200) + '...',
            signature: signature.substring(0, 20) + '...',
            timestamp: new Date().toISOString()
        })

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å (–≤ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ)
        const isValidSignature = verifyTinkoffWebhookSignature(body, signature)
        
        if (!isValidSignature) {
            console.warn('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å webhook –æ—Ç –¢–∏–Ω—å–∫–æ—Ñ—Ñ')
            return NextResponse.json(
                { success: false, error: 'Invalid signature' },
                { status: 401 }
            )
        }

        // –ü–∞—Ä—Å–∏–º JSON
        let payload
        try {
            payload = JSON.parse(body)
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON webhook:', error)
            return NextResponse.json(
                { success: false, error: 'Invalid JSON' },
                { status: 400 }
            )
        }

        console.log('üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook payload:', {
            TerminalKey: payload.TerminalKey,
            OrderId: payload.OrderId,
            Status: payload.Status,
            PaymentId: payload.PaymentId
        })

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º webhook
        const result = await handleTinkoffWebhook(payload)

        if (result.success) {
            console.log('‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω')
            return NextResponse.json({ success: true })
        } else {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:', result.error)
            return NextResponse.json(
                { success: false, error: result.error },
                { status: 500 }
            )
        }

    } catch (error: any) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:', error)
        return NextResponse.json(
            { success: false, error: 'Internal server error' },
            { status: 500 }
        )
    }
}

// GET –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ webhook
export async function GET() {
    return NextResponse.json({
        success: true,
        message: 'Tinkoff webhook endpoint is active',
        timestamp: new Date().toISOString()
    })
}
