import { NextResponse } from 'next/server'

export async function POST(request: Request) {
    try {
        const { amount, description, planId } = await request.json()

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–∫–∞–∑–∞
        const orderId = `mock_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`

        console.log('üß™ Mock —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂:', { amount, description, planId, orderId })

        return NextResponse.json({
            success: true,
            data: {
                paymentId: `mock_${orderId}`,
                paymentUrl: `https://securepay.tinkoff.ru/new/mock_${orderId}`,
                orderId: orderId,
                amount: amount,
                description: description,
                testCardData: {
                    number: '4300 0000 0000 0777',
                    expiry: '12/30',
                    cvv: '111'
                },
                instructions: {
                    step1: '–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã',
                    step2: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—É—é –∫–∞—Ä—Ç—É: 4300 0000 0000 0777',
                    step3: '–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: 12/30, CVV: 111',
                    step4: '–û–∂–∏–¥–∞–π—Ç–µ —Å—Ç–∞—Ç—É—Å "–û–ø–ª–∞—á–µ–Ω–æ"'
                },
                mockMode: true,
                setupRequired: false,
                setupMessage: 'Mock —Ä–µ–∂–∏–º - —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–ª–∞—Ç–µ–∂–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö API –∫–ª—é—á–µ–π'
            }
        })
    } catch (error: any) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è mock –ø–ª–∞—Ç–µ–∂–∞:', error)
        return NextResponse.json(
            { success: false, error: error.message || '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
            { status: 500 }
        )
    }
}
