// üß™ API endpoint –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π –¢–∏–Ω—å–∫–æ—Ñ—Ñ

import { NextRequest, NextResponse } from 'next/server'
import { createTestTinkoffPayment, TEST_CARD_DATA } from '@/lib/tinkoff-api'

export async function POST(request: NextRequest) {
  try {
    const { amount, description, planId } = await request.json()

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!amount || !description || !planId) {
      return NextResponse.json(
        { success: false, error: '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: amount, description, planId' },
        { status: 400 }
      )
    }

    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–∫–∞–∑–∞
    const orderId = `test_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`

    console.log('üß™ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞', {
      amount,
      description,
      planId,
      orderId
    })

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂
    const paymentResponse = await createTestTinkoffPayment(amount, description, orderId)

    if (!paymentResponse.Success) {
      return NextResponse.json(
        { 
          success: false, 
          error: paymentResponse.Message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞',
          errorCode: paymentResponse.ErrorCode
        },
        { status: 400 }
      )
    }

    return NextResponse.json({
      success: true,
      data: {
        paymentId: paymentResponse.PaymentId,
        paymentUrl: paymentResponse.PaymentURL,
        orderId: orderId,
        amount: amount,
        description: description,
        testCardData: TEST_CARD_DATA,
        instructions: {
          step1: '–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã',
          step2: `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—É—é –∫–∞—Ä—Ç—É: ${TEST_CARD_DATA.number}`,
          step3: `–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: ${TEST_CARD_DATA.expiry}, CVV: ${TEST_CARD_DATA.cvv}`,
          step4: '–û–∂–∏–¥–∞–π—Ç–µ —Å—Ç–∞—Ç—É—Å "–û–ø–ª–∞—á–µ–Ω–æ"'
        }
      }
    })

  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞:', error)
    return NextResponse.json(
      { success: false, error: error.message || '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    )
  }
}
