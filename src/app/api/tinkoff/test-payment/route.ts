// üß™ API endpoint –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π –¢–∏–Ω—å–∫–æ—Ñ—Ñ

import { createTestTinkoffPayment, TEST_CARD_DATA } from '@/lib/tinkoff-api'
import { NextRequest, NextResponse } from 'next/server'

export async function POST(request: NextRequest) {
    try {
        const { amount, description, planId } = await request.json()

        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (!amount || !description || !planId) {
            return NextResponse.json(
                { success: false, error: '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: amount, description, planId' },
                { status: 400 }
            )
        }

        // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–∫–∞–∑–∞
        const orderId = `test_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`

        console.log('üß™ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞', {
            amount,
            description,
            planId,
            orderId,
            hasTerminalKey: !!process.env.TINKOFF_TERMINAL_KEY,
            hasSecretKey: !!process.env.TINKOFF_SECRET_KEY
        })

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–ª—é—á–∏ –¢–∏–Ω—å–∫–æ—Ñ—Ñ
        const hasTinkoffKeys = process.env.TINKOFF_TERMINAL_KEY && process.env.TINKOFF_SECRET_KEY

        if (!hasTinkoffKeys) {
            // Mock —Ä–µ–∂–∏–º - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            console.log('üß™ Mock —Ä–µ–∂–∏–º - –∫–ª—é—á–∏ –¢–∏–Ω—å–∫–æ—Ñ—Ñ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã')

            return NextResponse.json({
                success: true,
                data: {
                    paymentId: `mock_${orderId}`,
                    paymentUrl: `https://personal-productivity-ai.vercel.app/planner?payment=success&orderId=${orderId}`,
                    orderId: orderId,
                    amount: amount,
                    description: description,
                    testCardData: {
                        number: '4300 0000 0000 0777',
                        expiry: '12/30',
                        cvv: '111'
                    },
                    instructions: {
                        step1: '–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã',
                        step2: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—É—é –∫–∞—Ä—Ç—É: 4300 0000 0000 0777',
                        step3: '–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: 12/30, CVV: 111',
                        step4: '–û–∂–∏–¥–∞–π—Ç–µ —Å—Ç–∞—Ç—É—Å "–û–ø–ª–∞—á–µ–Ω–æ"'
                    },
                    mockMode: true,
                    setupRequired: true,
                    setupMessage: '–î–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ TINKOFF_TERMINAL_KEY –∏ TINKOFF_SECRET_KEY –≤ Vercel'
                }
            })
        }

        // –†–µ–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º - –∏—Å–ø–æ–ª—å–∑—É–µ–º –¢–∏–Ω—å–∫–æ—Ñ—Ñ API
        console.log('üí≥ –†–µ–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º - –∏—Å–ø–æ–ª—å–∑—É–µ–º –¢–∏–Ω—å–∫–æ—Ñ—Ñ API')
        const paymentResponse = await createTestTinkoffPayment(amount, description, orderId)

        if (!paymentResponse.Success) {
            console.error('–û—à–∏–±–∫–∞ –¢–∏–Ω—å–∫–æ—Ñ—Ñ API:', {
                ErrorCode: paymentResponse.ErrorCode,
                Message: paymentResponse.Message,
                Details: paymentResponse.Details
            })
            
            return NextResponse.json(
                {
                    success: false,
                    error: paymentResponse.Message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞',
                    errorCode: paymentResponse.ErrorCode,
                    details: paymentResponse.Details
                },
                { status: 400 }
            )
        }

        console.log('‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ –¢–∏–Ω—å–∫–æ—Ñ—Ñ API:', {
            PaymentId: paymentResponse.PaymentId,
            OrderId: paymentResponse.OrderId,
            Amount: paymentResponse.Amount
        })

        return NextResponse.json({
            success: true,
            data: {
                paymentId: paymentResponse.PaymentId,
                paymentUrl: paymentResponse.PaymentURL,
                orderId: orderId,
                amount: amount,
                description: description,
                testCardData: TEST_CARD_DATA,
                instructions: {
                    step1: '–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã',
                    step2: `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—É—é –∫–∞—Ä—Ç—É: ${TEST_CARD_DATA.number}`,
                    step3: `–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: ${TEST_CARD_DATA.expiry}, CVV: ${TEST_CARD_DATA.cvv}`,
                    step4: '–û–∂–∏–¥–∞–π—Ç–µ —Å—Ç–∞—Ç—É—Å "–û–ø–ª–∞—á–µ–Ω–æ"'
                },
                mockMode: false,
                setupRequired: false
            }
        })

    } catch (error: any) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞:', error)
        return NextResponse.json(
            { success: false, error: error.message || '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
            { status: 500 }
        )
    }
}
