// üí≥ –•—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
'use client'

import { getSubscriptionPlan } from '@/lib/subscriptions'
import { useAppStore } from '@/stores/useAppStore'
import { Subscription, SubscriptionPlan } from '@/types'
import { useEffect, useState } from 'react'

interface UseSubscriptionReturn {
    subscription: Subscription | null
    plan: SubscriptionPlan | null
    isLoading: boolean
    error: string | null
    createCheckoutSession: (planId: string) => Promise<{ success: boolean; url?: string; error?: string }>
    createPortalSession: () => Promise<{ success: boolean; url?: string; error?: string }>
    refreshSubscription: () => Promise<void>
}

export function useSubscription(): UseSubscriptionReturn {
    const { user } = useAppStore()
    const [subscription, setSubscription] = useState<Subscription | null>(null)
    const [plan, setPlan] = useState<SubscriptionPlan | null>(null)
    const [isLoading, setIsLoading] = useState(true)
    const [error, setError] = useState<string | null>(null)

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
    const loadSubscription = async () => {
        try {
            setIsLoading(true)
            setError(null)

            // üö® MOCK –†–ï–ñ–ò–ú: –ò—Å–ø–æ–ª—å–∑—É–µ–º mock —Ñ—É–Ω–∫—Ü–∏–∏ –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            if (process.env.NEXT_PUBLIC_DISABLE_EMAIL === 'true') {
                const { mockGetSubscription } = await import('../../tests/mocks/subscription-mock')

                if (user?.id) {
                    console.log('useSubscription: Loading subscription for user:', user.id)
                    const result = await mockGetSubscription(user.id)
                    console.log('useSubscription: Mock result:', result)
                    if (result.success && result.subscription) {
                        console.log('useSubscription: Setting subscription:', result.subscription)
                        setSubscription(result.subscription)
                        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ tier
                        const plan = getSubscriptionPlan(result.subscription.tier)
                        setPlan(plan)
                    } else {
                        setError(result.error || '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
                    }
                } else {
                    setError('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω')
                }
            } else {
                const response = await fetch(`${process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000'}/api/subscriptions/status`)
                const result = await response.json()

                if (result.success) {
                    setSubscription(result.data.subscription)
                    setPlan(result.data.plan)
                } else {
                    setError(result.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏')
                }
            }
        } catch (err: any) {
            setError(err.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏')
        } finally {
            setIsLoading(false)
        }
    }

    // –°–æ–∑–¥–∞–µ–º checkout —Å–µ—Å—Å–∏—é
    const createCheckoutSession = async (planId: string) => {
        try {
            setError(null)

            const response = await fetch(`${process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000'}/api/subscriptions/create-checkout`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    planId,
                    successUrl: `${window.location.origin}/planner?success=true`,
                    cancelUrl: `${window.location.origin}/planner?canceled=true`
                })
            })

            const result = await response.json()

            if (result.success) {
                return {
                    success: true,
                    url: result.data.url
                }
            } else {
                return {
                    success: false,
                    error: result.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è checkout —Å–µ—Å—Å–∏–∏'
                }
            }
        } catch (err: any) {
            return {
                success: false,
                error: err.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è checkout —Å–µ—Å—Å–∏–∏'
            }
        }
    }

    // –°–æ–∑–¥–∞–µ–º portal —Å–µ—Å—Å–∏—é
    const createPortalSession = async () => {
        try {
            setError(null)

            const response = await fetch(`${process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000'}/api/subscriptions/portal`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    returnUrl: window.location.href
                })
            })

            const result = await response.json()

            if (result.success) {
                return {
                    success: true,
                    url: result.data.url
                }
            } else {
                return {
                    success: false,
                    error: result.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è portal —Å–µ—Å—Å–∏–∏'
                }
            }
        } catch (err: any) {
            return {
                success: false,
                error: err.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è portal —Å–µ—Å—Å–∏–∏'
            }
        }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    const refreshSubscription = async () => {
        await loadSubscription()
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    useEffect(() => {
        if (user) {
            loadSubscription()
        } else {
            // –û—á–∏—â–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            setSubscription(null)
            setPlan(null)
            setError(null)
            setIsLoading(false)
        }
    }, [user])

    return {
        subscription,
        plan,
        isLoading,
        error,
        createCheckoutSession,
        createPortalSession,
        refreshSubscription
    }
}
