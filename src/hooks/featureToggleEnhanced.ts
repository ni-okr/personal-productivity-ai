/**
 * üéõÔ∏è Enhanced Feature Toggles System –¥–ª—è Trunk-based Development
 * 
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
 * - Hot toggles (runtime –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ)
 * - Cold toggles (build-time –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ)
 * - –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 * - Fallback –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
 * - TypeScript —Ç–∏–ø–∏–∑–∞—Ü–∏—è
 */

// –£—Å–ª–æ–≤–Ω—ã–π –∏–º–ø–æ—Ä—Ç Supabase –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ñ—É–Ω–∫—Ü–∏—è—Ö

// –¢–∏–ø—ã –¥–ª—è Feature Toggles
export type ToggleType = 'hot' | 'cold'
export type FeatureToggleName =
  | 'new-ai-features'
  | 'advanced-analytics'
  | 'pwa-features'
  | 'beta-features'
  | 'debug-mode'
  | 'experimental-ui'
  | 'performance-monitoring'
  | 'security-audit'

export interface FeatureToggle {
  id: string
  name: FeatureToggleName
  enabled: boolean
  type: ToggleType
  description?: string
  createdAt: string
  updatedAt: string
}

export interface FeatureToggleConfig {
  [key: string]: boolean
}

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è Feature Toggles
export const FEATURE_TOGGLES = {
  // Hot toggles (–º–æ–∂–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å –≤ runtime)
  NEW_AI_FEATURES: 'new-ai-features' as const,
  ADVANCED_ANALYTICS: 'advanced-analytics' as const,
  PWA_FEATURES: 'pwa-features' as const,
  BETA_FEATURES: 'beta-features' as const,

  // Cold toggles (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ)
  DEBUG_MODE: 'debug-mode' as const,
  EXPERIMENTAL_UI: 'experimental-ui' as const,
  PERFORMANCE_MONITORING: 'performance-monitoring' as const,
  SECURITY_AUDIT: 'security-audit' as const,
} as const

// Fallback –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
const FALLBACK_TOGGLES: Record<FeatureToggleName, boolean> = {
  'new-ai-features': false,
  'advanced-analytics': false,
  'pwa-features': false,
  'beta-features': false,
  'debug-mode': false,
  'experimental-ui': false,
  'performance-monitoring': false,
  'security-audit': false,
}

// –ö–µ—à –¥–ª—è hot toggles
class FeatureToggleCache {
  private cache = new Map<FeatureToggleName, boolean>()
  private cacheExpiry = new Map<FeatureToggleName, number>()
  private readonly CACHE_TTL = 5 * 60 * 1000 // 5 –º–∏–Ω—É—Ç

  set(toggleName: FeatureToggleName, enabled: boolean): void {
    this.cache.set(toggleName, enabled)
    this.cacheExpiry.set(toggleName, Date.now() + this.CACHE_TTL)
  }

  get(toggleName: FeatureToggleName): boolean | null {
    const expiry = this.cacheExpiry.get(toggleName)
    if (expiry && Date.now() < expiry) {
      return this.cache.get(toggleName) ?? null
    }
    return null
  }

  clear(toggleName?: FeatureToggleName): void {
    if (toggleName) {
      this.cache.delete(toggleName)
      this.cacheExpiry.delete(toggleName)
    } else {
      this.cache.clear()
      this.cacheExpiry.clear()
    }
  }

  isCached(toggleName: FeatureToggleName): boolean {
    const expiry = this.cacheExpiry.get(toggleName)
    return !!(expiry && Date.now() < expiry)
  }
}

// –ú–µ–Ω–µ–¥–∂–µ—Ä Feature Toggles
class FeatureToggleManager {
  private cache = new FeatureToggleCache()

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å toggle
   */
  async getToggle(toggleName: FeatureToggleName): Promise<boolean> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à –¥–ª—è hot toggles
      const cached = this.cache.get(toggleName)
      if (cached !== null) {
        return cached
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase
      if (!process.env.NEXT_PUBLIC_SUPABASE_URL || !process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY) {
        console.log('‚ö†Ô∏è –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É')
        return false
      }

      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Supabase —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
      const { getSupabaseClient } = await import('@/lib/supabase')
      const supabase = getSupabaseClient()
      const { data, error } = await supabase
        .from('feature_toggles')
        .select('enabled, type')
        .eq('name', toggleName)
        .single()

      if (error) {
        console.warn(`Feature toggle ${toggleName} not found, using fallback`)
        return FALLBACK_TOGGLES[toggleName]
      }

      const enabled = (data as any)?.enabled || false

      // –ö–µ—à–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ hot toggles
      if ((data as any)?.type === 'hot') {
        this.cache.set(toggleName, enabled)
      }

      return enabled
    } catch (error) {
      console.error(`Error in getToggle for ${toggleName}:`, error)
      return FALLBACK_TOGGLES[toggleName]
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ toggles
   */
  async getAllToggles(): Promise<FeatureToggleConfig> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase
      if (!process.env.NEXT_PUBLIC_SUPABASE_URL || !process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY) {
        console.log('‚ö†Ô∏è –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É')
        return {}
      }

      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Supabase —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
      const { getSupabaseClient } = await import('@/lib/supabase')
      const supabase = getSupabaseClient()
      const { data, error } = await supabase
        .from('feature_toggles')
        .select('name, enabled, type')

      if (error) {
        console.error('Error fetching all feature toggles:', error)
        return FALLBACK_TOGGLES
      }

      const config: FeatureToggleConfig = {}
      if (data && Array.isArray(data)) {
        data.forEach((toggle: any) => {
          config[toggle.name] = toggle.enabled
          // –ö–µ—à–∏—Ä—É–µ–º hot toggles
          if (toggle.type === 'hot') {
            this.cache.set(toggle.name as FeatureToggleName, toggle.enabled)
          }
        })
      }

      return config
    } catch (error) {
      console.error('Error in getAllToggles:', error)
      return FALLBACK_TOGGLES
    }
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å hot toggle (—Ç–æ–ª—å–∫–æ –¥–ª—è hot toggles)
   */
  async updateToggle(toggleName: FeatureToggleName, enabled: boolean): Promise<boolean> {
    try {
      // –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ build
      console.log(`Update toggle ${toggleName} to ${enabled}`)

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
      this.cache.set(toggleName, enabled)
      return true
    } catch (error) {
      console.error(`Error in updateToggle for ${toggleName}:`, error)
      return false
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π toggle
   */
  async createToggle(
    name: FeatureToggleName,
    enabled: boolean = false,
    type: ToggleType = 'hot',
    description?: string
  ): Promise<boolean> {
    try {
      // –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ build
      console.log(`Create toggle ${name} with enabled=${enabled}, type=${type}`)
      return true
    } catch (error) {
      console.error(`Error in createToggle for ${name}:`, error)
      return false
    }
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à
   */
  clearCache(toggleName?: FeatureToggleName): void {
    this.cache.clear(toggleName)
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ toggle hot
   */
  async isHotToggle(toggleName: FeatureToggleName): Promise<boolean> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase
      if (!process.env.NEXT_PUBLIC_SUPABASE_URL || !process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY) {
        console.log('‚ö†Ô∏è –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É')
        return false
      }

      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Supabase —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
      const { getSupabaseClient } = await import('@/lib/supabase')
      const supabase = getSupabaseClient()
      const { data, error } = await supabase
        .from('feature_toggles')
        .select('type')
        .eq('name', toggleName)
        .single()

      if (error) return false
      return (data as any)?.type === 'hot'
    } catch (error) {
      console.error(`Error checking toggle type for ${toggleName}:`, error)
      return false
    }
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
export const featureToggleManager = new FeatureToggleManager()

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
export const getFeatureToggle = (name: FeatureToggleName) => featureToggleManager.getToggle(name)
export const getAllFeatureToggles = () => featureToggleManager.getAllToggles()
export const updateFeatureToggle = (name: FeatureToggleName, enabled: boolean) =>
  featureToggleManager.updateToggle(name, enabled)
export const createFeatureToggle = (
  name: FeatureToggleName,
  enabled: boolean = false,
  type: ToggleType = 'hot',
  description?: string
) => featureToggleManager.createToggle(name, enabled, type, description)
export const clearFeatureToggleCache = (name?: FeatureToggleName) =>
  featureToggleManager.clearCache(name)
export const isHotToggle = (name: FeatureToggleName) =>
  featureToggleManager.isHotToggle(name)

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å toggles
export const isToggleEnabled = async (name: FeatureToggleName): Promise<boolean> => {
  return await getFeatureToggle(name)
}

export const isToggleDisabled = async (name: FeatureToggleName): Promise<boolean> => {
  return !(await getFeatureToggle(name))
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö hot toggles
export const getHotToggles = async (): Promise<FeatureToggleConfig> => {
  const allToggles = await getAllFeatureToggles()
  const hotToggles: FeatureToggleConfig = {}

  for (const [name, enabled] of Object.entries(allToggles)) {
    if (await isHotToggle(name as FeatureToggleName)) {
      hotToggles[name] = enabled
    }
  }

  return hotToggles
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö cold toggles
export const getColdToggles = async (): Promise<FeatureToggleConfig> => {
  const allToggles = await getAllFeatureToggles()
  const coldToggles: FeatureToggleConfig = {}

  for (const [name, enabled] of Object.entries(allToggles)) {
    if (!(await isHotToggle(name as FeatureToggleName))) {
      coldToggles[name] = enabled
    }
  }

  return coldToggles
}
