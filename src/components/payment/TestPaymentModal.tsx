// üß™ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π –¢–∏–Ω—å–∫–æ—Ñ—Ñ

'use client'

import { useState } from 'react'
import { Button } from '@/components/ui/Button'

interface TestPaymentModalProps {
  isOpen: boolean
  onClose: () => void
  planId: string
  planName: string
  amount: number
}

export function TestPaymentModal({ isOpen, onClose, planId, planName, amount }: TestPaymentModalProps) {
  const [isLoading, setIsLoading] = useState(false)
  const [paymentData, setPaymentData] = useState<any>(null)
  const [error, setError] = useState<string | null>(null)

  if (!isOpen) return null

  const handleTestPayment = async () => {
    setIsLoading(true)
    setError(null)

    try {
      const response = await fetch('/api/tinkoff/test-payment', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          amount: amount,
          description: `–¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ ${planName}`,
          planId: planId
        })
      })

      const data = await response.json()

      if (!data.success) {
        throw new Error(data.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞')
      }

      setPaymentData(data.data)
    } catch (err: any) {
      setError(err.message)
    } finally {
      setIsLoading(false)
    }
  }

  const handleOpenPayment = () => {
    if (paymentData?.paymentUrl) {
      window.open(paymentData.paymentUrl, '_blank')
    }
  }

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg p-6 max-w-md w-full mx-4">
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-xl font-bold">üß™ –¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂</h2>
          <button
            onClick={onClose}
            className="text-gray-500 hover:text-gray-700"
          >
            ‚úï
          </button>
        </div>

        <div className="space-y-4">
          <div className="bg-blue-50 p-4 rounded-lg">
            <h3 className="font-semibold text-blue-900 mb-2">–ü–ª–∞–Ω: {planName}</h3>
            <p className="text-blue-800">–°—É–º–º–∞: {amount} ‚ÇΩ</p>
          </div>

          {!paymentData ? (
            <div className="space-y-4">
              <div className="bg-yellow-50 p-4 rounded-lg">
                <h4 className="font-semibold text-yellow-900 mb-2">–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</h4>
                <ol className="text-sm text-yellow-800 space-y-1">
                  <li>1. –ù–∞–∂–º–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂"</li>
                  <li>2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã</li>
                  <li>3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—É—é –∫–∞—Ä—Ç—É: <code className="bg-yellow-200 px-1 rounded">4300 0000 0000 0777</code></li>
                  <li>4. –°—Ä–æ–∫: 12/30, CVV: 111</li>
                  <li>5. –û–∂–∏–¥–∞–π—Ç–µ —Å—Ç–∞—Ç—É—Å "–û–ø–ª–∞—á–µ–Ω–æ"</li>
                </ol>
              </div>

              {error && (
                <div className="bg-red-50 p-4 rounded-lg">
                  <p className="text-red-800 text-sm">{error}</p>
                </div>
              )}

              <Button
                onClick={handleTestPayment}
                disabled={isLoading}
                className="w-full"
                variant="primary"
              >
                {isLoading ? '–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞...' : '–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂'}
              </Button>
            </div>
          ) : (
            <div className="space-y-4">
              <div className="bg-green-50 p-4 rounded-lg">
                <h4 className="font-semibold text-green-900 mb-2">‚úÖ –ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω!</h4>
                <p className="text-green-800 text-sm">
                  ID –ø–ª–∞—Ç–µ–∂–∞: {paymentData.paymentId}
                </p>
              </div>

              <div className="bg-gray-50 p-4 rounded-lg">
                <h4 className="font-semibold text-gray-900 mb-2">–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã:</h4>
                <div className="space-y-2 text-sm">
                  <div>
                    <span className="font-medium">–ù–æ–º–µ—Ä:</span> 
                    <code className="bg-gray-200 px-2 py-1 rounded ml-2">
                      {paymentData.testCardData.number}
                    </code>
                  </div>
                  <div>
                    <span className="font-medium">–°—Ä–æ–∫:</span> 
                    <code className="bg-gray-200 px-2 py-1 rounded ml-2">
                      {paymentData.testCardData.expiry}
                    </code>
                  </div>
                  <div>
                    <span className="font-medium">CVV:</span> 
                    <code className="bg-gray-200 px-2 py-1 rounded ml-2">
                      {paymentData.testCardData.cvv}
                    </code>
                  </div>
                </div>
              </div>

              <div className="flex space-x-2">
                <Button
                  onClick={handleOpenPayment}
                  className="flex-1"
                  variant="primary"
                >
                  –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ
                </Button>
                <Button
                  onClick={onClose}
                  className="flex-1"
                  variant="secondary"
                >
                  –ó–∞–∫—Ä—ã—Ç—å
                </Button>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  )
}
