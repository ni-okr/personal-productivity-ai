// üß™ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–π –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –¢–∏–Ω—å–∫–æ—Ñ—Ñ
'use client'

import { Button } from '@/components/ui/Button'
import { CreditCardIcon, ExternalLinkIcon, XIcon, AlertCircleIcon, CopyIcon, CheckIcon } from 'lucide-react'
import { useState } from 'react'

interface TestPaymentModalProps {
    isOpen: boolean
    onClose: () => void
    onSuccess: () => void
    amount: number
    description: string
    planId: string
}

export function TestPaymentModal({
    isOpen,
    onClose,
    onSuccess,
    amount,
    description,
    planId
}: TestPaymentModalProps) {
    const [isProcessing, setIsProcessing] = useState(false)
    const [paymentData, setPaymentData] = useState<any>(null)
    const [error, setError] = useState<string | null>(null)
    const [copiedField, setCopiedField] = useState<string | null>(null)

    const handleCreatePayment = async () => {
        setIsProcessing(true)
        setError(null)
        
        try {
            const response = await fetch('/api/tinkoff/test-payment', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    amount,
                    description,
                    planId
                })
            })
            
            const result = await response.json()
            
            if (result.success) {
                setPaymentData(result.data)
            } else {
                setError(result.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞')
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞:', error)
            setError('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞')
        } finally {
            setIsProcessing(false)
        }
    }

    const handleOpenPayment = () => {
        if (paymentData?.paymentUrl) {
            window.open(paymentData.paymentUrl, '_blank', 'width=800,height=600')
        }
    }

    const copyToClipboard = async (text: string, field: string) => {
        try {
            await navigator.clipboard.writeText(text)
            setCopiedField(field)
            setTimeout(() => setCopiedField(null), 2000)
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', error)
        }
    }

    const formatPrice = (price: number) => {
        return new Intl.NumberFormat('ru-RU', {
            style: 'currency',
            currency: 'RUB',
            minimumFractionDigits: 0
        }).format(price / 100)
    }

    if (!isOpen) return null

    return (
        <div className="fixed inset-0 z-50 flex items-center justify-center p-4">
            {/* Overlay */}
            <div
                className="absolute inset-0 bg-black/50 backdrop-blur-sm"
                onClick={onClose}
            />

            {/* Modal */}
            <div className="relative bg-white rounded-2xl shadow-2xl max-w-md w-full">
                {/* Header */}
                <div className="flex items-center justify-between p-6 border-b border-gray-200">
                    <div className="flex items-center gap-3">
                        <div className="w-10 h-10 bg-yellow-100 rounded-full flex items-center justify-center">
                            <CreditCardIcon className="w-5 h-5 text-yellow-600" />
                        </div>
                        <div>
                            <h2 className="text-xl font-bold text-gray-900">
                                –¢–µ—Å—Ç–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞
                            </h2>
                            <p className="text-sm text-gray-600">
                                {description}
                            </p>
                        </div>
                    </div>
                    <Button
                        onClick={onClose}
                        variant="ghost"
                        size="sm"
                        className="text-gray-400 hover:text-gray-600"
                    >
                        <XIcon className="w-5 h-5" />
                    </Button>
                </div>

                {/* Content */}
                <div className="p-6">
                    {/* –°—É–º–º–∞ */}
                    <div className="text-center mb-6">
                        <div className="text-3xl font-bold text-gray-900">
                            {formatPrice(amount)}
                        </div>
                        <div className="text-sm text-gray-600 mt-1">
                            –¢–µ—Å—Ç–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –¢–∏–Ω—å–∫–æ—Ñ—Ñ
                        </div>
                    </div>

                    {/* –û—à–∏–±–∫–∞ */}
                    {error && (
                        <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-6">
                            <div className="flex items-center gap-2">
                                <AlertCircleIcon className="w-5 h-5 text-red-600" />
                                <span className="text-sm text-red-800">{error}</span>
                            </div>
                        </div>
                    )}

                    {/* –î–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞ */}
                    {paymentData && (
                        <div className="bg-green-50 border border-green-200 rounded-lg p-4 mb-6">
                            <h4 className="text-sm font-semibold text-green-800 mb-2">
                                –¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!
                            </h4>
                            <div className="text-sm text-green-700 space-y-1">
                                <div>ID –ø–ª–∞—Ç–µ–∂–∞: {paymentData.paymentId}</div>
                                <div>–ó–∞–∫–∞–∑: {paymentData.orderId}</div>
                            </div>
                        </div>
                    )}

                    {/* –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã */}
                    {paymentData?.testCardData && (
                        <div className="space-y-4 mb-6">
                            <h3 className="text-lg font-semibold text-gray-900">
                                –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã
                            </h3>
                            <p className="text-sm text-gray-600">
                                –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
                            </p>

                            {/* –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã */}
                            <div className="space-y-2">
                                <label className="text-sm font-medium text-gray-700">
                                    –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã
                                </label>
                                <div className="flex items-center gap-2">
                                    <input
                                        type="text"
                                        value={paymentData.testCardData.number}
                                        readOnly
                                        className="flex-1 px-3 py-2 border border-gray-300 rounded-lg bg-gray-50 text-gray-900 font-mono"
                                    />
                                    <Button
                                        onClick={() => copyToClipboard(paymentData.testCardData.number, 'number')}
                                        variant="ghost"
                                        size="sm"
                                        className="text-gray-400 hover:text-gray-600"
                                    >
                                        {copiedField === 'number' ? (
                                            <CheckIcon className="w-4 h-4 text-green-600" />
                                        ) : (
                                            <CopyIcon className="w-4 h-4" />
                                        )}
                                    </Button>
                                </div>
                            </div>

                            {/* –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∏ CVV */}
                            <div className="grid grid-cols-2 gap-4">
                                <div className="space-y-2">
                                    <label className="text-sm font-medium text-gray-700">
                                        –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
                                    </label>
                                    <div className="flex items-center gap-2">
                                        <input
                                            type="text"
                                            value={paymentData.testCardData.expiry}
                                            readOnly
                                            className="flex-1 px-3 py-2 border border-gray-300 rounded-lg bg-gray-50 text-gray-900 font-mono"
                                        />
                                        <Button
                                            onClick={() => copyToClipboard(paymentData.testCardData.expiry, 'expiry')}
                                            variant="ghost"
                                            size="sm"
                                            className="text-gray-400 hover:text-gray-600"
                                        >
                                            {copiedField === 'expiry' ? (
                                                <CheckIcon className="w-4 h-4 text-green-600" />
                                            ) : (
                                                <CopyIcon className="w-4 h-4" />
                                            )}
                                        </Button>
                                    </div>
                                </div>

                                <div className="space-y-2">
                                    <label className="text-sm font-medium text-gray-700">
                                        CVV
                                    </label>
                                    <div className="flex items-center gap-2">
                                        <input
                                            type="text"
                                            value={paymentData.testCardData.cvv}
                                            readOnly
                                            className="flex-1 px-3 py-2 border border-gray-300 rounded-lg bg-gray-50 text-gray-900 font-mono"
                                        />
                                        <Button
                                            onClick={() => copyToClipboard(paymentData.testCardData.cvv, 'cvv')}
                                            variant="ghost"
                                            size="sm"
                                            className="text-gray-400 hover:text-gray-600"
                                        >
                                            {copiedField === 'cvv' ? (
                                                <CheckIcon className="w-4 h-4 text-green-600" />
                                            ) : (
                                                <CopyIcon className="w-4 h-4" />
                                            )}
                                        </Button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    )}

                    {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ */}
                    <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-6">
                        <h4 className="text-sm font-semibold text-yellow-800 mb-2">
                            –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:
                        </h4>
                        <ol className="text-sm text-yellow-700 space-y-1">
                            <li>1. –ù–∞–∂–º–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂"</li>
                            <li>2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–∞—Ä—Ç—ã</li>
                            <li>3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã</li>
                            <li>4. –í—Å—Ç–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º—É –æ–ø–ª–∞—Ç—ã</li>
                            <li>5. –û–∂–∏–¥–∞–π—Ç–µ —Å—Ç–∞—Ç—É—Å "–û–ø–ª–∞—á–µ–Ω–æ"</li>
                        </ol>
                    </div>

                    {/* –ö–Ω–æ–ø–∫–∏ */}
                    <div className="flex gap-3">
                        <Button
                            onClick={onClose}
                            variant="outline"
                            className="flex-1"
                        >
                            –û—Ç–º–µ–Ω–∞
                        </Button>
                        
                        {!paymentData ? (
                            <Button
                                onClick={handleCreatePayment}
                                disabled={isProcessing}
                                className="flex-1 bg-yellow-600 hover:bg-yellow-700"
                            >
                                {isProcessing ? (
                                    <>
                                        <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2" />
                                        –°–æ–∑–¥–∞–Ω–∏–µ...
                                    </>
                                ) : (
                                    '–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂'
                                )}
                            </Button>
                        ) : (
                            <Button
                                onClick={handleOpenPayment}
                                className="flex-1 bg-yellow-600 hover:bg-yellow-700"
                            >
                                <ExternalLinkIcon className="w-4 h-4 mr-2" />
                                –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ
                            </Button>
                        )}
                    </div>
                </div>
            </div>
        </div>
    )
}