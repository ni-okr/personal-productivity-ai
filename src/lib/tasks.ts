// üìã API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏ –≤ Supabase
import { Task, TaskPriority, TaskStatus } from '@/types'
import { supabase } from './supabase'

export interface CreateTaskData {
    title: string
    description?: string
    priority: TaskPriority
    dueDate?: Date
    estimatedMinutes?: number
    tags?: string[]
}

export interface UpdateTaskData {
    title?: string
    description?: string
    priority?: TaskPriority
    status?: TaskStatus
    dueDate?: Date
    completedAt?: Date
    estimatedMinutes?: number
    actualMinutes?: number
    tags?: string[]
}

export interface TasksResponse {
    success: boolean
    tasks?: Task[]
    task?: Task
    error?: string
    message?: string
}

/**
 * üìù –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export async function getTasks(userId: string): Promise<TasksResponse> {
    try {
        const { data, error } = await supabase
            .from('tasks')
            .select('*')
            .eq('user_id', userId)
            .order('created_at', { ascending: false })

        if (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á:', error)
            return {
                success: false,
                error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞—á–∏'
            }
        }

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Supabase –≤ —Ñ–æ—Ä–º–∞—Ç Task
        const tasks: Task[] = data.map(task => ({
            id: task.id,
            title: task.title,
            description: task.description || '',
            priority: task.priority,
            status: task.status,
            dueDate: task.due_date ? new Date(task.due_date) : undefined,
            completedAt: task.completed_at ? new Date(task.completed_at) : undefined,
            estimatedMinutes: task.estimated_duration,
            actualMinutes: task.actual_duration,
            source: task.source || 'manual',
            tags: task.tags || [],
            userId: task.user_id,
            createdAt: new Date(task.created_at),
            updatedAt: new Date(task.updated_at)
        }))

        return {
            success: true,
            tasks
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á:', error)
        return {
            success: false,
            error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á'
        }
    }
}

/**
 * ‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
 */
export async function createTask(userId: string, taskData: CreateTaskData): Promise<TasksResponse> {
    try {
        const { data, error } = await supabase
            .from('tasks')
            .insert({
                user_id: userId,
                title: taskData.title,
                description: taskData.description || '',
                priority: taskData.priority,
                status: 'todo',
                due_date: taskData.dueDate?.toISOString(),
                estimated_duration: taskData.estimatedMinutes,
                tags: taskData.tags || [],
                created_at: new Date().toISOString(),
                updated_at: new Date().toISOString()
            })
            .select()
            .single()

        if (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏:', error)
            return {
                success: false,
                error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É'
            }
        }

        const task: Task = {
            id: data.id,
            title: data.title,
            description: data.description || '',
            priority: data.priority,
            status: data.status,
            dueDate: data.due_date ? new Date(data.due_date) : undefined,
            completedAt: data.completed_at ? new Date(data.completed_at) : undefined,
            estimatedMinutes: data.estimated_duration,
            actualMinutes: data.actual_duration,
            source: data.source || 'manual',
            tags: data.tags || [],
            userId: data.user_id,
            createdAt: new Date(data.created_at),
            updatedAt: new Date(data.updated_at)
        }

        return {
            success: true,
            task,
            message: '–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞'
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏:', error)
        return {
            success: false,
            error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏'
        }
    }
}

/**
 * ‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
 */
export async function updateTask(taskId: string, updates: UpdateTaskData): Promise<TasksResponse> {
    try {
        const updateData: any = {
            ...updates,
            updated_at: new Date().toISOString()
        }

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã –≤ ISO —Å—Ç—Ä–æ–∫–∏
        if (updates.dueDate) {
            updateData.due_date = updates.dueDate.toISOString()
        }
        if (updates.completedAt) {
            updateData.completed_at = updates.completedAt.toISOString()
        }

        const { data, error } = await supabase
            .from('tasks')
            .update(updateData)
            .eq('id', taskId)
            .select()
            .single()

        if (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:', error)
            return {
                success: false,
                error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É'
            }
        }

        const task: Task = {
            id: data.id,
            title: data.title,
            description: data.description || '',
            priority: data.priority,
            status: data.status,
            dueDate: data.due_date ? new Date(data.due_date) : undefined,
            completedAt: data.completed_at ? new Date(data.completed_at) : undefined,
            estimatedMinutes: data.estimated_duration,
            actualMinutes: data.actual_duration,
            source: data.source || 'manual',
            tags: data.tags || [],
            userId: data.user_id,
            createdAt: new Date(data.created_at),
            updatedAt: new Date(data.updated_at)
        }

        return {
            success: true,
            task,
            message: '–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞'
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:', error)
        return {
            success: false,
            error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏'
        }
    }
}

/**
 * üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
 */
export async function deleteTask(taskId: string): Promise<TasksResponse> {
    try {
        const { error } = await supabase
            .from('tasks')
            .delete()
            .eq('id', taskId)

        if (error) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:', error)
            return {
                success: false,
                error: '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É'
            }
        }

        return {
            success: true,
            message: '–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞'
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:', error)
        return {
            success: false,
            error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏'
        }
    }
}

/**
 * ‚úÖ –û—Ç–º–µ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π
 */
export async function completeTask(taskId: string, actualMinutes?: number): Promise<TasksResponse> {
    try {
        const updateData: any = {
            status: 'completed',
            completed_at: new Date().toISOString(),
            updated_at: new Date().toISOString()
        }

        if (actualMinutes !== undefined) {
            updateData.actual_duration = actualMinutes
        }

        const { data, error } = await supabase
            .from('tasks')
            .update(updateData)
            .eq('id', taskId)
            .select()
            .single()

        if (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:', error)
            return {
                success: false,
                error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É'
            }
        }

        const task: Task = {
            id: data.id,
            title: data.title,
            description: data.description || '',
            priority: data.priority,
            status: data.status,
            dueDate: data.due_date ? new Date(data.due_date) : undefined,
            completedAt: data.completed_at ? new Date(data.completed_at) : undefined,
            estimatedMinutes: data.estimated_duration,
            actualMinutes: data.actual_duration,
            source: data.source || 'manual',
            tags: data.tags || [],
            userId: data.user_id,
            createdAt: new Date(data.created_at),
            updatedAt: new Date(data.updated_at)
        }

        return {
            success: true,
            task,
            message: '–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:', error)
        return {
            success: false,
            error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏'
        }
    }
}

/**
 * üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–¥–∞—á
 */
export async function getTasksStats(userId: string): Promise<{
    success: boolean
    stats?: {
        total: number
        completed: number
        pending: number
        overdue: number
        completionRate: number
    }
    error?: string
}> {
    try {
        const { data, error } = await supabase
            .from('tasks')
            .select('status, due_date, completed_at')
            .eq('user_id', userId)

        if (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error)
            return {
                success: false,
                error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É'
            }
        }

        const now = new Date()
        const total = data.length
        const completed = data.filter(task => task.status === 'completed').length
        const pending = data.filter(task => task.status === 'todo' || task.status === 'in_progress').length
        const overdue = data.filter(task => {
            if (task.status === 'completed') return false
            if (!task.due_date) return false
            return new Date(task.due_date) < now
        }).length

        const completionRate = total > 0 ? Math.round((completed / total) * 100) : 0

        return {
            success: true,
            stats: {
                total,
                completed,
                pending,
                overdue,
                completionRate
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error)
        return {
            success: false,
            error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'
        }
    }
}

/**
 * üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á —Å –ª–æ–∫–∞–ª—å–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
 */
export async function syncTasks(userId: string): Promise<TasksResponse> {
    try {
        const result = await getTasks(userId)

        if (!result.success) {
            return result
        }

        return {
            success: true,
            tasks: result.tasks,
            message: '–ó–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã'
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞—á:', error)
        return {
            success: false,
            error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞—á'
        }
    }
}
