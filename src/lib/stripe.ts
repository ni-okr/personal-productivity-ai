// üí≥ Stripe –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
import { SubscriptionTier } from '@/types'
import Stripe from 'stripe'

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Stripe
const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {
    apiVersion: '2024-06-20',
    typescript: true
})

export interface CreateCheckoutSessionData {
    userId: string
    planId: string
    successUrl: string
    cancelUrl: string
    trialDays?: number
}

export interface CreateCustomerPortalData {
    userId: string
    returnUrl: string
}

export interface StripeResponse {
    success: boolean
    data?: any
    error?: string
    message?: string
}

/**
 * üõí –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã
 */
export async function createCheckoutSession(data: CreateCheckoutSessionData): Promise<StripeResponse> {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏
        const plan = getStripePriceId(data.planId)
        if (!plan) {
            return {
                success: false,
                error: '–ü–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω'
            }
        }

        const session = await stripe.checkout.sessions.create({
            customer_email: undefined, // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            line_items: [
                {
                    price: plan.stripePriceId,
                    quantity: 1,
                },
            ],
            mode: 'subscription',
            success_url: data.successUrl,
            cancel_url: data.cancelUrl,
            subscription_data: {
                trial_period_days: data.trialDays || 0,
                metadata: {
                    userId: data.userId,
                    planId: data.planId
                }
            },
            metadata: {
                userId: data.userId,
                planId: data.planId
            }
        })

        return {
            success: true,
            data: {
                sessionId: session.id,
                url: session.url
            },
            message: '–°–µ—Å—Å–∏—è –æ–ø–ª–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∞'
        }
    } catch (error: any) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ Stripe:', error)
        return {
            success: false,
            error: error.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ –æ–ø–ª–∞—Ç—ã'
        }
    }
}

/**
 * üë§ –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ Stripe
 */
export async function createCustomer(userId: string, email: string, name: string): Promise<StripeResponse> {
    try {
        const customer = await stripe.customers.create({
            email,
            name,
            metadata: {
                userId
            }
        })

        return {
            success: true,
            data: {
                customerId: customer.id
            },
            message: '–ö–ª–∏–µ–Ω—Ç Stripe —Å–æ–∑–¥–∞–Ω'
        }
    } catch (error: any) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Stripe:', error)
        return {
            success: false,
            error: error.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞'
        }
    }
}

/**
 * üîó –°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ—Ä—Ç–∞–ª –∫–ª–∏–µ–Ω—Ç–∞
 */
export async function createCustomerPortalSession(data: CreateCustomerPortalData): Promise<StripeResponse> {
    try {
        // –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å customerId –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        return {
            success: false,
            error: '–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ'
        }
    } catch (error: any) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Ä—Ç–∞–ª–∞ –∫–ª–∏–µ–Ω—Ç–∞:', error)
        return {
            success: false,
            error: error.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Ä—Ç–∞–ª–∞ –∫–ª–∏–µ–Ω—Ç–∞'
        }
    }
}

/**
 * üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ Stripe
 */
export async function getStripeSubscription(subscriptionId: string): Promise<StripeResponse> {
    try {
        const subscription = await stripe.subscriptions.retrieve(subscriptionId)

        return {
            success: true,
            data: {
                id: subscription.id,
                status: subscription.status,
                currentPeriodStart: new Date(subscription.current_period_start * 1000),
                currentPeriodEnd: new Date(subscription.current_period_end * 1000),
                cancelAtPeriodEnd: subscription.cancel_at_period_end,
                trialEnd: subscription.trial_end ? new Date(subscription.trial_end * 1000) : null
            },
            message: '–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ –∏–∑ Stripe'
        }
    } catch (error: any) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ Stripe:', error)
        return {
            success: false,
            error: error.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏'
        }
    }
}

/**
 * ‚ùå –û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ Stripe
 */
export async function cancelStripeSubscription(subscriptionId: string): Promise<StripeResponse> {
    try {
        const subscription = await stripe.subscriptions.update(subscriptionId, {
            cancel_at_period_end: true
        })

        return {
            success: true,
            data: {
                id: subscription.id,
                cancelAtPeriodEnd: subscription.cancel_at_period_end
            },
            message: '–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –≤ Stripe'
        }
    } catch (error: any) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏ –≤ Stripe:', error)
        return {
            success: false,
            error: error.message || '–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏'
        }
    }
}

/**
 * üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ Stripe
 */
export async function resumeStripeSubscription(subscriptionId: string): Promise<StripeResponse> {
    try {
        const subscription = await stripe.subscriptions.update(subscriptionId, {
            cancel_at_period_end: false
        })

        return {
            success: true,
            data: {
                id: subscription.id,
                cancelAtPeriodEnd: subscription.cancel_at_period_end
            },
            message: '–ü–æ–¥–ø–∏—Å–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ Stripe'
        }
    } catch (error: any) {
        console.error('–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –≤ Stripe:', error)
        return {
            success: false,
            error: error.message || '–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏'
        }
    }
}

/**
 * üéØ –ü–æ–ª—É—á–µ–Ω–∏–µ price ID –¥–ª—è –ø–ª–∞–Ω–∞
 */
function getStripePriceId(planId: string): { stripePriceId: string; tier: SubscriptionTier } | null {
    const priceMap: Record<string, { stripePriceId: string; tier: SubscriptionTier }> = {
        'premium': {
            stripePriceId: process.env.STRIPE_PREMIUM_PRICE_ID || 'price_premium',
            tier: 'premium'
        },
        'pro': {
            stripePriceId: process.env.STRIPE_PRO_PRICE_ID || 'price_pro',
            tier: 'pro'
        },
        'enterprise': {
            stripePriceId: process.env.STRIPE_ENTERPRISE_PRICE_ID || 'price_enterprise',
            tier: 'enterprise'
        }
    }

    return priceMap[planId] || null
}

/**
 * üîê –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è webhook –ø–æ–¥–ø–∏—Å–∏
 */
export function verifyWebhookSignature(payload: string, signature: string): boolean {
    try {
        const webhookSecret = process.env.STRIPE_WEBHOOK_SECRET!
        stripe.webhooks.constructEvent(payload, signature, webhookSecret)
        return true
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ webhook:', error)
        return false
    }
}

/**
 * üì® –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook —Å–æ–±—ã—Ç–∏–π
 */
export async function handleWebhookEvent(event: Stripe.Event): Promise<StripeResponse> {
    try {
        switch (event.type) {
            case 'customer.subscription.created':
                return await handleSubscriptionCreated(event.data.object as Stripe.Subscription)

            case 'customer.subscription.updated':
                return await handleSubscriptionUpdated(event.data.object as Stripe.Subscription)

            case 'customer.subscription.deleted':
                return await handleSubscriptionDeleted(event.data.object as Stripe.Subscription)

            case 'invoice.payment_succeeded':
                return await handlePaymentSucceeded(event.data.object as Stripe.Invoice)

            case 'invoice.payment_failed':
                return await handlePaymentFailed(event.data.object as Stripe.Invoice)

            default:
                return {
                    success: true,
                    message: `–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ: ${event.type}`
                }
        }
    } catch (error: any) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:', error)
        return {
            success: false,
            error: error.message || '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook'
        }
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ webhook —Å–æ–±—ã—Ç–∏–π
async function handleSubscriptionCreated(subscription: Stripe.Subscription): Promise<StripeResponse> {
    // –õ–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    return {
        success: true,
        message: '–ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞'
    }
}

async function handleSubscriptionUpdated(subscription: Stripe.Subscription): Promise<StripeResponse> {
    // –õ–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    return {
        success: true,
        message: '–ü–æ–¥–ø–∏—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞'
    }
}

async function handleSubscriptionDeleted(subscription: Stripe.Subscription): Promise<StripeResponse> {
    // –õ–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    return {
        success: true,
        message: '–ü–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞'
    }
}

async function handlePaymentSucceeded(invoice: Stripe.Invoice): Promise<StripeResponse> {
    // –õ–æ–≥–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
    return {
        success: true,
        message: '–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ'
    }
}

async function handlePaymentFailed(invoice: Stripe.Invoice): Promise<StripeResponse> {
    // –õ–æ–≥–∏–∫–∞ –Ω–µ—É–¥–∞—á–Ω–æ–π –æ–ø–ª–∞—Ç—ã
    return {
        success: true,
        message: '–û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞'
    }
}

export { stripe }
