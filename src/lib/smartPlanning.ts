// üß† –£–º–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–ü—Å–µ–≤–¥–æ-–ò–ò)
import { Task, TaskPriority, UserPreferences } from '@/types'

export interface TimeSlot {
    start: string // "09:00"
    end: string   // "10:30"
    duration: number // minutes
    type: 'focus' | 'break' | 'meeting' | 'flexible'
    energyRequired: 'low' | 'medium' | 'high'
}

export interface SmartSchedule {
    date: Date
    slots: ScheduledTask[]
    productivity_score: number
    recommendations: string[]
}

export interface ScheduledTask extends Task {
    scheduledStart?: Date
    scheduledEnd?: Date
    timeSlot?: TimeSlot
    aiReason?: string
}

export interface ProductivityPattern {
    hour: number
    energyLevel: 'low' | 'medium' | 'high'
    focusCapacity: number // 0-100
    taskTypes: TaskPriority[]
}

// –ü–∞—Ç—Ç–µ—Ä–Ω—ã –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
export const DEFAULT_PRODUCTIVITY_PATTERNS: ProductivityPattern[] = [
    { hour: 9, energyLevel: 'high', focusCapacity: 90, taskTypes: ['urgent', 'high'] },
    { hour: 10, energyLevel: 'high', focusCapacity: 95, taskTypes: ['urgent', 'high'] },
    { hour: 11, energyLevel: 'high', focusCapacity: 85, taskTypes: ['high', 'medium'] },
    { hour: 12, energyLevel: 'medium', focusCapacity: 60, taskTypes: ['medium', 'low'] },
    { hour: 13, energyLevel: 'low', focusCapacity: 40, taskTypes: ['low'] }, // –æ–±–µ–¥
    { hour: 14, energyLevel: 'medium', focusCapacity: 70, taskTypes: ['medium'] },
    { hour: 15, energyLevel: 'medium', focusCapacity: 80, taskTypes: ['medium', 'high'] },
    { hour: 16, energyLevel: 'medium', focusCapacity: 75, taskTypes: ['medium'] },
    { hour: 17, energyLevel: 'low', focusCapacity: 50, taskTypes: ['low', 'medium'] },
]

/**
 * üéØ –£–º–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∑–∞–¥–∞—á –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
 */
export function smartTaskPrioritization(tasks: Task[]): Task[] {
    return tasks.sort((a, b) => {
        // 1. –°—Ä–æ—á–Ω–æ—Å—Ç—å (urgent > high > medium > low)
        const priorityWeight = { urgent: 4, high: 3, medium: 2, low: 1 }
        const priorityDiff = priorityWeight[b.priority] - priorityWeight[a.priority]
        if (priorityDiff !== 0) return priorityDiff

        // 2. –î–µ–¥–ª–∞–π–Ω (–±–ª–∏–∂–∞–π—à–∏–π –¥–µ–¥–ª–∞–π–Ω –ø–µ—Ä–≤—ã–π)
        if (a.dueDate && b.dueDate) {
            return new Date(a.dueDate).getTime() - new Date(b.dueDate).getTime()
        }
        if (a.dueDate && !b.dueDate) return -1
        if (!a.dueDate && b.dueDate) return 1

        // 3. –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–∫–æ—Ä–æ—Ç–∫–∏–µ –∑–∞–¥–∞—á–∏ –ø–µ—Ä–≤—ã–µ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –ø–æ–±–µ–¥)
        const aTime = a.estimatedMinutes || 30
        const bTime = b.estimatedMinutes || 30
        return aTime - bTime
    })
}

/**
 * ‚è∞ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞–¥–∞—á–∏
 */
export function findOptimalTimeSlot(
    task: Task,
    availableSlots: TimeSlot[],
    patterns: ProductivityPattern[] = DEFAULT_PRODUCTIVITY_PATTERNS
): TimeSlot | null {
    const taskDuration = task.estimatedMinutes || 30

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å–ª–æ—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    const suitableSlots = availableSlots.filter(slot => slot.duration >= taskDuration)

    if (suitableSlots.length === 0) return null

    // –û—Ü–µ–Ω–∏–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Å–ª–æ—Ç –ø–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—é –∑–∞–¥–∞—á–µ
    const scoredSlots = suitableSlots.map(slot => {
        const hour = parseInt(slot.start.split(':')[0])
        const pattern = patterns.find(p => p.hour === hour) || patterns[0]

        let score = 0

        // –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–º—É —É—Ä–æ–≤–Ω—é
        const taskEnergyRequirement = getTaskEnergyRequirement(task)
        if (pattern.energyLevel === taskEnergyRequirement) score += 30
        else if (Math.abs(getEnergyValue(pattern.energyLevel) - getEnergyValue(taskEnergyRequirement)) === 1) score += 15

        // –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–∏–ø—É –∑–∞–¥–∞—á–∏
        if (pattern.taskTypes.includes(task.priority)) score += 25

        // –§–æ–∫—É—Å–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
        score += pattern.focusCapacity * 0.2

        // –ë–æ–Ω—É—Å –∑–∞ —É—Ç—Ä–µ–Ω–Ω–∏–µ —á–∞—Å—ã –¥–ª—è –≤–∞–∂–Ω—ã—Ö –∑–∞–¥–∞—á
        if (task.priority === 'urgent' && hour >= 9 && hour <= 11) score += 20

        return { slot, score }
    })

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–æ—Ç —Å –Ω–∞–∏–≤—ã—Å—à–∏–º —Å—á–µ—Ç–æ–º
    scoredSlots.sort((a, b) => b.score - a.score)
    return scoredSlots[0]?.slot || null
}

/**
 * üìä –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
 */
export function analyzeProductivityAndSuggest(
    completedTasks: Task[],
    currentTime: Date = new Date()
): {
    score: number
    insights: string[]
    recommendations: string[]
} {
    const insights: string[] = []
    const recommendations: string[] = []
    let score = 0

    // –ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    const todayTasks = completedTasks.filter(task =>
        task.completedAt &&
        new Date(task.completedAt).toDateString() === currentTime.toDateString()
    )

    // –ë–∞–∑–æ–≤—ã–π —Å—á–µ—Ç –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á
    score += Math.min(todayTasks.length * 15, 60)

    if (todayTasks.length === 0) {
        insights.push("üìä –°–µ–≥–æ–¥–Ω—è –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏")
        recommendations.push("üéØ –ù–∞—á–Ω–∏—Ç–µ —Å —Å–∞–º–æ–π –ø—Ä–æ—Å—Ç–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–º–ø—É–ª—å—Å–∞")
    } else {
        insights.push(`‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ ${todayTasks.length} –∑–∞–¥–∞—á —Å–µ–≥–æ–¥–Ω—è`)
    }

    // –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
    const urgentCompleted = todayTasks.filter(t => t.priority === 'urgent').length
    const highCompleted = todayTasks.filter(t => t.priority === 'high').length

    if (urgentCompleted > 0) {
        score += 25
        insights.push(`üî• –û—Ç–ª–∏—á–Ω–æ! –í—ã–ø–æ–ª–Ω–µ–Ω–æ ${urgentCompleted} —Å—Ä–æ—á–Ω—ã—Ö –∑–∞–¥–∞—á`)
    }

    if (highCompleted > 0) {
        score += 15
        insights.push(`‚ö° –í—ã–ø–æ–ª–Ω–µ–Ω–æ ${highCompleted} –≤–∞–∂–Ω—ã—Ö –∑–∞–¥–∞—á`)
    }

    // –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏
    const currentHour = currentTime.getHours()
    const pattern = DEFAULT_PRODUCTIVITY_PATTERNS.find(p => p.hour === currentHour)

    if (pattern) {
        if (pattern.energyLevel === 'high') {
            recommendations.push("üöÄ –°–µ–π—á–∞—Å –ø–∏–∫ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ - –∏–¥–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á!")
        } else if (pattern.energyLevel === 'low') {
            recommendations.push("üò¥ –≠–Ω–µ—Ä–≥–∏—è –Ω–∞ –Ω–∏–∑–∫–æ–º —É—Ä–æ–≤–Ω–µ - –∑–∞–π–º–∏—Ç–µ—Å—å –ø—Ä–æ—Å—Ç—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏ –∏–ª–∏ —Å–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–µ—Ä—ã–≤")
        } else {
            recommendations.push("‚ö° –•–æ—Ä–æ—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–¥–∞—á —Å—Ä–µ–¥–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏")
        }
    }

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–Ω—è
    if (currentHour >= 9 && currentHour <= 11) {
        recommendations.push("üåÖ –£—Ç—Ä–µ–Ω–Ω–∏–µ —á–∞—Å—ã - –ª—É—á—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã")
    } else if (currentHour >= 14 && currentHour <= 16) {
        recommendations.push("‚òÄÔ∏è –ü–æ—Å–ª–µ–æ–±–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è - —Ö–æ—Ä–æ—à–æ –¥–ª—è –≤—Å—Ç—Ä–µ—á –∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏")
    } else if (currentHour >= 17) {
        recommendations.push("üåÜ –í–µ—á–µ—Ä - –≤—Ä–µ–º—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è")
    }

    // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç–∞ (0-100)
    score = Math.min(Math.max(score, 0), 100)

    return { score, insights, recommendations }
}

/**
 * üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –¥–µ–Ω—å
 */
export function createDailySchedule(
    tasks: Task[],
    preferences: Partial<UserPreferences> = {},
    date: Date = new Date()
): SmartSchedule {
    const workStart = preferences.workingHours?.start || "09:00"
    const workEnd = preferences.workingHours?.end || "18:00"
    const focusTime = preferences.focusTime || 90 // minutes
    const breakTime = preferences.breakTime || 15 // minutes

    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
    const timeSlots = generateTimeSlots(workStart, workEnd, focusTime, breakTime)

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    const prioritizedTasks = smartTaskPrioritization(
        tasks.filter(task => task.status === 'todo')
    )

    const scheduledTasks: ScheduledTask[] = []
    const availableSlots = [...timeSlots]

    // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–¥–∞—á–∏ –ø–æ —Å–ª–æ—Ç–∞–º
    for (const task of prioritizedTasks) {
        const optimalSlot = findOptimalTimeSlot(task, availableSlots)

        if (optimalSlot) {
            const scheduledTask: ScheduledTask = {
                ...task,
                scheduledStart: parseTimeToDate(optimalSlot.start, date),
                scheduledEnd: parseTimeToDate(optimalSlot.end, date),
                timeSlot: optimalSlot,
                aiReason: generateSchedulingReason(task, optimalSlot)
            }

            scheduledTasks.push(scheduledTask)

            // –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ—Ç
            const slotIndex = availableSlots.indexOf(optimalSlot)
            if (slotIndex > -1) {
                availableSlots.splice(slotIndex, 1)
            }
        }
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    const analysis = analyzeProductivityAndSuggest(
        tasks.filter(t => t.status === 'completed')
    )

    return {
        date,
        slots: scheduledTasks,
        productivity_score: analysis.score,
        recommendations: analysis.recommendations
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

function getTaskEnergyRequirement(task: Task): 'low' | 'medium' | 'high' {
    switch (task.priority) {
        case 'urgent': return 'high'
        case 'high': return 'high'
        case 'medium': return 'medium'
        case 'low': return 'low'
    }
}

function getEnergyValue(energy: 'low' | 'medium' | 'high'): number {
    switch (energy) {
        case 'low': return 1
        case 'medium': return 2
        case 'high': return 3
    }
}

function generateTimeSlots(
    startTime: string,
    endTime: string,
    focusMinutes: number,
    breakMinutes: number
): TimeSlot[] {
    const slots: TimeSlot[] = []
    let currentTime = parseTime(startTime)
    const endTimeMinutes = parseTime(endTime)

    while (currentTime < endTimeMinutes) {
        // –§–æ–∫—É—Å-—Å–ª–æ—Ç
        const focusEnd = Math.min(currentTime + focusMinutes, endTimeMinutes)
        slots.push({
            start: formatTime(currentTime),
            end: formatTime(focusEnd),
            duration: focusEnd - currentTime,
            type: 'focus',
            energyRequired: 'high'
        })

        currentTime = focusEnd

        // –ü–µ—Ä–µ—Ä—ã–≤ (–µ—Å–ª–∏ –Ω–µ –∫–æ–Ω–µ—Ü –¥–Ω—è)
        if (currentTime < endTimeMinutes) {
            const breakEnd = Math.min(currentTime + breakMinutes, endTimeMinutes)
            slots.push({
                start: formatTime(currentTime),
                end: formatTime(breakEnd),
                duration: breakEnd - currentTime,
                type: 'break',
                energyRequired: 'low'
            })

            currentTime = breakEnd
        }
    }

    return slots.filter(slot => slot.type === 'focus') // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏–µ —Å–ª–æ—Ç—ã
}

function parseTime(timeStr: string): number {
    const [hours, minutes] = timeStr.split(':').map(Number)
    return hours * 60 + minutes
}

function formatTime(minutes: number): string {
    const hours = Math.floor(minutes / 60)
    const mins = minutes % 60
    return `${hours.toString().padStart(2, '0')}:${mins.toString().padStart(2, '0')}`
}

function parseTimeToDate(timeStr: string, date: Date): Date {
    const [hours, minutes] = timeStr.split(':').map(Number)
    const result = new Date(date)
    result.setHours(hours, minutes, 0, 0)
    return result
}

function generateSchedulingReason(task: Task, slot: TimeSlot): string {
    const reasons = []

    if (task.priority === 'urgent') {
        reasons.push("—Å—Ä–æ—á–Ω–∞—è –∑–∞–¥–∞—á–∞")
    }

    if (slot.start.startsWith('09') || slot.start.startsWith('10')) {
        reasons.push("—É—Ç—Ä–µ–Ω–Ω–∏–π –ø–∏–∫ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
    }

    if (task.estimatedMinutes && task.estimatedMinutes <= 30) {
        reasons.push("–±—ã—Å—Ç—Ä–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –∏–º–ø—É–ª—å—Å–∞")
    }

    return `–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: ${reasons.join(', ')}`
}
