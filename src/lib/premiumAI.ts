// üíé Premium AI —Å–µ—Ä–≤–∏—Å —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–¥–ø–∏—Å–æ–∫
import { Task, User } from '@/types'
import { AIPlanner, AI_MODELS } from './aiModels'
import { getSubscription, getUserLimits, hasFeatureAccess } from './subscriptions'

export interface PremiumAIResponse {
    success: boolean
    data?: any
    error?: string
    message?: string
    requiresUpgrade?: boolean
    upgradeUrl?: string
}

export interface AIUsageStats {
    requestsUsed: number
    requestsLimit: number
    tokensUsed: number
    tokensLimit: number
    cost: number
    resetDate: Date
}

/**
 * üíé Premium AI —Å–µ—Ä–≤–∏—Å —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–¥–ø–∏—Å–æ–∫
 */
export class PremiumAIService {
    private user: User
    private subscription: any = null

    constructor(user: User) {
        this.user = user
    }

    /**
     * üîê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
     */
    async initialize(): Promise<PremiumAIResponse> {
        try {
            const subscriptionResult = await getSubscription(this.user.id)

            if (!subscriptionResult.success) {
                return {
                    success: false,
                    error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É',
                    requiresUpgrade: true
                }
            }

            this.subscription = subscriptionResult.subscription
            return { success: true }
        } catch (error: any) {
            return {
                success: false,
                error: error.message || '–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AI —Å–µ—Ä–≤–∏—Å–∞'
            }
        }
    }

    /**
     * üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ª–∏–º–∏—Ç–æ–≤
     */
    async generateTasks(description: string, context?: any): Promise<PremiumAIResponse> {
        if (!this.subscription) {
            await this.initialize()
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ AI —Ñ—É–Ω–∫—Ü–∏—è–º
        if (!hasFeatureAccess(this.subscription, 'ai_requests')) {
            return {
                success: false,
                error: 'AI —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è Premium –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤',
                requiresUpgrade: true,
                upgradeUrl: '/pricing'
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
        const limits = getUserLimits(this.subscription)
        if (limits.aiRequests > 0) {
            // TODO: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
            // const currentUsage = await this.getCurrentUsage()
            // if (currentUsage.requestsUsed >= limits.aiRequests) {
            //   return {
            //     success: false,
            //     error: '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç AI –∑–∞–ø—Ä–æ—Å–æ–≤',
            //     requiresUpgrade: true
            //   }
            // }
        }

        try {
            const modelId = this.getBestAvailableModel()
            const aiPlanner = new AIPlanner(modelId, process.env.OPENAI_API_KEY)

            const tasks = await aiPlanner.generateTasks(description, {
                existingTasks: context?.existingTasks,
                preferences: context?.preferences
            })

            // TODO: –ó–∞–ø–∏—Å–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await this.recordUsage('task_generation', 1, 100)

            return {
                success: true,
                data: tasks,
                message: '–ó–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã'
            }
        } catch (error: any) {
            return {
                success: false,
                error: error.message || '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á'
            }
        }
    }

    /**
     * üéØ –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á
     */
    async prioritizeTasks(tasks: Task[], context?: any): Promise<PremiumAIResponse> {
        if (!this.subscription) {
            await this.initialize()
        }

        if (!hasFeatureAccess(this.subscription, 'ai_requests')) {
            return {
                success: false,
                error: 'AI —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è Premium –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤',
                requiresUpgrade: true,
                upgradeUrl: '/pricing'
            }
        }

        try {
            const modelId = this.getBestAvailableModel()
            const aiPlanner = new AIPlanner(modelId, process.env.OPENAI_API_KEY)

            const prioritizedTasks = await aiPlanner.prioritizeTasks(tasks, context)

            await this.recordUsage('task_prioritization', 1, 50)

            return {
                success: true,
                data: prioritizedTasks,
                message: '–ó–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω—ã'
            }
        } catch (error: any) {
            return {
                success: false,
                error: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞—á'
            }
        }
    }

    /**
     * üìä –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
     */
    async analyzeProductivity(completedTasks: Task[], metrics?: any): Promise<PremiumAIResponse> {
        if (!this.subscription) {
            await this.initialize()
        }

        if (!hasFeatureAccess(this.subscription, 'ai_requests')) {
            return {
                success: false,
                error: 'AI —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è Premium –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤',
                requiresUpgrade: true,
                upgradeUrl: '/pricing'
            }
        }

        try {
            const modelId = this.getBestAvailableModel()
            const aiPlanner = new AIPlanner(modelId, process.env.OPENAI_API_KEY)

            const analysis = await aiPlanner.analyzeProductivity(completedTasks, metrics)

            await this.recordUsage('productivity_analysis', 1, 200)

            return {
                success: true,
                data: analysis,
                message: '–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω'
            }
        } catch (error: any) {
            return {
                success: false,
                error: error.message || '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏'
            }
        }
    }

    /**
     * üí° –£–º–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
     */
    async generateSmartReminders(upcomingTasks: Task[], patterns?: any): Promise<PremiumAIResponse> {
        if (!this.subscription) {
            await this.initialize()
        }

        if (!hasFeatureAccess(this.subscription, 'ai_requests')) {
            return {
                success: false,
                error: 'AI —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è Premium –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤',
                requiresUpgrade: true,
                upgradeUrl: '/pricing'
            }
        }

        try {
            const modelId = this.getBestAvailableModel()
            const aiPlanner = new AIPlanner(modelId, process.env.OPENAI_API_KEY)

            const reminders = await aiPlanner.generateSmartReminders(upcomingTasks, patterns)

            await this.recordUsage('smart_reminders', 1, 150)

            return {
                success: true,
                data: reminders,
                message: '–£–º–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω—ã'
            }
        } catch (error: any) {
            return {
                success: false,
                error: error.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π'
            }
        }
    }

    /**
     * üìà –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
     */
    async getUsageStats(): Promise<AIUsageStats> {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const limits = getUserLimits(this.subscription)

        return {
            requestsUsed: 0,
            requestsLimit: limits.aiRequests,
            tokensUsed: 0,
            tokensLimit: 10000,
            cost: 0,
            resetDate: this.subscription?.currentPeriodEnd || new Date()
        }
    }

    /**
     * üéØ –ü–æ–ª—É—á–µ–Ω–∏–µ –ª—É—á—à–µ–π –¥–æ—Å—Ç—É–ø–Ω–æ–π –º–æ–¥–µ–ª–∏
     */
    private getBestAvailableModel(): string {
        const availableModels = this.getAvailableModels()

        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: GPT-4o > GPT-4o Mini > Mock
        const priorityOrder = ['gpt-4o', 'gpt-4o-mini', 'mock-ai']

        for (const modelId of priorityOrder) {
            if (availableModels.includes(modelId)) {
                return modelId
            }
        }

        return 'mock-ai' // Fallback
    }

    /**
     * üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    private getAvailableModels(): string[] {
        const tier = this.subscription?.tier || 'free'

        switch (tier) {
            case 'free':
                return ['mock-ai']
            case 'premium':
                return ['mock-ai', 'gpt-4o-mini']
            case 'pro':
                return ['mock-ai', 'gpt-4o-mini', 'gpt-4o', 'claude-sonnet']
            case 'enterprise':
                return Object.keys(AI_MODELS)
            default:
                return ['mock-ai']
        }
    }

    /**
     * üìä –ó–∞–ø–∏—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AI
     */
    private async recordUsage(feature: string, requests: number, tokens: number): Promise<void> {
        try {
            // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            console.log(`AI Usage recorded: ${feature}, requests: ${requests}, tokens: ${tokens}`)
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AI:', error)
        }
    }

    /**
     * üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏
     */
    hasFeatureAccess(feature: string): boolean {
        if (!this.subscription) return false
        return hasFeatureAccess(this.subscription, feature)
    }

    /**
     * üí∞ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ
     */
    getSubscriptionInfo() {
        return {
            tier: this.subscription?.tier || 'free',
            status: this.subscription?.status || 'active',
            limits: getUserLimits(this.subscription),
            availableModels: this.getAvailableModels()
        }
    }
}

/**
 * üè≠ –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è AI —Å–µ—Ä–≤–∏—Å–∞
 */
export function createPremiumAIService(user: User): PremiumAIService {
    return new PremiumAIService(user)
}

/**
 * üéØ –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ AI
 */
export async function checkAIAccess(userId: string, feature: string): Promise<{
    hasAccess: boolean
    requiresUpgrade: boolean
    upgradeUrl?: string
}> {
    try {
        const subscriptionResult = await getSubscription(userId)

        if (!subscriptionResult.success || !subscriptionResult.subscription) {
            return {
                hasAccess: false,
                requiresUpgrade: true,
                upgradeUrl: '/pricing'
            }
        }

        const hasAccess = hasFeatureAccess(subscriptionResult.subscription, feature)

        return {
            hasAccess,
            requiresUpgrade: !hasAccess,
            upgradeUrl: !hasAccess ? '/pricing' : undefined
        }
    } catch (error) {
        return {
            hasAccess: false,
            requiresUpgrade: true,
            upgradeUrl: '/pricing'
        }
    }
}
