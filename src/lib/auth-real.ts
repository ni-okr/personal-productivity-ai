// üîê –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (auth-real.ts)
import { User } from '@/types'
import { validateEmail, validateName } from '@/utils/validation'
import { supabase } from '@/lib/supabase'
import type { AuthChangeEvent, Session } from '@supabase/supabase-js'

export interface AuthUser {
  id: string
  email: string
  name: string
  subscription: 'free' | 'premium' | 'pro'
  createdAt: Date
  lastLoginAt: Date
}

export interface SignUpData {
  email: string
  password: string
  name: string
}

export interface SignInData {
  email: string
  password: string
}

export interface AuthResponse {
  success: boolean
  user?: User
  error?: string
  message?: string
}

/** –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */
export async function signUp({ email, password, name }: SignUpData): Promise<AuthResponse> {
  // –í–∞–ª–∏–¥–∞—Ü–∏—è email
  const emailValidation = validateEmail(email)
  if (!emailValidation.isValid) return { success: false, error: emailValidation.errors[0] }
  // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
  if (!password || password.length < 6) return { success: false, error: '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤' }
  // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏
  const nameValidation = validateName(name)
  if (!nameValidation.isValid) return { success: false, error: nameValidation.errors[0] }

  const { error: signupError, data } = await supabase.auth.signUp({ email, password })
  if (signupError) return { success: false, error: signupError.message }
  return { success: true, user: data.user, message: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞' }
}

/** –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */
export async function signIn({ email, password }: SignInData): Promise<AuthResponse> {
  const emailValidation = validateEmail(email)
  if (!emailValidation.isValid) return { success: false, error: emailValidation.errors[0] }
  if (!password) return { success: false, error: '–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' }

  const { data, error } = await supabase.auth.signInWithPassword({ email, password })
  if (error) return { success: false, error: error.message }
  if (!data.user) return { success: false, error: '–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É' }

  await (supabase as any)
    .from('users')
    .update({ last_login_at: new Date().toISOString() })
    .eq('id', data.user.id)

  const profile = await getUserProfile(data.user.id)
  return { success: true, user: profile.user, message: '–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω' }
}

/** –í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */
export async function signOut(): Promise<AuthResponse> {
  const { error } = await supabase.auth.signOut()
  if (error) return { success: false, error: error.message }
  return { success: true, message: '–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã' }
}

/** –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */
export async function getUserProfile(userId: string): Promise<AuthResponse> {
  const { data, error } = await (supabase as any)
    .from('users')
    .select('*')
    .eq('id', userId)
    .single()
  if (error || !data) return { success: false, error: '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' }
  return { success: true, user: { ...data, createdAt: new Date(data.created_at), updatedAt: new Date(data.updated_at || data.created_at) } }
}

/** –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */
export async function updateUserProfile(userId: string, updates: Partial<Pick<AuthUser, 'name' | 'subscription'>>): Promise<AuthResponse> {
  const { data, error } = await (supabase as any)
    .from('users')
    .update(updates)
    .eq('id', userId)
    .select()
    .single()
  if (error) return { success: false, error: error.message }
  return { success: true, user: { ...data, createdAt: new Date(data.created_at), updatedAt: new Date(data.updated_at || data.created_at) }, message: '–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω' }
}

/** –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email */
export async function confirmEmail(token: string): Promise<AuthResponse> {
  // –ó–∞–≥–ª—É—à–∫–∞
  return { success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' }
}

/** –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è */
export async function updatePassword(newPassword: string): Promise<AuthResponse> {
  const { error } = await supabase.auth.updateUser({ password: newPassword })
  if (error) return { success: false, error: error.message }
  return { success: true, message: '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω' }
}

/** –í—Ö–æ–¥ —á–µ—Ä–µ–∑ Google */
export async function signInWithGoogle(): Promise<AuthResponse> {
  return { success: false, error: 'Google OAuth –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Ö–æ–¥ –ø–æ email/–ø–∞—Ä–æ–ª—é.' }
}

/** –í—Ö–æ–¥ —á–µ—Ä–µ–∑ GitHub */
export async function signInWithGitHub(): Promise<AuthResponse> {
  return { success: false, error: 'GitHub OAuth –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.' }
}
