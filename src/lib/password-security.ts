// üîê –°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª–µ–π

export interface PasswordSecurityLevel {
    level: 'weak' | 'medium' | 'strong'
    score: number
    suggestions: string[]
    requiresChange: boolean
}

export function analyzePasswordSecurity(password: string): PasswordSecurityLevel {
    let score = 0
    const suggestions: string[] = []

    // –ë–∞–∑–æ–≤–∞—è –¥–ª–∏–Ω–∞
    if (password.length >= 8) score += 1
    else suggestions.push('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤')

    // –°–æ–¥–µ—Ä–∂–∏—Ç —Ü–∏—Ñ—Ä—ã
    if (/\d/.test(password)) score += 1
    else suggestions.push('–î–æ–±–∞–≤—å—Ç–µ —Ü–∏—Ñ—Ä—ã')

    // –°–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã
    if (/[A-Z]/.test(password)) score += 1
    else suggestions.push('–î–æ–±–∞–≤—å—Ç–µ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã')

    // –°–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã
    if (/[a-z]/.test(password)) score += 1
    else suggestions.push('–î–æ–±–∞–≤—å—Ç–µ —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã')

    // –°–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    if (/[!@#$%^&*(),.?":{}|<>]/.test(password)) score += 1
    else suggestions.push('–î–æ–±–∞–≤—å—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (!@#$%^&*)')

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª–∞–±—ã–µ –ø–∞—Ä–æ–ª–∏
    const weakPasswords = ['123', 'password', 'qwerty', 'admin', '123456', '12345678']
    if (weakPasswords.includes(password.toLowerCase())) {
        score = 0
        suggestions.push('–≠—Ç–æ—Ç –ø–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω')
    }

    let level: 'weak' | 'medium' | 'strong'
    let requiresChange = false

    if (score <= 2) {
        level = 'weak'
        requiresChange = true
    } else if (score <= 4) {
        level = 'medium'
        requiresChange = false
    } else {
        level = 'strong'
        requiresChange = false
    }

    return {
        level,
        score,
        suggestions,
        requiresChange
    }
}

export function generateSecurePassword(length: number = 12): string {
    const charset = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*'
    let password = ''

    // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–∏–º–≤–æ–ª–æ–≤
    const lowercase = 'abcdefghijklmnopqrstuvwxyz'
    const uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
    const numbers = '0123456789'
    const symbols = '!@#$%^&*'

    password += lowercase[Math.floor(Math.random() * lowercase.length)]
    password += uppercase[Math.floor(Math.random() * uppercase.length)]
    password += numbers[Math.floor(Math.random() * numbers.length)]
    password += symbols[Math.floor(Math.random() * symbols.length)]

    // –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    for (let i = 4; i < length; i++) {
        password += charset[Math.floor(Math.random() * charset.length)]
    }

    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Å–∏–º–≤–æ–ª—ã
    return password.split('').sort(() => Math.random() - 0.5).join('')
}

export function shouldShowPasswordWarning(subscription: string, passwordLevel: PasswordSecurityLevel): boolean {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ —Å–æ —Å–ª–∞–±—ã–º –ø–∞—Ä–æ–ª–µ–º
    return (subscription === 'premium' || subscription === 'pro' || subscription === 'enterprise') &&
        passwordLevel.level === 'weak'
}
