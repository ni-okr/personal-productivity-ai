// üß™ Mock —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á –±–µ–∑ Supabase

import { AICoachSuggestion, CreateTaskData, ProductivityMetrics, Task, TasksResponse, TaskStatus, UpdateTaskData } from '@/types'

// Mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–¥–∞—á
const mockTasks: Task[] = [
  {
    id: 'mock-task-1',
    title: '–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å mock —Ä–µ–∂–∏–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞',
    description: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á –≤ mock —Ä–µ–∂–∏–º–µ',
    priority: 'high',
    status: 'todo',
    estimatedMinutes: 30,
    source: 'manual',
    tags: ['—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', 'mock'],
    userId: 'mock-user-1',
    createdAt: new Date('2024-09-16T10:00:00Z'),
    updatedAt: new Date('2024-09-16T10:00:00Z')
  },
  {
    id: 'mock-task-2',
    title: '–°–æ–∑–¥–∞—Ç—å mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏',
    description: '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã –∑–∞–¥–∞—á –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏',
    priority: 'medium',
    status: 'in_progress',
    estimatedMinutes: 45,
    source: 'manual',
    tags: ['—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', 'mock'],
    userId: 'mock-user-1',
    createdAt: new Date('2024-09-16T09:30:00Z'),
    updatedAt: new Date('2024-09-16T11:15:00Z')
  },
  {
    id: 'mock-task-3',
    title: '–ó–∞–≤–µ—Ä—à–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
    description: '–ò—Å–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã —Å RLS –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º',
    priority: 'urgent',
    status: 'completed',
    estimatedMinutes: 60,
    actualMinutes: 55,
    source: 'manual',
    tags: ['–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', '–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è'],
    userId: 'mock-user-1',
    createdAt: new Date('2024-09-16T08:00:00Z'),
    updatedAt: new Date('2024-09-16T12:00:00Z'),
    completedAt: new Date('2024-09-16T12:00:00Z')
  }
]

// Mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
const mockMetrics: ProductivityMetrics = {
  date: new Date(),
  focusTimeMinutes: 120,
  tasksCompleted: 1,
  distractionsCount: 3,
  productivityScore: 75,
  mood: 'high',
  energyLevel: 'medium',
  userId: 'mock-user-1'
}

// Mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ò–ò
const mockSuggestions: AICoachSuggestion[] = [
  {
    id: 'mock-suggestion-1',
    type: 'task_prioritization',
    title: '–°—Ñ–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å—Ä–æ—á–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö',
    description: '–£ –≤–∞—Å –µ—Å—Ç—å 2 —Å—Ä–æ—á–Ω—ã–µ –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è',
    actionText: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ä–æ—á–Ω—ã–µ –∑–∞–¥–∞—á–∏',
    priority: 1,
    userId: 'mock-user-1',
    createdAt: new Date()
  },
  {
    id: 'mock-suggestion-2',
    type: 'take_break',
    title: '–í—Ä–µ–º—è –¥–ª—è –ø–µ—Ä–µ—Ä—ã–≤–∞',
    description: '–í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ —É–∂–µ 2 —á–∞—Å–∞ –±–µ–∑ –ø–µ—Ä–µ—Ä—ã–≤–∞. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å 5-–º–∏–Ω—É—Ç–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤',
    actionText: '–°–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤',
    priority: 2,
    userId: 'mock-user-1',
    createdAt: new Date()
  }
]

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏
export async function mockGetTasks(userId: string): Promise<TasksResponse> {
  console.log('üß™ MOCK –†–ï–ñ–ò–ú: –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Supabase')

  // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  const userTasks = mockTasks.filter(task => task.userId === userId)

  return {
    success: true,
    tasks: userTasks,
    message: 'Mock –∑–∞–¥–∞—á–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ'
  }
}

export async function mockCreateTask(userId: string, taskData: CreateTaskData): Promise<TasksResponse> {
  console.log('üß™ MOCK –†–ï–ñ–ò–ú: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Supabase')

  const newTask: Task = {
    id: `mock-task-${Date.now()}-${Math.random().toString(36).substring(7)}`,
    title: taskData.title,
    description: taskData.description,
    priority: taskData.priority,
    status: 'todo',
    estimatedMinutes: taskData.estimatedMinutes,
    source: 'manual',
    tags: taskData.tags || [],
    userId: userId,
    createdAt: new Date(),
    updatedAt: new Date()
  }

  mockTasks.push(newTask)

  return {
    success: true,
    task: newTask,
    message: 'Mock –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ'
  }
}

export async function mockUpdateTask(taskId: string, updates: UpdateTaskData): Promise<TasksResponse> {
  console.log('üß™ MOCK –†–ï–ñ–ò–ú: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Supabase')

  const taskIndex = mockTasks.findIndex(task => task.id === taskId)
  if (taskIndex === -1) {
    return {
      success: false,
      error: '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
    }
  }

  const updatedTask = {
    ...mockTasks[taskIndex],
    ...updates,
    updatedAt: new Date()
  }

  mockTasks[taskIndex] = updatedTask

  return {
    success: true,
    task: updatedTask,
    message: 'Mock –∑–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ'
  }
}

export async function mockDeleteTask(taskId: string): Promise<TasksResponse> {
  console.log('üß™ MOCK –†–ï–ñ–ò–ú: –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Supabase')

  const taskIndex = mockTasks.findIndex(task => task.id === taskId)
  if (taskIndex === -1) {
    return {
      success: false,
      error: '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
    }
  }

  mockTasks.splice(taskIndex, 1)

  return {
    success: true,
    message: 'Mock –∑–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ'
  }
}

export async function mockCompleteTask(taskId: string, actualMinutes?: number): Promise<TasksResponse> {
  console.log('üß™ MOCK –†–ï–ñ–ò–ú: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Supabase')

  const taskIndex = mockTasks.findIndex(task => task.id === taskId)
  if (taskIndex === -1) {
    return {
      success: false,
      error: '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
    }
  }

  const updatedTask = {
    ...mockTasks[taskIndex],
    status: 'completed' as TaskStatus,
    completedAt: new Date(),
    actualMinutes: actualMinutes || mockTasks[taskIndex].estimatedMinutes,
    updatedAt: new Date()
  }

  mockTasks[taskIndex] = updatedTask

  return {
    success: true,
    task: updatedTask,
    message: 'Mock –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ'
  }
}

export async function mockGetTasksStats(userId: string): Promise<{
  success: boolean
  stats?: {
    total: number
    completed: number
    pending: number
    overdue: number
    completionRate: number
    averageCompletionTime: number
  }
  error?: string
}> {
  console.log('üß™ MOCK –†–ï–ñ–ò–ú: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–¥–∞—á –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Supabase')

  const userTasks = mockTasks.filter(task => task.userId === userId)
  const now = new Date()

  const total = userTasks.length
  const completed = userTasks.filter(task => task.status === 'completed').length
  const pending = userTasks.filter(task => task.status === 'todo' || task.status === 'in_progress').length
  const overdue = userTasks.filter(task =>
    (task.status === 'todo' || task.status === 'in_progress') &&
    task.dueDate &&
    task.dueDate < now
  ).length

  const completionRate = total > 0 ? Math.round((completed / total) * 100) : 0

  const completedTasks = userTasks.filter(task => task.status === 'completed' && task.actualMinutes)
  const averageCompletionTime = completedTasks.length > 0
    ? Math.round(completedTasks.reduce((sum, task) => sum + (task.actualMinutes || 0), 0) / completedTasks.length)
    : 0

  return {
    success: true,
    stats: {
      total,
      completed,
      pending,
      overdue,
      completionRate,
      averageCompletionTime
    }
  }
}

export async function mockSyncTasks(userId: string): Promise<TasksResponse> {
  console.log('üß™ MOCK –†–ï–ñ–ò–ú: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Supabase')

  const userTasks = mockTasks.filter(task => task.userId === userId)

  return {
    success: true,
    tasks: userTasks,
    message: 'Mock –∑–∞–¥–∞—á–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ'
  }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
export async function mockGetProductivityMetrics(userId: string): Promise<ProductivityMetrics | null> {
  console.log('üß™ MOCK –†–ï–ñ–ò–ú: –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Supabase')

  return mockMetrics
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ò–ò
export async function mockGetAISuggestions(userId: string): Promise<AICoachSuggestion[]> {
  console.log('üß™ MOCK –†–ï–ñ–ò–ú: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ò–ò –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Supabase')

  return mockSuggestions.filter(suggestion => suggestion.userId === userId)
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞—á
export function addMockTask(task: Task): void {
  console.log('üß™ MOCK –†–ï–ñ–ò–ú: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–¥–∞—á–∏')
  mockTasks.push(task)
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è mock –∑–∞–¥–∞—á –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
export function getMockTasksByUser(userId: string): Task[] {
  return mockTasks.filter(task => task.userId === userId)
}

export function clearMockTasks(): void {
  console.log('üß™ MOCK –†–ï–ñ–ò–ú: –û—á–∏—Å—Ç–∫–∞ mock –∑–∞–¥–∞—á')
  // –û—á–∏—â–∞–µ–º –º–∞—Å—Å–∏–≤ mockTasks –ø–æ–ª–Ω–æ—Å—Ç—å—é
  mockTasks.length = 0
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è mock –∑–∞–¥–∞—á
export function updateMockTasks(tasks: Task[]): void {
  console.log('üß™ MOCK –†–ï–ñ–ò–ú: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ mock –∑–∞–¥–∞—á')
  mockTasks.length = 0
  mockTasks.push(...tasks)
}
