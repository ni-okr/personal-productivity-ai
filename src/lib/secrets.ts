/**
 * üîê –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ–∫—Ä–µ—Ç–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å pass (Password Store) –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ–∫—Ä–µ—Ç–æ–≤
 */

import { execSync } from 'child_process';

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å–µ–∫—Ä–µ—Ç –∏–∑ pass
 * @param path - –ø—É—Ç—å –∫ —Å–µ–∫—Ä–µ—Ç—É –≤ pass (–Ω–∞–ø—Ä–∏–º–µ—Ä: 'personal-productivity-ai/supabase/url')
 * @returns –∑–Ω–∞—á–µ–Ω–∏–µ —Å–µ–∫—Ä–µ—Ç–∞ –∏–ª–∏ null –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
 */
export function getSecret(path: string): string | null {
    try {
        const result = execSync(`pass show ${path}`, {
            encoding: 'utf8',
            stdio: ['pipe', 'pipe', 'pipe']
        });
        return result.trim();
    } catch (error) {
        console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–µ–∫—Ä–µ—Ç ${path}:`, error);
        return null;
    }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–µ–∫—Ä–µ—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞
 * @returns –æ–±—ä–µ–∫—Ç —Å —Å–µ–∫—Ä–µ—Ç–∞–º–∏ –∏–ª–∏ null –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å
 */
export function getAllSecrets(): Record<string, string> | null {
    try {
        const secrets = {
            NEXT_PUBLIC_SUPABASE_URL: getSecret('personal-productivity-ai/supabase/url'),
            NEXT_PUBLIC_SUPABASE_ANON_KEY: getSecret('personal-productivity-ai/supabase/anon-key'),
            TINKOFF_TERMINAL_KEY_TEST: getSecret('personal-productivity-ai/tinkoff/terminal-key-test'),
            TINKOFF_SECRET_KEY_TEST: getSecret('personal-productivity-ai/tinkoff/secret-key-test'),
            TINKOFF_TERMINAL_KEY_LIVE: getSecret('personal-productivity-ai/tinkoff/terminal-key-live'),
            TINKOFF_SECRET_KEY_LIVE: getSecret('personal-productivity-ai/tinkoff/secret-key-live'),
        };

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Å–µ–∫—Ä–µ—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        const missingSecrets = Object.entries(secrets)
            .filter(([key, value]) => !value)
            .map(([key]) => key);

        if (missingSecrets.length > 0) {
            console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ–∫—Ä–µ—Ç—ã: ${missingSecrets.join(', ')}`);
            return null;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return {
            ...secrets,
            TINKOFF_TERMINAL_KEY: secrets.TINKOFF_TERMINAL_KEY_TEST,
            TINKOFF_SECRET_KEY: secrets.TINKOFF_SECRET_KEY_TEST,
        };
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ–∫—Ä–µ—Ç–æ–≤:', error);
        return null;
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ pass —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
 * @returns true –µ—Å–ª–∏ pass –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ
 */
export function isPassReady(): boolean {
    try {
        execSync('pass ls', { stdio: 'pipe' });
        return true;
    } catch {
        return false;
    }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–µ–∫—Ä–µ—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
 * @returns –º–∞—Å—Å–∏–≤ –ø—É—Ç–µ–π –∫ —Å–µ–∫—Ä–µ—Ç–∞–º
 */
export function listSecrets(): string[] {
    try {
        const result = execSync('pass ls personal-productivity-ai', {
            encoding: 'utf8',
            stdio: ['pipe', 'pipe', 'pipe']
        });

        return result
            .split('\n')
            .filter(line => line.trim() && !line.startsWith('personal-productivity-ai'))
            .map(line => line.trim().replace(/^‚îú‚îÄ‚îÄ |‚îî‚îÄ‚îÄ /, ''))
            .map(secret => `personal-productivity-ai/${secret}`);
    } catch (error) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ–∫—Ä–µ—Ç–æ–≤:', error);
        return [];
    }
}

/**
 * –°–æ–∑–¥–∞—Ç—å .env.local —Ñ–∞–π–ª –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤ pass
 * @param outputPath - –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è .env.local (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: .env.local)
 */
export function createEnvFromPass(outputPath: string = '.env.local'): void {
    const secrets = getAllSecrets();
    if (!secrets) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ–∫—Ä–µ—Ç—ã –∏–∑ pass');
    }

    const envContent = Object.entries(secrets)
        .map(([key, value]) => `${key}=${value}`)
        .join('\n');

    require('fs').writeFileSync(outputPath, envContent);
    console.log(`‚úÖ .env.local —Å–æ–∑–¥–∞–Ω –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤ pass: ${outputPath}`);
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã –¥–ª—è TypeScript
export type Secrets = {
    NEXT_PUBLIC_SUPABASE_URL: string;
    NEXT_PUBLIC_SUPABASE_ANON_KEY: string;
    TINKOFF_TERMINAL_KEY_TEST: string;
    TINKOFF_SECRET_KEY_TEST: string;
    TINKOFF_TERMINAL_KEY_LIVE: string;
    TINKOFF_SECRET_KEY_LIVE: string;
    TINKOFF_TERMINAL_KEY: string;
    TINKOFF_SECRET_KEY: string;
};
