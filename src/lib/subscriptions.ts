// üí≥ –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–ø–∏—Å–æ–∫ —Å Stripe –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
import { Subscription, SubscriptionPlan, SubscriptionStatus, SubscriptionTier } from '@/types'
import { supabase } from './supabase'

export interface CreateSubscriptionData {
    userId: string
    tier: SubscriptionTier
    stripeCustomerId: string
    stripeSubscriptionId: string
    currentPeriodStart: Date
    currentPeriodEnd: Date
    trialEnd?: Date
}

export interface UpdateSubscriptionData {
    status?: SubscriptionStatus
    currentPeriodStart?: Date
    currentPeriodEnd?: Date
    cancelAtPeriodEnd?: boolean
    trialEnd?: Date
}

export interface SubscriptionResponse {
    success: boolean
    subscription?: Subscription
    error?: string
    message?: string
}

// –ü–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–æ–∫
export const SUBSCRIPTION_PLANS: SubscriptionPlan[] = [
    {
        id: 'free',
        name: 'Free',
        tier: 'free',
        price: 0,
        currency: 'usd',
        interval: 'month',
        features: [
            '–î–æ 50 –∑–∞–¥–∞—á',
            '–ë–∞–∑–æ–≤—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫',
            '–ü—Å–µ–≤–¥–æ-–ò–ò —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏',
            '–ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ'
        ],
        limits: {
            tasks: 50,
            aiRequests: 0,
            storage: 100
        },
        stripePriceId: '',
        isActive: true
    },
    {
        id: 'premium',
        name: 'Premium',
        tier: 'premium',
        price: 999, // $9.99
        currency: 'usd',
        interval: 'month',
        features: [
            '–î–æ 500 –∑–∞–¥–∞—á',
            'OpenAI GPT-4o Mini',
            '–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞',
            '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
            '–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö'
        ],
        limits: {
            tasks: 500,
            aiRequests: 1000,
            storage: 1000
        },
        stripePriceId: process.env.STRIPE_PREMIUM_PRICE_ID || '',
        isActive: true
    },
    {
        id: 'pro',
        name: 'Pro',
        tier: 'pro',
        price: 1999, // $19.99
        currency: 'usd',
        interval: 'month',
        features: [
            '–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏',
            '–í—Å–µ –ò–ò –º–æ–¥–µ–ª–∏',
            'API –¥–æ—Å—Ç—É–ø',
            '–ö–∞—Å—Ç–æ–º–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏',
            '–ö–æ–º–∞–Ω–¥–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏'
        ],
        limits: {
            tasks: -1, // unlimited
            aiRequests: 5000,
            storage: 5000
        },
        stripePriceId: process.env.STRIPE_PRO_PRICE_ID || '',
        isActive: true
    },
    {
        id: 'enterprise',
        name: 'Enterprise',
        tier: 'enterprise',
        price: 4999, // $49.99
        currency: 'usd',
        interval: 'month',
        features: [
            '–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ Pro',
            '–ë–µ–ª—ã–π –ª–µ–π–±–ª',
            '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
            'SLA –≥–∞—Ä–∞–Ω—Ç–∏–∏',
            '–ö–∞—Å—Ç–æ–º–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏'
        ],
        limits: {
            tasks: -1,
            aiRequests: -1,
            storage: -1
        },
        stripePriceId: process.env.STRIPE_ENTERPRISE_PRICE_ID || '',
        isActive: true
    }
]

/**
 * üìù –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export async function getSubscription(userId: string): Promise<SubscriptionResponse> {
    try {
        const { data, error } = await supabase
            .from('user_subscriptions')
            .select('*')
            .eq('user_id', userId)
            .single()

        if (error) {
            if (error.code === 'PGRST116') {
                // No subscription found, return free tier
                return {
                    success: true,
                    subscription: {
                        id: 'free',
                        userId,
                        tier: 'free',
                        status: 'active',
                        currentPeriodStart: new Date(),
                        currentPeriodEnd: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000), // 1 year
                        cancelAtPeriodEnd: false,
                        createdAt: new Date(),
                        updatedAt: new Date()
                    }
                }
            }

            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:', error)
            return {
                success: false,
                error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'
            }
        }

        const subscription: Subscription = {
            id: data.id,
            userId: data.user_id,
            tier: data.tier,
            status: data.status,
            stripeCustomerId: data.stripe_customer_id,
            stripeSubscriptionId: data.stripe_subscription_id,
            currentPeriodStart: new Date(data.current_period_start),
            currentPeriodEnd: new Date(data.current_period_end),
            cancelAtPeriodEnd: data.cancel_at_period_end,
            trialEnd: data.trial_end ? new Date(data.trial_end) : undefined,
            createdAt: new Date(data.created_at),
            updatedAt: new Date(data.updated_at)
        }

        return {
            success: true,
            subscription
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:', error)
        return {
            success: false,
            error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏'
        }
    }
}

/**
 * ‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
 */
export async function createSubscription(subscriptionData: CreateSubscriptionData): Promise<SubscriptionResponse> {
    try {
        const { data, error } = await supabase
            .from('user_subscriptions')
            .insert({
                user_id: subscriptionData.userId,
                tier: subscriptionData.tier,
                status: 'active',
                stripe_customer_id: subscriptionData.stripeCustomerId,
                stripe_subscription_id: subscriptionData.stripeSubscriptionId,
                current_period_start: subscriptionData.currentPeriodStart.toISOString(),
                current_period_end: subscriptionData.currentPeriodEnd.toISOString(),
                trial_end: subscriptionData.trialEnd?.toISOString(),
                cancel_at_period_end: false,
                created_at: new Date().toISOString(),
                updated_at: new Date().toISOString()
            })
            .select()
            .single()

        if (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:', error)
            return {
                success: false,
                error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'
            }
        }

        const subscription: Subscription = {
            id: data.id,
            userId: data.user_id,
            tier: data.tier,
            status: data.status,
            stripeCustomerId: data.stripe_customer_id,
            stripeSubscriptionId: data.stripe_subscription_id,
            currentPeriodStart: new Date(data.current_period_start),
            currentPeriodEnd: new Date(data.current_period_end),
            cancelAtPeriodEnd: data.cancel_at_period_end,
            trialEnd: data.trial_end ? new Date(data.trial_end) : undefined,
            createdAt: new Date(data.created_at),
            updatedAt: new Date(data.updated_at)
        }

        return {
            success: true,
            subscription,
            message: '–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞'
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:', error)
        return {
            success: false,
            error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏'
        }
    }
}

/**
 * ‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
 */
export async function updateSubscription(subscriptionId: string, updates: UpdateSubscriptionData): Promise<SubscriptionResponse> {
    try {
        const updateData: any = {
            ...updates,
            updated_at: new Date().toISOString()
        }

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã –≤ ISO —Å—Ç—Ä–æ–∫–∏
        if (updates.currentPeriodStart) {
            updateData.current_period_start = updates.currentPeriodStart.toISOString()
        }
        if (updates.currentPeriodEnd) {
            updateData.current_period_end = updates.currentPeriodEnd.toISOString()
        }
        if (updates.trialEnd) {
            updateData.trial_end = updates.trialEnd.toISOString()
        }

        const { data, error } = await supabase
            .from('user_subscriptions')
            .update(updateData)
            .eq('id', subscriptionId)
            .select()
            .single()

        if (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:', error)
            return {
                success: false,
                error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'
            }
        }

        const subscription: Subscription = {
            id: data.id,
            userId: data.user_id,
            tier: data.tier,
            status: data.status,
            stripeCustomerId: data.stripe_customer_id,
            stripeSubscriptionId: data.stripe_subscription_id,
            currentPeriodStart: new Date(data.current_period_start),
            currentPeriodEnd: new Date(data.current_period_end),
            cancelAtPeriodEnd: data.cancel_at_period_end,
            trialEnd: data.trial_end ? new Date(data.trial_end) : undefined,
            createdAt: new Date(data.created_at),
            updatedAt: new Date(data.updated_at)
        }

        return {
            success: true,
            subscription,
            message: '–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞'
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:', error)
        return {
            success: false,
            error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏'
        }
    }
}

/**
 * üóëÔ∏è –û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏
 */
export async function cancelSubscription(subscriptionId: string): Promise<SubscriptionResponse> {
    try {
        const { data, error } = await supabase
            .from('user_subscriptions')
            .update({
                status: 'canceled',
                cancel_at_period_end: true,
                updated_at: new Date().toISOString()
            })
            .eq('id', subscriptionId)
            .select()
            .single()

        if (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏:', error)
            return {
                success: false,
                error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'
            }
        }

        const subscription: Subscription = {
            id: data.id,
            userId: data.user_id,
            tier: data.tier,
            status: data.status,
            stripeCustomerId: data.stripe_customer_id,
            stripeSubscriptionId: data.stripe_subscription_id,
            currentPeriodStart: new Date(data.current_period_start),
            currentPeriodEnd: new Date(data.current_period_end),
            cancelAtPeriodEnd: data.cancel_at_period_end,
            trialEnd: data.trial_end ? new Date(data.trial_end) : undefined,
            createdAt: new Date(data.created_at),
            updatedAt: new Date(data.updated_at)
        }

        return {
            success: true,
            subscription,
            message: '–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞'
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏:', error)
        return {
            success: false,
            error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–¥–ø–∏—Å–∫–∏'
        }
    }
}

/**
 * üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞–Ω–æ–≤ –ø–æ–¥–ø–∏—Å–æ–∫
 */
export function getSubscriptionPlans(): SubscriptionPlan[] {
    return SUBSCRIPTION_PLANS.filter(plan => plan.isActive)
}

/**
 * üéØ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø–æ —Ç–∏–ø—É
 */
export function getSubscriptionPlan(tier: SubscriptionTier): SubscriptionPlan | undefined {
    return SUBSCRIPTION_PLANS.find(plan => plan.tier === tier && plan.isActive)
}

/**
 * ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–∏
 */
export function hasFeatureAccess(subscription: Subscription, feature: string): boolean {
    const plan = getSubscriptionPlan(subscription.tier)
    if (!plan) return false

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
    if (subscription.status !== 'active' && subscription.status !== 'trialing') {
        return false
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
    if (subscription.currentPeriodEnd < new Date()) {
        return false
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    switch (feature) {
        case 'ai_requests':
            return subscription.tier !== 'free'
        case 'unlimited_tasks':
            return subscription.tier === 'pro' || subscription.tier === 'enterprise'
        case 'api_access':
            return subscription.tier === 'pro' || subscription.tier === 'enterprise'
        case 'white_label':
            return subscription.tier === 'enterprise'
        default:
            return true
    }
}

/**
 * üìà –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export function getUserLimits(subscription: Subscription | null) {
    if (!subscription) {
        return SUBSCRIPTION_PLANS[0].limits // Free plan limits
    }

    const plan = getSubscriptionPlan(subscription.tier)
    if (!plan) {
        return SUBSCRIPTION_PLANS[0].limits // Free plan limits
    }

    return plan.limits
}

/**
 * üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ —Å Stripe
 */
export async function syncSubscriptionWithStripe(stripeSubscriptionId: string): Promise<SubscriptionResponse> {
    try {
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Stripe API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö
        return {
            success: true,
            message: '–ü–æ–¥–ø–∏—Å–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å Stripe'
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Stripe:', error)
        return {
            success: false,
            error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Stripe'
        }
    }
}
