// üí≥ –°–∏—Å—Ç–µ–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π: –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã + QR –∫–æ–¥—ã + –°–ë–ü

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π
export interface TinkoffResponse<T = any> {
    success: boolean
    data?: T
    error?: string
    message?: string
}

export interface CreatePaymentData {
    userId: string
    planId: string
    amount: number // –≤ —Ä—É–±–ª—è—Ö
    currency: string
    description: string
    paymentMethod: 'bank_transfer' | 'qr_code' | 'sbp' | 'card'
    bankDetails?: {
        recipientName: string
        accountNumber: string
        bankName: string
        bik: string
        correspondentAccount: string
    }
}

export interface CreateCustomerData {
    userId: string
    email: string
    name: string
    phone?: string
}

export interface PaymentSession {
    paymentId: string
    paymentMethod: 'bank_transfer' | 'qr_code' | 'sbp' | 'card'
    amount: number
    currency: string
    description: string
    instructions: string
    // –î–ª—è –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
    bankDetails?: {
        recipientName: string
        accountNumber: string
        bankName: string
        bik: string
        correspondentAccount: string
    }
    // –î–ª—è QR –∫–æ–¥–∞
    qrCode?: {
        data: string
        imageUrl: string
    }
    // –î–ª—è –°–ë–ü
    sbpUrl?: string
    // –î–ª—è –∫–∞—Ä—Ç—ã (–±—É–¥—É—â–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è)
    cardUrl?: string
}

export interface Customer {
    customerId: string
    email: string
    name: string
}

// –°–∏—Å—Ç–µ–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π: –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã + QR –∫–æ–¥—ã + –°–ë–ü
class PaymentAPI {
    private bankDetails = {
        recipientName: process.env.TINKOFF_RECIPIENT_FULL_NAME || '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å [–°–ö–†–´–¢–û]',
        accountNumber: process.env.TINKOFF_ACCOUNT_NUMBER || '[–°–ö–†–´–¢–û]',
        bankName: process.env.TINKOFF_BANK_NAME || '–ê–û ¬´–¢–ë–∞–Ω–∫¬ª',
        bik: process.env.TINKOFF_BIK || '[–°–ö–†–´–¢–û]',
        correspondentAccount: process.env.TINKOFF_CORR_ACCOUNT || '[–°–ö–†–´–¢–û]'
    }

    private generateQRCode(amount: number, description: string): { data: string; imageUrl: string } {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR –∫–æ–¥ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
        const qrData = `ST00012|Name=${this.bankDetails.recipientName}|PersonalAcc=${this.bankDetails.accountNumber}|BankName=${this.bankDetails.bankName}|BIC=${this.bankDetails.bik}|CorrespAcc=${this.bankDetails.correspondentAccount}|PayeeINN=${process.env.TINKOFF_INN || '[–°–ö–†–´–¢–û]'}|Sum=${amount * 100}|Purpose=${description}`

        return {
            data: qrData,
            imageUrl: `https://api.qrserver.com/v1/create-qr-code/?size=300x300&data=${encodeURIComponent(qrData)}`
        }
    }

    private generateSBPUrl(amount: number, description: string): string {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º URL –¥–ª—è –°–ë–ü (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        const sbpData = {
            amount: amount,
            currency: 'RUB',
            description: description,
            recipient: this.bankDetails.recipientName,
            account: this.bankDetails.accountNumber
        }

        // –í —Ä–µ–∞–ª—å–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ –¢–∏–Ω—å–∫–æ—Ñ—Ñ API –¥–ª—è –°–ë–ü
        return `https://pay.tbank.ru/sbp?data=${encodeURIComponent(JSON.stringify(sbpData))}`
    }

    /**
     * üõí –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ (–±–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥, QR –∫–æ–¥, –°–ë–ü)
     */
    async createPayment(data: CreatePaymentData): Promise<TinkoffResponse<PaymentSession>> {
        try {
            const paymentId = `${data.paymentMethod}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`

            console.log('üí≥ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞', {
                userId: data.userId,
                planId: data.planId,
                amount: data.amount,
                currency: data.currency,
                paymentMethod: data.paymentMethod
            })

            const session: PaymentSession = {
                paymentId,
                paymentMethod: data.paymentMethod,
                amount: data.amount,
                currency: data.currency,
                description: data.description,
                instructions: this.getPaymentInstructions(data.paymentMethod, data.amount, data.currency, data.planId)
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
            switch (data.paymentMethod) {
                case 'bank_transfer':
                    session.bankDetails = this.bankDetails
                    break

                case 'qr_code':
                    session.qrCode = this.generateQRCode(data.amount, data.description)
                    break

                case 'sbp':
                    session.sbpUrl = this.generateSBPUrl(data.amount, data.description)
                    break

                case 'card':
                    // –î–ª—è –±—É–¥—É—â–µ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –∫–∞—Ä—Ç–∞–º–∏
                    session.cardUrl = `https://securepay.tinkoff.ru/v2/Init?TerminalKey=${process.env.TINKOFF_TERMINAL_KEY}&Amount=${data.amount * 100}&OrderId=${paymentId}&Description=${encodeURIComponent(data.description)}`
                    break
            }

            return {
                success: true,
                data: session,
                message: `–ü–ª–∞—Ç–µ–∂ ${this.getPaymentMethodName(data.paymentMethod)} —Å–æ–∑–¥–∞–Ω`
            }
        } catch (error: any) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:', error)
            return {
                success: false,
                error: error.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞'
            }
        }
    }

    private getPaymentInstructions(method: string, amount: number, currency: string, planId: string): string {
        switch (method) {
            case 'bank_transfer':
                return `–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ ${amount} ${currency} –Ω–∞ —Ä–∞—Å—á–µ—Ç–Ω—ã–π —Å—á–µ—Ç –ò–ü –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ ${planId}`
            case 'qr_code':
                return `–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR –∫–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ –±–∞–Ω–∫–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ ${amount} ${currency}`
            case 'sbp':
                return `–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –°–ë–ü (–°–∏—Å—Ç–µ–º–∞ –±—ã—Å—Ç—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π)`
            case 'card':
                return `–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∫–∞—Ä—Ç–æ–π ${amount} ${currency}`
            default:
                return `–û–ø–ª–∞—Ç–∏—Ç–µ ${amount} ${currency} –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ ${planId}`
        }
    }

    private getPaymentMethodName(method: string): string {
        switch (method) {
            case 'bank_transfer': return '–±–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥'
            case 'qr_code': return 'QR –∫–æ–¥'
            case 'sbp': return '–°–ë–ü'
            case 'card': return '–∫–∞—Ä—Ç–∞'
            default: return '–ø–ª–∞—Ç–µ–∂'
        }
    }

    /**
     * üë§ –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ (–¥–ª—è –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
     */
    async createCustomer(data: CreateCustomerData): Promise<TinkoffResponse<Customer>> {
        try {
            console.log('üë§ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤', {
                userId: data.userId,
                email: data.email,
                name: data.name
            })

            return {
                success: true,
                data: {
                    customerId: data.userId, // –ò—Å–ø–æ–ª—å–∑—É–µ–º userId –∫–∞–∫ customerId
                    email: data.email,
                    name: data.name
                },
                message: '–ö–ª–∏–µ–Ω—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤'
            }
        } catch (error: any) {
            console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞:', error)
            return {
                success: false,
                error: error.message || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞'
            }
        }
    }

    /**
     * üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ (—Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
     */
    async getPaymentStatus(paymentId: string): Promise<TinkoffResponse<{ status: string }>> {
        try {
            console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞', { paymentId })

            // –î–ª—è –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é
            // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±–∞–Ω–∫–æ–º
            return {
                success: true,
                data: {
                    status: 'PENDING' // –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                },
                message: '–°—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–≤–æ–¥–∞: –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç.'
            }
        } catch (error: any) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–µ—Ä–µ–≤–æ–¥–∞:', error)
            return {
                success: false,
                error: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–µ—Ä–µ–≤–æ–¥–∞'
            }
        }
    }

    /**
     * üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤
     */
    async handleWebhook(payload: any): Promise<TinkoffResponse> {
        try {
            console.log('üí∞ –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤', payload)

            // –î–ª—è –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤ webhook –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
            // –°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
            return {
                success: true,
                message: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ'
            }
        } catch (error: any) {
            console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error)
            return {
                success: false,
                error: error.message || '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'
            }
        }
    }

    /**
     * üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ webhook (–Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤)
     */
    verifyWebhookSignature(payload: string, signature: string): boolean {
        console.log('üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ webhook (–Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤)')
        return true // –í—Å–µ–≥–¥–∞ true –¥–ª—è –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä API
const paymentAPI = new PaymentAPI()

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
export async function createPaymentSession(data: CreatePaymentData): Promise<TinkoffResponse<PaymentSession>> {
    return paymentAPI.createPayment(data)
}

export async function createTinkoffCustomer(data: CreateCustomerData): Promise<TinkoffResponse<Customer>> {
    return paymentAPI.createCustomer(data)
}

export async function getPaymentStatus(paymentId: string): Promise<TinkoffResponse<{ status: string }>> {
    return paymentAPI.getPaymentStatus(paymentId)
}

export async function handleTinkoffWebhook(payload: any): Promise<TinkoffResponse> {
    return paymentAPI.handleWebhook(payload)
}

export function verifyTinkoffWebhookSignature(payload: string, signature: string): boolean {
    return paymentAPI.verifyWebhookSignature(payload, signature)
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –¥–ª—è –ø–ª–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏
export function getTinkoffPriceId(planId: string): { tinkoffPriceId: string; amount: number; currency: string } | null {
    const plans: Record<string, { tinkoffPriceId: string; amount: number; currency: string }> = {
        'plan-premium': {
            tinkoffPriceId: 'bank_transfer_premium_monthly',
            amount: 999, // 999 —Ä—É–±–ª–µ–π
            currency: 'RUB'
        },
        'plan-pro': {
            tinkoffPriceId: 'bank_transfer_pro_monthly',
            amount: 1999, // 1999 —Ä—É–±–ª–µ–π
            currency: 'RUB'
        },
        'plan-enterprise': {
            tinkoffPriceId: 'bank_transfer_enterprise_monthly',
            amount: 4999, // 4999 —Ä—É–±–ª–µ–π
            currency: 'RUB'
        }
    }

    return plans[planId] || null
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–ª–∞–Ω–∞
export function getPlanName(planId: string): string {
    const planNames: Record<string, string> = {
        'plan-premium': 'Premium',
        'plan-pro': 'Pro',
        'plan-enterprise': 'Enterprise'
    }

    return planNames[planId] || 'Unknown Plan'
}
