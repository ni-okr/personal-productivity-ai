// ü§ñ –°–∏—Å—Ç–µ–º–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ò–ò –º–æ–¥–µ–ª—è–º–∏ (–§–ê–ó–ê 3)
import { Task, TaskForm, UserPreferences } from '@/types'

export type AIProvider = 'openai' | 'anthropic' | 'google' | 'local' | 'mock'
export type AITier = 'free' | 'premium' | 'pro' | 'self-hosted'

export interface AIModelConfig {
    id: string
    name: string
    provider: AIProvider
    tier: AITier
    costPerRequest: number
    maxTokens: number
    capabilities: AICapability[]
    setupInstructions?: string
    apiEndpoint?: string
}

export type AICapability =
    | 'task_generation'
    | 'task_prioritization'
    | 'schedule_optimization'
    | 'productivity_analysis'
    | 'smart_reminders'
    | 'goal_tracking'
    | 'habit_formation'

export interface AIRequest {
    prompt: string
    context?: {
        tasks?: Task[]
        preferences?: UserPreferences
        history?: string[]
    }
    maxTokens?: number
    temperature?: number
}

export interface AIResponse {
    success: boolean
    content: string
    usage?: {
        promptTokens: number
        completionTokens: number
        totalTokens: number
        cost: number
    }
    model: string
    error?: string
}

// –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ –ò–ò
export const AI_MODELS: Record<string, AIModelConfig> = {
    // üÜì FREE TIER
    'mock-ai': {
        id: 'mock-ai',
        name: 'Mock AI (–î–µ–º–æ)',
        provider: 'mock',
        tier: 'free',
        costPerRequest: 0,
        maxTokens: 1000,
        capabilities: ['task_generation', 'task_prioritization']
    },

    // üíé PREMIUM TIER  
    'gpt-4o-mini': {
        id: 'gpt-4o-mini',
        name: 'GPT-4o Mini',
        provider: 'openai',
        tier: 'premium',
        costPerRequest: 0.001,
        maxTokens: 16000,
        capabilities: ['task_generation', 'task_prioritization', 'schedule_optimization', 'smart_reminders'],
        apiEndpoint: 'https://api.openai.com/v1/chat/completions'
    },

    'claude-haiku': {
        id: 'claude-haiku',
        name: 'Claude 3 Haiku',
        provider: 'anthropic',
        tier: 'premium',
        costPerRequest: 0.0008,
        maxTokens: 200000,
        capabilities: ['productivity_analysis', 'goal_tracking', 'habit_formation'],
        apiEndpoint: 'https://api.anthropic.com/v1/messages'
    },

    // üöÄ PRO TIER
    'gpt-4o': {
        id: 'gpt-4o',
        name: 'GPT-4o',
        provider: 'openai',
        tier: 'pro',
        costPerRequest: 0.01,
        maxTokens: 128000,
        capabilities: ['task_generation', 'task_prioritization', 'schedule_optimization', 'productivity_analysis', 'smart_reminders', 'goal_tracking'],
        apiEndpoint: 'https://api.openai.com/v1/chat/completions'
    },

    'claude-sonnet': {
        id: 'claude-sonnet',
        name: 'Claude 3.5 Sonnet',
        provider: 'anthropic',
        tier: 'pro',
        costPerRequest: 0.015,
        maxTokens: 200000,
        capabilities: ['task_generation', 'task_prioritization', 'schedule_optimization', 'productivity_analysis', 'smart_reminders', 'goal_tracking', 'habit_formation'],
        apiEndpoint: 'https://api.anthropic.com/v1/messages'
    },

    'gemini-pro': {
        id: 'gemini-pro',
        name: 'Gemini Pro',
        provider: 'google',
        tier: 'pro',
        costPerRequest: 0.005,
        maxTokens: 32000,
        capabilities: ['schedule_optimization', 'productivity_analysis', 'smart_reminders'],
        apiEndpoint: 'https://generativelanguage.googleapis.com/v1/models/gemini-pro:generateContent'
    },

    // üè† SELF-HOSTED
    'llama-3.1-8b': {
        id: 'llama-3.1-8b',
        name: 'Llama 3.1 8B (Local)',
        provider: 'local',
        tier: 'self-hosted',
        costPerRequest: 0,
        maxTokens: 8192,
        capabilities: ['task_generation', 'task_prioritization'],
        setupInstructions: `
# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ Llama 3.1 8B

## –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- 16GB RAM –º–∏–Ω–∏–º—É–º
- 20GB —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ
- NVIDIA GPU (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è)

## –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ Ollama:
\`\`\`bash
# 1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Ollama
curl -fsSL https://ollama.com/install.sh | sh

# 2. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –º–æ–¥–µ–ª—å
ollama pull llama3.1:8b

# 3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä
ollama serve
\`\`\`

## –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö IP:
1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ngrok –¥–ª—è —Ç—É–Ω–Ω–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è:
   \`ngrok http 11434\`
2. –ò–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ DynamicDNS —Å–µ—Ä–≤–∏—Å
3. –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–Ω–µ—à–Ω–∏–π URL

‚ö†Ô∏è **–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:**
- –ü–æ—Ç—Ä–µ–±–ª—è–µ—Ç 8-12GB RAM
- –ú–µ–¥–ª–µ–Ω–Ω–µ–µ –æ–±–ª–∞—á–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
- –¢—Ä–µ–±—É–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∑–Ω–∞–Ω–∏–π
- –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π - –≤–∞—à–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å

‚úÖ **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:**
- –ü–æ–ª–Ω–∞—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
- –ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –∑–∞–ø—Ä–æ—Å–∞–º
- –†–∞–±–æ—Ç–∞–µ—Ç –æ—Ñ—Ñ–ª–∞–π–Ω
`,
        apiEndpoint: 'http://localhost:11434/api/chat'
    }
}

/**
 * üß† –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ò–ò
 */
export class AIPlanner {
    private model: AIModelConfig
    private apiKey?: string

    constructor(modelId: string, apiKey?: string) {
        this.model = AI_MODELS[modelId]
        if (!this.model) {
            throw new Error(`–ú–æ–¥–µ–ª—å ${modelId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`)
        }
        this.apiKey = apiKey
    }

    /**
     * üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø–∏—Å–∞–Ω–∏—è
     */
    async generateTasks(description: string, context?: {
        existingTasks?: Task[]
        preferences?: UserPreferences
    }): Promise<TaskForm[]> {
        const prompt = this.buildTaskGenerationPrompt(description, context)

        const response = await this.makeRequest({
            prompt,
            context: {
                tasks: context?.existingTasks,
                preferences: context?.preferences
            },
            maxTokens: 1000,
            temperature: 0.7
        })

        if (!response.success) {
            throw new Error(`–û—à–∏–±–∫–∞ –ò–ò: ${response.error}`)
        }

        return this.parseTasksFromResponse(response.content)
    }

    /**
     * üéØ –£–º–Ω–∞—è –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á
     */
    async prioritizeTasks(tasks: Task[], context?: {
        deadline?: Date
        workingHours?: { start: string; end: string }
        currentGoals?: string[]
    }): Promise<Task[]> {
        const prompt = this.buildPrioritizationPrompt(tasks, context)

        const response = await this.makeRequest({
            prompt,
            context: { tasks },
            maxTokens: 800,
            temperature: 0.3
        })

        if (!response.success) {
            throw new Error(`–û—à–∏–±–∫–∞ –ò–ò: ${response.error}`)
        }

        return this.parsePrioritizedTasks(response.content, tasks)
    }

    /**
     * üìä –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
     */
    async analyzeProductivity(
        completedTasks: Task[],
        metrics?: {
            focusTime: number
            distractions: number
            mood: 'low' | 'medium' | 'high'
        }
    ): Promise<{
        score: number
        insights: string[]
        recommendations: string[]
        nextActions: string[]
    }> {
        const prompt = this.buildProductivityAnalysisPrompt(completedTasks, metrics)

        const response = await this.makeRequest({
            prompt,
            context: { tasks: completedTasks },
            maxTokens: 1200,
            temperature: 0.5
        })

        if (!response.success) {
            throw new Error(`–û—à–∏–±–∫–∞ –ò–ò: ${response.error}`)
        }

        return this.parseProductivityAnalysis(response.content)
    }

    /**
     * üí° –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–º–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
     */
    async generateSmartReminders(
        upcomingTasks: Task[],
        userPatterns?: {
            bestFocusHours: number[]
            averageTaskDuration: number
            procrastinationTriggers: string[]
        }
    ): Promise<{
        reminders: Array<{
            task: Task
            message: string
            timing: 'now' | 'in_30min' | 'in_1hour' | 'tomorrow'
            type: 'motivation' | 'preparation' | 'deadline' | 'energy'
        }>
    }> {
        const prompt = this.buildSmartRemindersPrompt(upcomingTasks, userPatterns)

        const response = await this.makeRequest({
            prompt,
            context: { tasks: upcomingTasks },
            maxTokens: 800,
            temperature: 0.6
        })

        if (!response.success) {
            throw new Error(`–û—à–∏–±–∫–∞ –ò–ò: ${response.error}`)
        }

        return this.parseSmartReminders(response.content, upcomingTasks)
    }

    /**
     * üîÑ –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ò–ò
     */
    private async makeRequest(request: AIRequest): Promise<AIResponse> {
        // Mock –æ—Ç–≤–µ—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ (–§–ê–ó–ê 3 - –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ API)
        if (this.model.provider === 'mock') {
            return this.mockAIResponse(request)
        }

        // –†–µ–∞–ª—å–Ω—ã–µ API –≤—ã–∑–æ–≤—ã (TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞)
        switch (this.model.provider) {
            case 'openai':
                return this.callOpenAI(request)
            case 'anthropic':
                return this.callClaude(request)
            case 'google':
                return this.callGemini(request)
            case 'local':
                return this.callLocalModel(request)
            default:
                throw new Error(`–ü—Ä–æ–≤–∞–π–¥–µ—Ä ${this.model.provider} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è`)
        }
    }

    // Mock –æ—Ç–≤–µ—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    private mockAIResponse(request: AIRequest): AIResponse {
        const mockResponses = {
            task_generation: `[
        {
          "title": "–ò–∑—É—á–∏—Ç—å –æ—Å–Ω–æ–≤—ã TypeScript",
          "description": "–ü—Ä–æ–π—Ç–∏ –±–∞–∑–æ–≤—ã–π –∫—É—Ä—Å –∏ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è",
          "priority": "high",
          "estimatedMinutes": 120,
          "tags": ["–æ–±—É—á–µ–Ω–∏–µ", "—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞"]
        },
        {
          "title": "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ–µ–∫—Ç–Ω—É—é —Å—Ä–µ–¥—É",
          "description": "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏",
          "priority": "medium",
          "estimatedMinutes": 45,
          "tags": ["–Ω–∞—Å—Ç—Ä–æ–π–∫–∞", "–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"]
        }
      ]`,

            productivity_analysis: `{
        "score": 78,
        "insights": [
          "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ 85% –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á",
          "–ù–∞–∏–±–æ–ª–µ–µ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è: 10:00-12:00",
          "–°–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ª—É—á—à–µ —É–¥–∞—é—Ç—Å—è —É—Ç—Ä–æ–º"
        ],
        "recommendations": [
          "–ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –≤–∞–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞ —É—Ç—Ä–æ",
          "–î–æ–±–∞–≤—å—Ç–µ 15-–º–∏–Ω—É—Ç–Ω—ã–µ –ø–µ—Ä–µ—Ä—ã–≤—ã –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏",
          "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Ö–Ω–∏–∫—É Pomodoro –¥–ª—è —Ñ–æ–∫—É—Å–∞"
        ],
        "nextActions": [
          "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º—É—é –≤–∞–∂–Ω—É—é –∑–∞–¥–∞—á—É –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –Ω–∞ 10:00",
          "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ —Å –≤–µ—á–µ—Ä–∞"
        ]
      }`,

            smart_reminders: `{
        "reminders": [
          {
            "taskId": "task-1",
            "message": "üí™ –°–∞–º–æ–µ –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç—å—Å—è —ç—Ç–æ–π –∑–∞–¥–∞—á–µ–π! –£ –≤–∞—Å —Å–µ–π—á–∞—Å –ø–∏–∫ —ç–Ω–µ—Ä–≥–∏–∏",
            "timing": "now",
            "type": "energy"
          },
          {
            "taskId": "task-2", 
            "message": "üìã –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–π –∑–∞–¥–∞—á–∏",
            "timing": "in_1hour",
            "type": "preparation"
          }
        ]
      }`
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞ –ø–æ –ø—Ä–æ–º–ø—Ç—É
        let responseType = 'task_generation'
        if (request.prompt.includes('productivity') || request.prompt.includes('–∞–Ω–∞–ª–∏–∑')) {
            responseType = 'productivity_analysis'
        } else if (request.prompt.includes('reminder') || request.prompt.includes('–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ')) {
            responseType = 'smart_reminders'
        }

        return {
            success: true,
            content: mockResponses[responseType as keyof typeof mockResponses] || mockResponses.task_generation,
            model: this.model.id,
            usage: {
                promptTokens: 150,
                completionTokens: 200,
                totalTokens: 350,
                cost: this.model.costPerRequest
            }
        }
    }

    // –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö API (TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å)
    private async callOpenAI(request: AIRequest): Promise<AIResponse> {
        throw new Error('OpenAI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')
    }

    private async callClaude(request: AIRequest): Promise<AIResponse> {
        throw new Error('Claude –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')
    }

    private async callGemini(request: AIRequest): Promise<AIResponse> {
        throw new Error('Gemini –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')
    }

    private async callLocalModel(request: AIRequest): Promise<AIResponse> {
        throw new Error('–õ–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤
    private buildTaskGenerationPrompt(description: string, context?: any): string {
        return `
–°–æ–∑–¥–∞–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø–∏—Å–∞–Ω–∏—è: "${description}"

–ö–æ–Ω—Ç–µ–∫—Å—Ç:
- –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏: ${context?.existingTasks?.length || 0}
- –†–∞–±–æ—á–∏–µ —á–∞—Å—ã: ${context?.preferences?.workingHours?.start || '09:00'} - ${context?.preferences?.workingHours?.end || '18:00'}

–í–µ—Ä–Ω–∏ JSON –º–∞—Å—Å–∏–≤ –∑–∞–¥–∞—á —Å –ø–æ–ª—è–º–∏: title, description, priority, estimatedMinutes, tags
–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã: low, medium, high, urgent
`
    }

    private buildPrioritizationPrompt(tasks: Task[], context?: any): string {
        return `
–û—Ç—Å–æ—Ä—Ç–∏—Ä—É–π –∑–∞–¥–∞—á–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏ –≤–∞–∂–Ω–æ—Å—Ç–∏:

–ó–∞–¥–∞—á–∏: ${JSON.stringify(tasks.map(t => ({ id: t.id, title: t.title, priority: t.priority })))}

–ö–æ–Ω—Ç–µ–∫—Å—Ç:
- –î–µ–¥–ª–∞–π–Ω: ${context?.deadline || '–Ω–µ —É–∫–∞–∑–∞–Ω'}
- –†–∞–±–æ—á–∏–µ —á–∞—Å—ã: ${JSON.stringify(context?.workingHours)}
- –¶–µ–ª–∏: ${context?.currentGoals?.join(', ') || '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}

–í–µ—Ä–Ω–∏ –º–∞—Å—Å–∏–≤ ID –∑–∞–¥–∞—á –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
`
    }

    private buildProductivityAnalysisPrompt(tasks: Task[], metrics?: any): string {
        return `
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á:

–ó–∞–¥–∞—á–∏: ${JSON.stringify(tasks)}
–ú–µ—Ç—Ä–∏–∫–∏: ${JSON.stringify(metrics)}

–í–µ—Ä–Ω–∏ JSON —Å –ø–æ–ª—è–º–∏: score (0-100), insights (–º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫), recommendations (–º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫), nextActions (–º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫)
`
    }

    private buildSmartRemindersPrompt(tasks: Task[], patterns?: any): string {
        return `
–°–æ–∑–¥–∞–π —É–º–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á:

–ó–∞–¥–∞—á–∏: ${JSON.stringify(tasks)}
–ü–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${JSON.stringify(patterns)}

–í–µ—Ä–Ω–∏ JSON —Å –º–∞—Å—Å–∏–≤–æ–º reminders, –∫–∞–∂–¥–æ–µ —Å –ø–æ–ª—è–º–∏: taskId, message, timing, type
`
    }

    // –ú–µ—Ç–æ–¥—ã –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–æ–≤
    private parseTasksFromResponse(content: string): TaskForm[] {
        try {
            return JSON.parse(content)
        } catch {
            return []
        }
    }

    private parsePrioritizedTasks(content: string, originalTasks: Task[]): Task[] {
        try {
            const taskIds = JSON.parse(content)
            return taskIds.map((id: string) => originalTasks.find(t => t.id === id)).filter(Boolean)
        } catch {
            return originalTasks
        }
    }

    private parseProductivityAnalysis(content: string) {
        try {
            return JSON.parse(content)
        } catch {
            return {
                score: 50,
                insights: ['–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞'],
                recommendations: ['–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ'],
                nextActions: []
            }
        }
    }

    private parseSmartReminders(content: string, tasks: Task[]) {
        try {
            const data = JSON.parse(content)
            return {
                reminders: data.reminders.map((r: any) => ({
                    task: tasks.find(t => t.id === r.taskId),
                    message: r.message,
                    timing: r.timing,
                    type: r.type
                }))
            }
        } catch {
            return { reminders: [] }
        }
    }
}

/**
 * üí∞ –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –∏ –æ–ø–ª–∞—Ç–æ–π
 */
export class AISubscriptionManager {
    private userTier: AITier = 'free'

    constructor(userTier: AITier = 'free') {
        this.userTier = userTier
    }

    getAvailableModels(): AIModelConfig[] {
        return Object.values(AI_MODELS).filter(model => {
            switch (this.userTier) {
                case 'free':
                    return model.tier === 'free'
                case 'premium':
                    return ['free', 'premium'].includes(model.tier)
                case 'pro':
                    return ['free', 'premium', 'pro'].includes(model.tier)
                case 'self-hosted':
                    return true // –í—Å–µ –º–æ–¥–µ–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
                default:
                    return model.tier === 'free'
            }
        })
    }

    async upgradeToModel(modelId: string): Promise<{
        success: boolean
        paymentUrl?: string
        apiKey?: string
        error?: string
    }> {
        const model = AI_MODELS[modelId]
        if (!model) {
            return { success: false, error: '–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' }
        }

        // Mock –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        return {
            success: true,
            paymentUrl: `https://billing.personal-ai.com/upgrade/${modelId}`,
            apiKey: 'demo-api-key-' + modelId
        }
    }

    calculateMonthlyCost(usage: { requests: number; tokens: number }): number {
        // –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        return usage.requests * 0.002 + usage.tokens * 0.00001
    }
}
