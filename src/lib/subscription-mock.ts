// üß™ Mock —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫ –±–µ–∑ Supabase

import { Subscription, SubscriptionTier, SubscriptionStatus, SubscriptionPlan } from '@/types'

// Mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫
const mockSubscriptions: Subscription[] = [
  {
    id: 'mock-sub-1',
    userId: 'mock-user-1',
    tier: 'free',
    status: 'active',
    currentPeriodStart: new Date('2024-09-01T00:00:00Z'),
    currentPeriodEnd: new Date('2025-09-01T00:00:00Z'),
    cancelAtPeriodEnd: false,
    createdAt: new Date('2024-09-01T00:00:00Z'),
    updatedAt: new Date('2024-09-01T00:00:00Z')
  }
]

// Mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–ª–∞–Ω–æ–≤ –ø–æ–¥–ø–∏—Å–æ–∫
const mockSubscriptionPlans: SubscriptionPlan[] = [
  {
    id: 'plan-free',
    name: 'Free',
    tier: 'free',
    price: 0,
    currency: 'RUB',
    interval: 'month',
    features: [
      '–î–æ 50 –∑–∞–¥–∞—á –≤ –º–µ—Å—è—Ü',
      '–ë–∞–∑–æ–≤–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ',
      'Email –ø–æ–¥–¥–µ—Ä–∂–∫–∞'
    ],
    limits: {
      tasks: 50,
      aiRequests: 10,
      storage: 100
    },
    tinkoffPriceId: 'free-plan',
    isActive: true,
    description: '–ë–∞–∑–æ–≤—ã–π –ø–ª–∞–Ω –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã'
  },
  {
    id: 'plan-premium',
    name: 'Premium',
    tier: 'premium',
    price: 99900, // 999 —Ä—É–±–ª–µ–π –≤ –∫–æ–ø–µ–π–∫–∞—Ö
    currency: 'RUB',
    interval: 'month',
    features: [
      '–î–æ 500 –∑–∞–¥–∞—á –≤ –º–µ—Å—è—Ü',
      '–ò–ò –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫',
      '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
      '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏'
    ],
    limits: {
      tasks: 500,
      aiRequests: 100,
      storage: 1000
    },
    tinkoffPriceId: 'premium-plan',
    isActive: true,
    description: '–î–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
  },
  {
    id: 'plan-pro',
    name: 'Pro',
    tier: 'pro',
    price: 199900, // 1999 —Ä—É–±–ª–µ–π –≤ –∫–æ–ø–µ–π–∫–∞—Ö
    currency: 'RUB',
    interval: 'month',
    features: [
      '–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏',
      '–í—Å–µ –ò–ò –º–æ–¥–µ–ª–∏',
      '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä',
      'API –¥–æ—Å—Ç—É–ø',
      '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏'
    ],
    limits: {
      tasks: -1, // -1 –æ–∑–Ω–∞—á–∞–µ—Ç –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ
      aiRequests: -1,
      storage: 10000
    },
    tinkoffPriceId: 'pro-plan',
    isActive: true,
    description: '–î–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤ –∏ –∫–æ–º–∞–Ω–¥'
  }
]

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
export async function mockGetSubscription(userId: string): Promise<{
  success: boolean
  subscription?: Subscription
  error?: string
}> {
  console.log('üß™ MOCK –†–ï–ñ–ò–ú: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Supabase')
  
  const subscription = mockSubscriptions.find(sub => sub.userId === userId)
  
  if (!subscription) {
    return {
      success: false,
      error: '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
    }
  }
  
  return {
    success: true,
    subscription
  }
}

export async function mockCreateSubscription(userId: string, tier: SubscriptionTier): Promise<{
  success: boolean
  subscription?: Subscription
  error?: string
}> {
  console.log('üß™ MOCK –†–ï–ñ–ò–ú: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Supabase')
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–¥–ø–∏—Å–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const existingSubscription = mockSubscriptions.find(sub => sub.userId === userId)
  if (existingSubscription) {
    return {
      success: false,
      error: '–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞'
    }
  }
  
  const now = new Date()
  const nextMonth = new Date(now)
  nextMonth.setMonth(nextMonth.getMonth() + 1)
  
  const newSubscription: Subscription = {
    id: `mock-sub-${Date.now()}-${Math.random().toString(36).substring(7)}`,
    userId: userId,
    tier: tier,
    status: 'active',
    currentPeriodStart: now,
    currentPeriodEnd: nextMonth,
    cancelAtPeriodEnd: false,
    createdAt: now,
    updatedAt: now
  }
  
  mockSubscriptions.push(newSubscription)
  
  return {
    success: true,
    subscription: newSubscription
  }
}

export async function mockUpdateSubscription(subscriptionId: string, updates: Partial<Subscription>): Promise<{
  success: boolean
  subscription?: Subscription
  error?: string
}> {
  console.log('üß™ MOCK –†–ï–ñ–ò–ú: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Supabase')
  
  const subscriptionIndex = mockSubscriptions.findIndex(sub => sub.id === subscriptionId)
  if (subscriptionIndex === -1) {
    return {
      success: false,
      error: '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
    }
  }
  
  const updatedSubscription = {
    ...mockSubscriptions[subscriptionIndex],
    ...updates,
    updatedAt: new Date()
  }
  
  mockSubscriptions[subscriptionIndex] = updatedSubscription
  
  return {
    success: true,
    subscription: updatedSubscription
  }
}

export async function mockCancelSubscription(subscriptionId: string): Promise<{
  success: boolean
  subscription?: Subscription
  error?: string
}> {
  console.log('üß™ MOCK –†–ï–ñ–ò–ú: –û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Supabase')
  
  const subscriptionIndex = mockSubscriptions.findIndex(sub => sub.id === subscriptionId)
  if (subscriptionIndex === -1) {
    return {
      success: false,
      error: '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
    }
  }
  
  const updatedSubscription = {
    ...mockSubscriptions[subscriptionIndex],
    status: 'canceled' as SubscriptionStatus,
    cancelAtPeriodEnd: true,
    updatedAt: new Date()
  }
  
  mockSubscriptions[subscriptionIndex] = updatedSubscription
  
  return {
    success: true,
    subscription: updatedSubscription
  }
}

export async function mockGetSubscriptionPlans(): Promise<{
  success: boolean
  plans?: SubscriptionPlan[]
  error?: string
}> {
  console.log('üß™ MOCK –†–ï–ñ–ò–ú: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞–Ω–æ–≤ –ø–æ–¥–ø–∏—Å–æ–∫ –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Supabase')
  
  return {
    success: true,
    plans: mockSubscriptionPlans.filter(plan => plan.isActive)
  }
}

export async function mockGetSubscriptionStatus(userId: string): Promise<{
  success: boolean
  status?: {
    tier: SubscriptionTier
    status: SubscriptionStatus
    isActive: boolean
    canUpgrade: boolean
    canDowngrade: boolean
    limits: {
      tasks: number
      aiRequests: number
      storage: number
    }
    usage: {
      tasks: number
      aiRequests: number
      storage: number
    }
  }
  error?: string
}> {
  console.log('üß™ MOCK –†–ï–ñ–ò–ú: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Supabase')
  
  const subscription = mockSubscriptions.find(sub => sub.userId === userId)
  
  if (!subscription) {
    return {
      success: false,
      error: '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
    }
  }
  
  const plan = mockSubscriptionPlans.find(p => p.tier === subscription.tier)
  if (!plan) {
    return {
      success: false,
      error: '–ü–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω'
    }
  }
  
  const isActive = subscription.status === 'active' && subscription.currentPeriodEnd > new Date()
  
  return {
    success: true,
    status: {
      tier: subscription.tier,
      status: subscription.status,
      isActive,
      canUpgrade: subscription.tier === 'free' || subscription.tier === 'premium',
      canDowngrade: subscription.tier === 'pro' || subscription.tier === 'premium',
      limits: plan.limits,
      usage: {
        tasks: 15, // Mock –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
        aiRequests: 3,
        storage: 25
      }
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ mock –¥–∞–Ω–Ω—ã—Ö
export function clearMockSubscriptions(): void {
  console.log('üß™ MOCK –†–ï–ñ–ò–ú: –û—á–∏—Å—Ç–∫–∞ mock –ø–æ–¥–ø–∏—Å–æ–∫')
  mockSubscriptions.length = 0
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
export function addMockSubscription(subscription: Subscription): void {
  console.log('üß™ MOCK –†–ï–ñ–ò–ú: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏')
  mockSubscriptions.push(subscription)
}
