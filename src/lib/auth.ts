// üîê –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å Supabase Auth
import { User } from '@/types'
import { validateEmail, validateName } from '@/utils/validation'
// –£—Å–ª–æ–≤–Ω—ã–π –∏–º–ø–æ—Ä—Ç Supabase –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ñ—É–Ω–∫—Ü–∏—è—Ö

// üö® –ó–ê–©–ò–¢–ê –û–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –° –†–ï–ê–õ–¨–ù–´–ú–ò EMAIL
const DEV_MODE = process.env.NEXT_PUBLIC_DEV_MODE === 'true'
const DISABLE_EMAIL = process.env.NEXT_PUBLIC_DISABLE_EMAIL === 'true'
const TEST_EMAIL_DOMAIN = process.env.TEST_EMAIL_DOMAIN || '@example.test'

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–µ email –∞–¥—Ä–µ—Å–∞
const isTestEmail = (email: string): boolean => {
    return email.endsWith('@example.test') ||
        email.endsWith('@test.local') ||
        email.includes('test@') ||
        email.includes('demo@')
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ email –∞–¥—Ä–µ—Å–∞ (–∑–∞–ø—Ä–µ—â–µ–Ω—ã –≤ dev —Ä–µ–∂–∏–º–µ)
const isRealEmail = (email: string): boolean => {
    const realDomains = ['@gmail.com', '@yahoo.com', '@outlook.com', '@hotmail.com', '@yandex.ru', '@mail.ru']
    return realDomains.some(domain => email.endsWith(domain))
}

export interface AuthUser {
    id: string
    email: string
    name: string
    subscription: 'free' | 'premium' | 'pro'
    createdAt: Date
    lastLoginAt: Date
}

export interface SignUpData {
    email: string
    password: string
    name: string
}

export interface SignInData {
    email: string
    password: string
}

export interface AuthResponse {
    success: boolean
    user?: User
    error?: string
    message?: string
}

/**
 * üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export async function signUp({ email, password, name }: SignUpData): Promise<{ success: boolean; user?: User; error?: string }> {
    try {
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        const emailValidation = validateEmail(email)
        if (!emailValidation.isValid) {
            return {
                success: false,
                error: emailValidation.errors[0]
            }
        }

        // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è –¥–ª—è MVP
        if (!password || password.length < 3) {
            return {
                success: false,
                error: '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞'
            }
        }

        const nameValidation = validateName(name)
        if (!nameValidation.isValid) {
            return {
                success: false,
                error: nameValidation.errors[0]
            }
        }

        // üö® MOCK –†–ï–ñ–ò–ú: –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Supabase
        if (DISABLE_EMAIL) {
            const { mockSignUpWithState } = await import('../../tests/mocks/auth-mock')
            return mockSignUpWithState(email, password, name)
        }

        // üö® –ó–ê–©–ò–¢–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ email –≤ dev —Ä–µ–∂–∏–º–µ
        if (DEV_MODE && isRealEmail(email)) {
            console.log('‚ö†Ô∏è –†–µ–∞–ª—å–Ω—ã–π email –≤ dev —Ä–µ–∂–∏–º–µ, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ mock')
            return mockSignUpWithState(email, password, name)
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase
        if (!process.env.NEXT_PUBLIC_SUPABASE_URL || !process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY) {
            console.log('‚ö†Ô∏è –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º mock')
            return mockSignUpWithState(email, password, name)
        }

        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Supabase
        const { getSupabaseClient } = await import('./supabase')
        const supabase = getSupabaseClient()

        // 1. –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Supabase Auth
        const { data: authData, error: authError } = await supabase.auth.signUp({
            email,
            password,
            options: {
                data: {
                    name: name
                }
            }
        })

        if (authError) {
            return {
                success: false,
                error: getAuthErrorMessage(authError.message)
            }
        }

        if (!authData.user) {
            return {
                success: false,
                error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
            }
        }

        // 2. –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞—à–µ–π —Ç–∞–±–ª–∏—Ü–µ users
        // RLS –ø–æ–ª–∏—Ç–∏–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã - —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –≤–∫–ª—é—á–µ–Ω–æ
        const userProfile = {
            id: authData.user.id,
            email: authData.user.email!,
            name: name,
            subscription: 'free' as const,
            preferences: {
                workingHours: { start: '09:00', end: '18:00' },
                focusTime: 25,
                breakTime: 5,
                notifications: { email: true, push: true, desktop: true },
                aiCoaching: { enabled: true, frequency: 'medium', style: 'gentle' }
            }
        }

        const { error: profileError } = await (supabase as any)
            .from('users')
            .insert(userProfile)

        if (profileError) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', profileError)
            // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ—Ñ–∏–ª—å –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø–æ–∑–∂–µ
        }

        return {
            success: true,
            user: authData.user.email_confirmed_at ? {
                id: authData.user.id,
                email: authData.user.email!,
                name: name,
                avatar: authData.user.user_metadata?.avatar_url,
                timezone: 'Europe/Moscow',
                subscription: 'free',
                subscriptionStatus: 'active',
                preferences: {
                    workingHours: { start: '09:00', end: '18:00' },
                    focusTime: 25,
                    breakTime: 5,
                    notifications: { email: true, push: true, desktop: true },
                    aiCoaching: { enabled: true, frequency: 'medium', style: 'gentle' }
                },
                createdAt: new Date(),
                updatedAt: new Date()
            } : undefined
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error)
        return {
            success: false,
            error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'
        }
    }
}

/**
 * üö™ –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export async function signIn({ email, password }: SignInData): Promise<{ success: boolean; user?: User; error?: string }> {
    try {
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        const emailValidation = validateEmail(email)
        if (!emailValidation.isValid) {
            return {
                success: false,
                error: emailValidation.errors[0]
            }
        }

        if (!password || password.length === 0) {
            return {
                success: false,
                error: '–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
            }
        }

        // üö® MOCK –†–ï–ñ–ò–ú: –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Supabase
        if (DISABLE_EMAIL) {
            const { mockSignInWithState } = await import('../../tests/mocks/auth-mock')
            return mockSignInWithState(email, password)
        }

        // üö® –ó–ê–©–ò–¢–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ email –≤ dev —Ä–µ–∂–∏–º–µ
        if (DEV_MODE && isRealEmail(email)) {
            console.log('‚ö†Ô∏è –†–µ–∞–ª—å–Ω—ã–π email –≤ dev —Ä–µ–∂–∏–º–µ, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ mock')
            return mockSignInWithState(email, password)
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase
        if (!process.env.NEXT_PUBLIC_SUPABASE_URL || !process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY) {
            console.log('‚ö†Ô∏è –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º mock')
            return mockSignInWithState(email, password)
        }

        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Supabase
        const { getSupabaseClient } = await import('./supabase')
        const supabase = getSupabaseClient()

        const { data, error } = await supabase.auth.signInWithPassword({
            email,
            password
        })

        if (error) {
            return {
                success: false,
                error: getAuthErrorMessage(error.message)
            }
        }

        if (!data.user) {
            return {
                success: false,
                error: '–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É'
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
        await (supabase as any)
            .from('users')
            .update({ last_login_at: new Date().toISOString() })
            .eq('id', data.user.id)

        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userProfileResponse = await getUserProfile(data.user.id)

        return {
            success: true,
            user: userProfileResponse.success && userProfileResponse.user ? userProfileResponse.user : {
                id: data.user.id,
                email: data.user.email!,
                name: data.user.user_metadata?.name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                avatar: data.user.user_metadata?.avatar_url,
                timezone: 'Europe/Moscow',
                subscription: 'free',
                subscriptionStatus: 'active',
                preferences: {
                    workingHours: { start: '09:00', end: '18:00' },
                    focusTime: 25,
                    breakTime: 5,
                    notifications: { email: true, push: true, desktop: true },
                    aiCoaching: { enabled: true, frequency: 'medium', style: 'gentle' }
                },
                createdAt: new Date(),
                updatedAt: new Date()
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error)
        return {
            success: false,
            error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ'
        }
    }
}

/**
 * üö™ –í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export async function signOut(): Promise<AuthResponse> {
    try {
        // üö® MOCK –†–ï–ñ–ò–ú: –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Supabase
        if (DISABLE_EMAIL) {
            const { mockSignOutWithState } = await import('../../tests/mocks/auth-mock')
            return mockSignOutWithState()
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase
        if (!process.env.NEXT_PUBLIC_SUPABASE_URL || !process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY) {
            console.log('‚ö†Ô∏è –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º mock')
            return mockSignOutWithState()
        }

        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Supabase
        const { getSupabaseClient } = await import('./supabase')
        const supabase = getSupabaseClient()

        const { error } = await supabase.auth.signOut()

        if (error) {
            return {
                success: false,
                error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ'
            }
        }

        return {
            success: true,
            message: '–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã'
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', error)
        return {
            success: false,
            error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ'
        }
    }
}

/**
 * üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export async function getUserProfile(userId: string): Promise<AuthResponse> {
    try {
        // üö® MOCK –†–ï–ñ–ò–ú: –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Supabase
        if (DISABLE_EMAIL) {
            console.log('üß™ MOCK –†–ï–ñ–ò–ú: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Supabase')
            const { mockGetUserProfile } = await import('../../tests/mocks/auth-mock')
            return await mockGetUserProfile(userId)
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase
        if (!process.env.NEXT_PUBLIC_SUPABASE_URL || !process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY) {
            console.log('‚ö†Ô∏è –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã')
            return {
                success: false,
                error: '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
            }
        }

        const { getSupabaseClient } = await import('./supabase')
        const supabase = getSupabaseClient()

        const { data, error } = await (supabase as any)
            .from('users')
            .select('*')
            .eq('id', userId)
            .single()

        if (error || !data) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error)
            return {
                success: false,
                error: '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
            }
        }

        return {
            success: true,
            user: {
                id: data.id,
                email: data.email,
                name: data.name,
                avatar: data.avatar,
                timezone: data.timezone || 'Europe/Moscow',
                subscription: data.subscription || 'free',
                subscriptionStatus: data.subscription_status || 'active',
                preferences: data.preferences || {
                    workingHours: { start: '09:00', end: '18:00' },
                    focusTime: 25,
                    breakTime: 5,
                    notifications: { email: true, push: true, desktop: true },
                    aiCoaching: { enabled: true, frequency: 'medium', style: 'gentle' }
                },
                createdAt: new Date(data.created_at),
                updatedAt: new Date(data.updated_at || data.created_at)
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error)
        return {
            success: false,
            error: '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
        }
    }
}

/**
 * üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export async function updateUserProfile(
    userId: string,
    updates: Partial<Pick<AuthUser, 'name' | 'subscription'>>
): Promise<AuthResponse> {
    try {
        // üö® MOCK –†–ï–ñ–ò–ú: –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Supabase
        if (DISABLE_EMAIL) {
            console.log('üß™ MOCK –†–ï–ñ–ò–ú: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Supabase')
            const { mockUpdateUserProfile } = await import('../../tests/mocks/auth-mock')
            return await mockUpdateUserProfile(userId, updates)
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase
        if (!process.env.NEXT_PUBLIC_SUPABASE_URL || !process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY) {
            console.log('‚ö†Ô∏è –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º mock')
            return await mockUpdateUserProfile(userId, updates)
        }

        const { getSupabaseClient } = await import('./supabase')
        const supabase = getSupabaseClient()

        const { data, error } = await (supabase as any)
            .from('users')
            .update(updates)
            .eq('id', userId)
            .select()
            .single()

        if (error) {
            return {
                success: false,
                error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å'
            }
        }

        return {
            success: true,
            message: '–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω',
            user: {
                id: data.id,
                email: data.email,
                name: data.name,
                avatar: data.avatar,
                timezone: data.timezone || 'Europe/Moscow',
                subscription: data.subscription,
                subscriptionStatus: data.subscription_status || 'active',
                preferences: data.preferences || {
                    workingHours: { start: '09:00', end: '18:00' },
                    focusTime: 25,
                    breakTime: 5,
                    notifications: { email: true, push: true, desktop: true },
                    aiCoaching: { enabled: true, frequency: 'medium', style: 'gentle' }
                },
                createdAt: new Date(data.created_at),
                updatedAt: new Date(data.updated_at || data.created_at)
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error)
        return {
            success: false,
            error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è'
        }
    }
}

/**
 * üîê –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è
 */
export async function resetPassword(email: string): Promise<AuthResponse> {
    try {
        // üö® MOCK –†–ï–ñ–ò–ú: –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Supabase
        if (DISABLE_EMAIL) {
            console.log('üß™ MOCK –†–ï–ñ–ò–ú: –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Supabase')
            const { mockResetPassword } = await import('../../tests/mocks/auth-mock')
            return mockResetPassword(email)
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase
        if (!process.env.NEXT_PUBLIC_SUPABASE_URL || !process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY) {
            console.log('‚ö†Ô∏è –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º mock')
            return {
                success: true,
                message: 'Mock –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Å–±—Ä–æ—Å—É –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã'
            }
        }

        const { getSupabaseClient } = await import('./supabase')
        const supabase = getSupabaseClient()

        const { error } = await supabase.auth.resetPasswordForEmail(email, {
            redirectTo: `${typeof window !== 'undefined' ? window.location.origin : process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000'}/reset-password`
        })

        if (error) {
            return {
                success: false,
                error: getAuthErrorMessage(error.message)
            }
        }

        return {
            success: true,
            message: '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Å–±—Ä–æ—Å—É –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ email'
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è:', error)
        return {
            success: false,
            error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø–∞—Ä–æ–ª—è'
        }
    }
}

/**
 * üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞)
 */
export async function getCurrentUser(): Promise<User | null> {
    try {
        // üö® MOCK –†–ï–ñ–ò–ú: –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Supabase
        if (DISABLE_EMAIL) {
            const { mockGetCurrentUser } = await import('../../tests/mocks/auth-mock')
            return mockGetCurrentUser()
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase
        if (!process.env.NEXT_PUBLIC_SUPABASE_URL || !process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY) {
            console.log('‚ö†Ô∏è –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã')
            return null
        }

        const { getSupabaseClient } = await import('./supabase')
        const supabase = getSupabaseClient()

        const { data: { user }, error } = await supabase.auth.getUser()

        if (error || !user) {
            return null
        }

        const userProfileResponse = await getUserProfile(user.id)
        return userProfileResponse.success && userProfileResponse.user ? userProfileResponse.user : null
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error)
        return null
    }
}

/**
 * üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ API –∑–∞–ø—Ä–æ—Å–∞ (–¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞)
 */
export async function getCurrentUserFromRequest(request: Request): Promise<User | null> {
    try {
        // üö® MOCK –†–ï–ñ–ò–ú: –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Supabase
        if (DISABLE_EMAIL) {
            return mockGetCurrentUser()
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase
        if (!process.env.NEXT_PUBLIC_SUPABASE_URL || !process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY) {
            console.log('‚ö†Ô∏è –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã')
            return null
        }

        // –ü–æ–ª—É—á–∞–µ–º JWT —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Authorization
        const authHeader = request.headers.get('authorization')
        if (!authHeader || !authHeader.startsWith('Bearer ')) {
            console.log('‚ö†Ô∏è –ù–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ Authorization')
            return null
        }

        const token = authHeader.replace('Bearer ', '')
        
        // –°–æ–∑–¥–∞–µ–º Supabase –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
        const { createClient } = await import('@supabase/supabase-js')
        const supabase = createClient(
            process.env.NEXT_PUBLIC_SUPABASE_URL,
            process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
        )

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º JWT —Ç–æ–∫–µ–Ω
        const { data: { user }, error } = await supabase.auth.getUser(token)

        if (error || !user) {
            console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ JWT —Ç–æ–∫–µ–Ω–∞:', error)
            return null
        }

        const userProfileResponse = await getUserProfile(user.id)
        return userProfileResponse.success && userProfileResponse.user ? userProfileResponse.user : null
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∑–∞–ø—Ä–æ—Å–∞:', error)
        return null
    }
}

/**
 * üìß –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email
 */
export async function confirmEmail(token: string): Promise<AuthResponse> {
    try {
        // üö® MOCK –†–ï–ñ–ò–ú: –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Supabase
        if (DISABLE_EMAIL) {
            console.log('üß™ MOCK –†–ï–ñ–ò–ú: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Supabase')
            const { mockConfirmEmail } = await import('../../tests/mocks/auth-mock')
            return mockConfirmEmail(token)
        }

        // –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è build
        /*
        const { data, error } = await supabase.auth.verifyOtp({
            token_hash: token,
            type: 'signup'
        })

        if (error) {
            return {
                success: false,
                error: '–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π —Ç–æ–∫–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è'
            }
        }

        const userProfile = data.user ? await getUserProfile(data.user.id) : null
        return {
            success: true,
            message: 'Email —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!',
            user: userProfile || undefined
        }
        */

        // –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞
        return {
            success: true,
            message: 'Email —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!'
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email:', error)
        return {
            success: false,
            error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ email'
        }
    }
}

/**
 * üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
 */
export async function updatePassword(newPassword: string): Promise<AuthResponse> {
    try {
        if (DISABLE_EMAIL) {
            const { mockUpdatePassword } = await import('../../tests/mocks/auth-mock')
            return mockUpdatePassword(newPassword)
        }
        // Real update via Supabase
        const { error } = await supabase.auth.updateUser({ password: newPassword })
        if (error) {
            return { success: false, error: getAuthErrorMessage(error.message) }
        }
        return { success: true, message: '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω' }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è:', error)
        return { success: false, error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è' }
    }
}

/**
 * üì± –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 */
export function onAuthStateChange(callback: (user: User | null) => void) {
  if (DISABLE_EMAIL) {
    // Mock mode: use test mocks
    return import('../../tests/mocks/auth-mock').then(({ mockOnAuthStateChange }) => mockOnAuthStateChange(callback))
  }
  // Real mode: subscribe to Supabase auth changes
  return supabase.auth.onAuthStateChange((event, session) => {
    if (session?.user) {
      import('./auth').then(({ getUserProfile }) => {
        getUserProfile(session.user.id).then(profile => callback(profile))
      })
    } else {
      callback(null)
    }
  })
}

/**
 * üîê –í—Ö–æ–¥ —á–µ—Ä–µ–∑ Google
 */
export async function signInWithGoogle(): Promise<AuthResponse> {
    try {
        // üö® MOCK –†–ï–ñ–ò–ú: –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Supabase
        if (DISABLE_EMAIL) {
            console.log('üß™ MOCK –†–ï–ñ–ò–ú: –í—Ö–æ–¥ —á–µ—Ä–µ–∑ Google –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Supabase')

            // –°–æ–∑–¥–∞–µ–º mock –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            const mockUser = {
                id: 'mock-google-user-' + Date.now(),
                email: 'google.user@example.test',
                name: 'Google User',
                timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
                subscription: 'free' as const,
                subscriptionStatus: 'active' as const,
                preferences: {
                    workingHours: {
                        start: '09:00',
                        end: '18:00'
                    },
                    focusTime: 25,
                    breakTime: 5,
                    notifications: {
                        email: true,
                        push: true,
                        desktop: true
                    },
                    aiCoaching: {
                        enabled: true,
                        frequency: 'medium' as const,
                        style: 'gentle' as const
                    }
                },
                createdAt: new Date(),
                updatedAt: new Date()
            }

            return {
                success: true,
                user: mockUser,
                message: 'Mock –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ Google —É—Å–ø–µ—à–µ–Ω'
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase
        if (!process.env.NEXT_PUBLIC_SUPABASE_URL || !process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY) {
            console.log('‚ö†Ô∏è –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã')
            return {
                success: false,
                error: 'Google OAuth –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
            }
        }

        // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç Supabase –∫–ª–∏–µ–Ω—Ç–∞
        const { createClient } = await import('@supabase/supabase-js')
        const supabase = createClient(
            process.env.NEXT_PUBLIC_SUPABASE_URL,
            process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
        )

        // üö® –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ê–ï–ú GOOGLE OAUTH - –ù–ï –ù–ê–°–¢–†–û–ï–ù –í SUPABASE
        console.log('‚ö†Ô∏è Google OAuth –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω - –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ Supabase')
        return {
            success: false,
            error: 'Google OAuth –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Ö–æ–¥ –ø–æ email/–ø–∞—Ä–æ–ª—é.'
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Google:', error)
        return {
            success: false,
            error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ —á–µ—Ä–µ–∑ Google'
        }
    }
}

/**
 * üîê –í—Ö–æ–¥ —á–µ—Ä–µ–∑ GitHub
 */
export async function signInWithGitHub(): Promise<AuthResponse> {
    try {
        // üö® MOCK –†–ï–ñ–ò–ú: –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Supabase
        if (DISABLE_EMAIL) {
            console.log('üß™ MOCK –†–ï–ñ–ò–ú: –í—Ö–æ–¥ —á–µ—Ä–µ–∑ GitHub –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Supabase')
            const { mockSignInWithGitHub } = await import('../../tests/mocks/auth-mock')
            return mockSignInWithGitHub()
        }

        // –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è build
        /*
        const { data, error } = await supabase.auth.signInWithOAuth({
            provider: 'github',
            options: {
                redirectTo: `${window.location.origin}/auth/callback`
            }
        })

        if (error) {
            return {
                success: false,
                error: getAuthErrorMessage(error.message)
            }
        }

        return {
            success: true,
            message: '–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ GitHub...'
        }
        */

        // –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞
        return {
            success: true,
            message: '–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ GitHub...'
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ GitHub:', error)
        return {
            success: false,
            error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ —á–µ—Ä–µ–∑ GitHub'
        }
    }
}

/**
 * üõ†Ô∏è –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ Supabase –≤ –ø–æ–Ω—è—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
 */
function getAuthErrorMessage(error: string): string {
    const errorMap: Record<string, string> = {
        'Invalid login credentials': '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å',
        'Email not confirmed': 'Email –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É.',
        'User already registered': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
        'Password should be at least 6 characters': '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤',
        'Invalid email': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å',
        'Email rate limit exceeded': '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        'Token has expired': '–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π.',
        'Invalid token': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω'
    }

    return errorMap[error] || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'
}
