// üîå –ö–ª–∏–µ–Ω—Ç Supabase
import { createClient } from '@supabase/supabase-js'

// –°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
export const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL as string,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY as string
)

export function getSupabaseClient() {
    return supabase
}

export interface SubscriberRecord {
    id: string
    email: string
    created_at: string
    is_active: boolean
}

export async function addSubscriber(email: string): Promise<{ success: boolean; message: string; data?: SubscriberRecord }> {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
    if (!email || !emailRegex.test(email)) {
        return { success: false, message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email' }
    }
    const { data, error } = await supabase
        .from('subscribers')
        .insert({ email })
        .select()
        .single()
    if (error) {
        // –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ email
        return { success: false, message: 'Email —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω' }
    }
    return { success: true, message: '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É', data }
}

export async function getActiveSubscribers(): Promise<SubscriberRecord[]> {
    const { data, error } = await supabase
        .from('subscribers')
        .select('*')
        .eq('is_active', true)
    if (error || !data) return []
    return data
}

export async function unsubscribe(email: string): Promise<{ success: boolean; message: string }> {
    const { data, error } = await supabase
        .from('subscribers')
        .update({ is_active: false })
        .match({ email })
        .select()
        .single()
    if (error) {
        return { success: false, message: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è' }
    }
    return { success: true, message: '–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å' }
}
