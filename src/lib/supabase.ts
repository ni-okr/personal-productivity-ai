// üîå –ö–ª–∏–µ–Ω—Ç Supabase
import { createClient } from '@supabase/supabase-js'

// –°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
// –ë–∞–∑–æ–≤—ã–π –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π –∫–ª–∏–µ–Ω—Ç (—Å–æ—Ö—Ä–∞–Ω—ë–Ω –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
export const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL as string,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY as string
)

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—É–±–ª–∏—á–Ω—ã–µ –∫–ª—é—á–∏)
export function createBrowserSupabaseClient() {
  return createClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL as string,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY as string
  )
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –∫–ª—é—á–∏ —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã/ENV
export function createServerSupabaseClient(options?: {
  url?: string
  anonKey?: string
  serviceRoleKey?: string
}) {
  const url = options?.url || (process.env.SUPABASE_URL || process.env.NEXT_PUBLIC_SUPABASE_URL)
  const key = options?.serviceRoleKey || options?.anonKey || process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
  return createClient(url as string, key as string)
}

// –°–æ–≤–º–µ—Å—Ç–∏–º–∞—è —Ñ—É–Ω–∫—Ü–∏—è-–æ–±—ë—Ä—Ç–∫–∞: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–∑–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç (–±—Ä–∞—É–∑–µ—Ä–Ω—ã–π)
export function getSupabaseClient() {
    return supabase
}

export interface SubscriberRecord {
    id: string
    email: string
    created_at: string
    is_active: boolean
}

// –í —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥–µ –∏ –≤ —Ä–µ–∂–∏–º–µ mock –∏—Å–ø–æ–ª—å–∑—É–µ–º in-memory fallback
const inTest = process.env.NODE_ENV === 'test'
const disableEmail = process.env.NEXT_PUBLIC_DISABLE_EMAIL === 'true'

const memorySubscribers: Map<string, SubscriberRecord> | null = (inTest || disableEmail) ? new Map() : null

export async function addSubscriber(email: string): Promise<{ success: boolean; message: string; data?: SubscriberRecord }> {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
    if (!email || !emailRegex.test(email)) {
        return { success: false, message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email' }
    }

    if (memorySubscribers) {
        if (memorySubscribers.has(email)) {
            return { success: false, message: 'Email —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω' }
        }
        const rec: SubscriberRecord = {
            id: `${Date.now()}-${Math.random().toString(36).slice(2)}`,
            email,
            created_at: new Date().toISOString(),
            is_active: true
        }
        memorySubscribers.set(email, rec)
        return { success: true, message: '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É', data: rec }
    }

    const { data, error } = await supabase
        .from('subscribers')
        .insert({ email })
        .select()
        .single()
    if (error) {
        return { success: false, message: 'Email —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω' }
    }
    return { success: true, message: '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É', data }
}

export async function getActiveSubscribers(): Promise<SubscriberRecord[]> {
    if (memorySubscribers) {
        return Array.from(memorySubscribers.values()).filter(s => s.is_active)
    }
    const { data, error } = await supabase
        .from('subscribers')
        .select('*')
        .eq('is_active', true)
    if (error || !data) return []
    return data
}

export async function unsubscribe(email: string): Promise<{ success: boolean; message: string }> {
    if (memorySubscribers) {
        const rec = memorySubscribers.get(email)
        if (!rec) return { success: false, message: '–ü–æ–¥–ø–∏—Å—á–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' }
        memorySubscribers.set(email, { ...rec, is_active: false })
        return { success: true, message: '–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å' }
    }
    const { data, error } = await supabase
        .from('subscribers')
        .update({ is_active: false })
        .match({ email })
        .select()
        .single()
    if (error) {
        return { success: false, message: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è' }
    }
    return { success: true, message: '–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å' }
}

// –¢–µ—Å—Ç–æ–≤—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ in-memory –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
export function resetSubscribers(): void {
    if (memorySubscribers) memorySubscribers.clear()
}
