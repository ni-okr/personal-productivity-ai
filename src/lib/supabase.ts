import { createClient } from '@supabase/supabase-js'

// –õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞
let supabaseClient: ReturnType<typeof createClient> | null = null

export function getSupabaseClient() {
    if (!supabaseClient) {
        const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
        const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY

        if (!supabaseUrl || !supabaseAnonKey) {
            throw new Error('Missing Supabase environment variables. Please check your .env.local file.')
        }

        supabaseClient = createClient(supabaseUrl, supabaseAnonKey)
    }

    return supabaseClient
}

// –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export const supabase = getSupabaseClient()

export interface Subscriber {
    id?: string
    email: string
    source?: string
    subscribed_at?: string
    is_active?: boolean
    created_at?: string
    updated_at?: string
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
 */
export async function addSubscriber(email: string): Promise<{ success: boolean; message: string; data?: Subscriber }> {
    try {
        const supabase = getSupabaseClient()

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π email
        const { data: existingSubscriber, error: checkError } = await supabase
            .from('subscriptions')
            .select('email')
            .eq('email', email)
            .single()

        if (checkError && checkError.code !== 'PGRST116') {
            // PGRST116 = "The result contains 0 rows" - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –∑–Ω–∞—á–∏—Ç email –Ω–µ –Ω–∞–π–¥–µ–Ω
            throw checkError
        }

        if (existingSubscriber) {
            console.log('üìß Email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', email)
            return {
                success: false,
                message: '–≠—Ç–æ—Ç email —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'
            }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞
        const { data, error } = await supabase
            .from('subscriptions')
            .insert([{ email, source: 'landing_page', is_active: true }])
            .select()
            .single()

        if (error) {
            console.error('üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ:', error)

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            if (error.code === '23505' || error.message?.includes('duplicate key')) {
                return {
                    success: false,
                    message: '–≠—Ç–æ—Ç email —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'
                }
            }

            throw error
        }

        return {
            success: true,
            message: '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å –æ —Ä–µ–ª–∏–∑–µ.',
            data
        }
    } catch (error: any) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞:', error)
        console.error('–î–µ—Ç–∞–ª–∏ Supabase –æ—à–∏–±–∫–∏:', {
            error,
            type: typeof error,
            code: error?.code,
            message: error?.message,
            details: error?.details
        })
        return {
            success: false,
            message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        }
    }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
 */
export async function getActiveSubscribers(): Promise<Subscriber[]> {
    try {
        const supabase = getSupabaseClient()

        const { data, error } = await supabase
            .from('subscriptions')
            .select('*')
            .eq('is_active', true)
            .order('created_at', { ascending: false })

        if (error) {
            throw error
        }

        return data || []
    } catch (error: any) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:', error)
        return []
    }
}

/**
 * –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ (–æ—Ç–ø–∏—Å–∫–∞)
 */
export async function unsubscribe(email: string): Promise<{ success: boolean; message: string }> {
    try {
        const supabase = getSupabaseClient()

        const { error } = await supabase
            .from('subscriptions')
            .update({ is_active: false })
            .eq('email', email)

        if (error) {
            throw error
        }

        return {
            success: true,
            message: '–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'
        }
    } catch (error: any) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ:', error)
        return {
            success: false,
            message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ'
        }
    }
}