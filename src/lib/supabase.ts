import type { Database, SubscriberInsert } from '@/types/supabase'
import { createClient } from '@supabase/supabase-js'

// –õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞
let supabaseClient: ReturnType<typeof createClient<Database>> | null = null

export function getSupabaseClient() {
  if (!supabaseClient) {
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
    const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY

    if (!supabaseUrl || !supabaseAnonKey) {
      throw new Error('Missing Supabase environment variables. Please check your .env.local file.')
    }

    supabaseClient = createClient<Database>(supabaseUrl, supabaseAnonKey)
  }

  return supabaseClient
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
export const supabase = getSupabaseClient()

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏
export async function addSubscriber(email: string): Promise<{ success: boolean; message: string; data?: any }> {
  try {
    const supabase = getSupabaseClient()

    const subscriberData: SubscriberInsert = {
      email,
      source: 'landing_page',
      is_active: true
    }

    const { data, error } = await (supabase as any)
      .from('subscribers')
      .insert(subscriberData)
      .select()
      .single()

    if (error) {
      console.error('üö® –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞:', error)

      // Handle duplicate key error
      if (error.code === '23505') {
        return {
          success: false,
          message: '–≠—Ç–æ—Ç email —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É'
        }
      }

      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞'
      }
    }

    return {
      success: true,
      message: '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å –æ –∑–∞–ø—É—Å–∫–µ.',
      data: data
    }
  } catch (error: any) {
    console.error('üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ addSubscriber:', error)
    return {
      success: false,
      message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
    }
  }
}

export async function getActiveSubscribers(): Promise<any[]> {
  try {
    const supabase = getSupabaseClient()

    const { data, error } = await supabase
      .from('subscribers')
      .select('*')
      .eq('is_active', true)
      .order('created_at', { ascending: false })

    if (error) {
      console.error('üö® –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:', error)
      return []
    }

    return data || []
  } catch (error) {
    console.error('üö® –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:', error)
    return []
  }
}

export async function unsubscribe(email: string): Promise<{ success: boolean; message: string }> {
  try {
    const supabase = getSupabaseClient()

    const { data, error } = await (supabase as any)
      .from('subscribers')
      .update({ is_active: false })
      .eq('email', email)
      .select()

    if (error) {
      console.error('üö® –û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏:', error)
      return {
        success: false,
        message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ.'
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å
    if (!data || data.length === 0) {
      return {
        success: false,
        message: '–ü–æ–¥–ø–∏—Å—á–∏–∫ —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω.'
      }
    }

    return {
      success: true,
      message: '–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.'
    }
  } catch (error) {
    console.error('üö® –û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏:', error)
    return {
      success: false,
      message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ.'
    }
  }
}
