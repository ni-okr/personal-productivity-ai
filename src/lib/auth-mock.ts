// üß™ Mock —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –±–µ–∑ Supabase

import { User } from '@/types'

export interface MockUser {
    id: string
    email: string
    name: string
    avatar?: string
    timezone: string
    subscription: 'free' | 'premium' | 'pro'
    subscriptionStatus: 'active' | 'canceled' | 'past_due' | 'unpaid' | 'trialing'
    preferences: {
        workingHours: { start: string; end: string }
        focusTime: number
        breakTime: number
        notifications: { email: boolean; push: boolean; desktop: boolean }
        aiCoaching: { enabled: boolean; frequency: 'low' | 'medium' | 'high'; style: 'gentle' | 'direct' | 'motivational' }
    }
    createdAt: Date
    updatedAt: Date
}

// Mock –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const mockUsers: MockUser[] = []

export function mockSignUp(email: string, password: string, name: string): { success: boolean; user?: User; error?: string; message?: string } {
    console.log('üß™ MOCK –†–ï–ñ–ò–ú: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Supabase')

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const existingUser = mockUsers.find(u => u.email === email)
    if (existingUser) {
        return {
            success: false,
            error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (mock)'
        }
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const newUser: MockUser = {
        id: `mock-${Date.now()}-${Math.random().toString(36).substring(7)}`,
        email: email,
        name: name,
        timezone: 'Europe/Moscow',
        subscription: 'free',
        subscriptionStatus: 'active',
        preferences: {
            workingHours: { start: '09:00', end: '18:00' },
            focusTime: 25,
            breakTime: 5,
            notifications: { email: true, push: true, desktop: true },
            aiCoaching: { enabled: true, frequency: 'medium', style: 'gentle' }
        },
        createdAt: new Date(),
        updatedAt: new Date()
    }

    mockUsers.push(newUser)
    currentMockUser = newUser

    return {
        success: true,
        user: newUser,
        message: 'Mock —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞'
    }
}

export function mockSignIn(email: string, password: string): { success: boolean; user?: User; error?: string; message?: string } {
    console.log('üß™ MOCK –†–ï–ñ–ò–ú: –í—Ö–æ–¥ –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Supabase')

    const user = mockUsers.find(u => u.email === email)
    if (!user) {
        return {
            success: false,
            error: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å (mock)'
        }
    }

    // –í mock —Ä–µ–∂–∏–º–µ –º—ã –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å, –Ω–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –º–æ–∂–µ–º –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
    if (password === 'wrongpassword') {
        return {
            success: false,
            error: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å (mock)'
        }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
    user.updatedAt = new Date()
    currentMockUser = user

    return {
        success: true,
        user: user,
        message: 'Mock –≤—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω'
    }
}

export function mockSignOut(): { success: boolean; error?: string; message?: string } {
    console.log('üß™ MOCK –†–ï–ñ–ò–ú: –í—ã—Ö–æ–¥ –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Supabase')
    currentMockUser = null
    return {
        success: true,
        message: 'Mock –≤—ã—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω'
    }
}

export async function mockGetCurrentUser(): Promise<User | null> {
    console.log('üß™ MOCK –†–ï–ñ–ò–ú: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    return currentMockUser
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è —Ç–µ—Å—Ç–æ–≤)
export function setCurrentMockUser(user: User | null): void {
    console.log('üß™ MOCK –†–ï–ñ–ò–ú: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    currentMockUser = user
    notifyAuthStateChange(user)
}

export function mockGetUserProfile(userId: string): { success: boolean; user?: User; error?: string } {
    console.log('üß™ MOCK –†–ï–ñ–ò–ú: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')

    const user = mockUsers.find(u => u.id === userId || u.email === userId)
    if (!user) {
        return {
            success: false,
            error: '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
        }
    }

    return {
        success: true,
        user: user
    }
}

export function mockUpdateUserProfile(userId: string, updates: Partial<User>): { success: boolean; user?: User; error?: string } {
    console.log('üß™ MOCK –†–ï–ñ–ò–ú: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')

    const user = mockUsers.find(u => u.id === userId || u.email === userId)
    if (!user) {
        return {
            success: false,
            error: '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
        }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    Object.assign(user, updates)
    user.updatedAt = new Date()

    // –û–±–Ω–æ–≤–ª—è–µ–º currentMockUser –µ—Å–ª–∏ —ç—Ç–æ —Ç–æ—Ç –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if (currentMockUser && currentMockUser.id === user.id) {
        currentMockUser = user
    }

    return {
        success: true,
        user: user
    }
}

export function clearMockUsers(): void {
    console.log('üß™ MOCK –†–ï–ñ–ò–ú: –û—á–∏—Å—Ç–∫–∞ mock –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
    mockUsers.length = 0
    notifyAuthStateChange(null)
}

// Mock –¥–ª—è onAuthStateChange
let currentMockUser: MockUser | null = null
let authStateListeners: ((user: User | null) => void)[] = []

export function mockOnAuthStateChange(callback: (user: User | null) => void) {
    console.log('üß™ MOCK –†–ï–ñ–ò–ú: –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')
    authStateListeners.push(callback)

    // –°—Ä–∞–∑—É –≤—ã–∑—ã–≤–∞–µ–º callback —Å —Ç–µ–∫—É—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–∏–ª–∏ null –µ—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)
    callback(currentMockUser)

    return {
        data: {
            subscription: {
                unsubscribe: () => {
                    const index = authStateListeners.indexOf(callback)
                    if (index > -1) {
                        authStateListeners.splice(index, 1)
                    }
                }
            }
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–ª—É—à–∞—Ç–µ–ª–µ–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function notifyAuthStateChange(user: User | null) {
    currentMockUser = user
    authStateListeners.forEach(callback => callback(user))

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ useAppStore
    if (typeof window !== 'undefined') {
        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º store —Ç–æ–ª—å–∫–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
        import('@/stores/useAppStore').then(({ useAppStore }) => {
            const store = useAppStore.getState()
            if (user) {
                store.setUser(user)
            } else {
                store.clearUserData()
            }
        })
    }
}

// –û–±–Ω–æ–≤–ª—è–µ–º mockSignUp –∏ mockSignIn –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–ª—É—à–∞—Ç–µ–ª–µ–π
export function mockSignUpWithState(email: string, password: string, name: string): { success: boolean; user?: User; error?: string; message?: string } {
    const result = mockSignUp(email, password, name)
    if (result.success && result.user) {
        currentMockUser = result.user
        notifyAuthStateChange(result.user)
    }
    return result
}

export function mockSignInWithState(email: string, password: string): { success: boolean; user?: User; error?: string; message?: string } {
    const result = mockSignIn(email, password)
    if (result.success && result.user) {
        currentMockUser = result.user
        notifyAuthStateChange(result.user)
    }
    return result
}

export function mockSignOutWithState(): { success: boolean; error?: string; message?: string } {
    const result = mockSignOut()
    if (result.success) {
        currentMockUser = null
        notifyAuthStateChange(null)
    }
    return result
}
