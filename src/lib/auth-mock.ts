// üß™ Mock —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –±–µ–∑ Supabase

import { User } from '@/types'

export interface MockUser {
    id: string
    email: string
    name: string
    subscription: 'free' | 'premium' | 'pro'
    createdAt: Date
    lastLoginAt: Date
}

// Mock –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const mockUsers: MockUser[] = []

export function mockSignUp(email: string, password: string, name: string): { success: boolean; user?: User; error?: string } {
    console.log('üß™ MOCK –†–ï–ñ–ò–ú: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Supabase')

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const existingUser = mockUsers.find(u => u.email === email)
    if (existingUser) {
        return {
            success: false,
            error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
        }
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const newUser: MockUser = {
        id: `mock-${Date.now()}`,
        email: email,
        name: name,
        subscription: 'free',
        createdAt: new Date(),
        lastLoginAt: new Date()
    }

    mockUsers.push(newUser)

    return {
        success: true,
        user: newUser
    }
}

export function mockSignIn(email: string, password: string): { success: boolean; user?: User; error?: string } {
    console.log('üß™ MOCK –†–ï–ñ–ò–ú: –í—Ö–æ–¥ –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Supabase')

    const user = mockUsers.find(u => u.email === email)
    if (!user) {
        return {
            success: false,
            error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
        }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
    user.lastLoginAt = new Date()

    return {
        success: true,
        user: user
    }
}

export function mockSignOut(): { success: boolean; error?: string } {
    console.log('üß™ MOCK –†–ï–ñ–ò–ú: –í—ã—Ö–æ–¥ –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Supabase')
    return {
        success: true
    }
}

export function mockGetCurrentUser(): User | null {
    console.log('üß™ MOCK –†–ï–ñ–ò–ú: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    return mockUsers[mockUsers.length - 1] || null
}

export function clearMockUsers(): void {
    console.log('üß™ MOCK –†–ï–ñ–ò–ú: –û—á–∏—Å—Ç–∫–∞ mock –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
    mockUsers.length = 0
}

// Mock –¥–ª—è onAuthStateChange
let currentMockUser: MockUser | null = null
let authStateListeners: ((user: User | null) => void)[] = []

export function mockOnAuthStateChange(callback: (user: User | null) => void) {
    console.log('üß™ MOCK –†–ï–ñ–ò–ú: –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')
    authStateListeners.push(callback)
    
    // –°—Ä–∞–∑—É –≤—ã–∑—ã–≤–∞–µ–º callback —Å —Ç–µ–∫—É—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    callback(currentMockUser)
    
    return {
        data: {
            subscription: {
                unsubscribe: () => {
                    const index = authStateListeners.indexOf(callback)
                    if (index > -1) {
                        authStateListeners.splice(index, 1)
                    }
                }
            }
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–ª—É—à–∞—Ç–µ–ª–µ–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function notifyAuthStateChange(user: User | null) {
    currentMockUser = user
    authStateListeners.forEach(callback => callback(user))
}

// –û–±–Ω–æ–≤–ª—è–µ–º mockSignUp –∏ mockSignIn –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–ª—É—à–∞—Ç–µ–ª–µ–π
export function mockSignUpWithState(email: string, password: string, name: string): { success: boolean; user?: User; error?: string } {
    const result = mockSignUp(email, password, name)
    if (result.success && result.user) {
        notifyAuthStateChange(result.user)
    }
    return result
}

export function mockSignInWithState(email: string, password: string): { success: boolean; user?: User; error?: string } {
    const result = mockSignIn(email, password)
    if (result.success && result.user) {
        notifyAuthStateChange(result.user)
    }
    return result
}

export function mockSignOutWithState(): { success: boolean; error?: string } {
    const result = mockSignOut()
    if (result.success) {
        notifyAuthStateChange(null)
    }
    return result
}
