import { signOut as supabaseSignOut } from '@/lib/auth'
import {
  completeTask,
  createTask,
  CreateTaskData,
  deleteTask as deleteTaskApi,
  getTasks,
  getTasksStats,
  syncTasks,
  updateTask as updateTaskApi,
  UpdateTaskData
} from '@/lib/tasks'
import { AICoachSuggestion, AppState, ProductivityMetrics, Task, User } from '@/types'
import { create } from 'zustand'
import { devtools } from 'zustand/middleware'

// üö® –ó–ê–©–ò–¢–ê –û–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –° –†–ï–ê–õ–¨–ù–´–ú–ò EMAIL
const DISABLE_EMAIL = process.env.NEXT_PUBLIC_DISABLE_EMAIL === 'true'

interface AppStore extends AppState {
  // Actions
  setUser: (user: User | null) => void
  setTasks: (tasks: Task[]) => void
  addTask: (task: Task) => void
  updateTask: (id: string, updates: Partial<Task>) => void
  deleteTask: (id: string) => void
  setSuggestions: (suggestions: AICoachSuggestion[]) => void
  dismissSuggestion: (id: string) => void
  setMetrics: (metrics: ProductivityMetrics | null) => void
  setLoading: (isLoading: boolean) => void
  setError: (error: string | null) => void

  // Auth actions
  signOut: () => Promise<void>
  clearUserData: () => void

  // Supabase tasks actions
  loadTasks: () => Promise<void>
  createTaskAsync: (taskData: CreateTaskData) => Promise<void>
  updateTaskAsync: (id: string, updates: UpdateTaskData) => Promise<void>
  deleteTaskAsync: (id: string) => Promise<void>
  completeTaskAsync: (id: string, actualDuration?: number) => Promise<void>
  syncTasksAsync: () => Promise<void>
  loadTasksStats: () => Promise<void>

  // Computed values
  completedTasksToday: () => Task[]
  pendingTasks: () => Task[]
  urgentTasks: () => Task[]
  todayProductivityScore: () => number
}

export const useAppStore = create<AppStore>()(
  devtools(
    (set, get) => ({
      // Initial state
      user: null,
      tasks: [],
      suggestions: [],
      metrics: null,
      isLoading: false,
      error: null,

      // Actions
      setUser: (user) => {
        set({ user })
        // –í mock —Ä–µ–∂–∏–º–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (DISABLE_EMAIL && user) {
          // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
          setTimeout(() => {
            get().loadTasks()
          }, 0)
        }
      },

      setTasks: (tasks) => set({ tasks }),

      addTask: (task) => set((state) => ({
        tasks: [...state.tasks, task]
      })),

      updateTask: (id, updates) => set((state) => ({
        tasks: state.tasks.map(task =>
          task.id === id ? { ...task, ...updates } : task
        )
      })),

      deleteTask: (id) => set((state) => ({
        tasks: state.tasks.filter(task => task.id !== id)
      })),

      setSuggestions: (suggestions) => set({ suggestions }),

      dismissSuggestion: (id) => set((state) => ({
        suggestions: state.suggestions.filter(s => s.id !== id)
      })),

      setMetrics: (metrics) => set({ metrics }),
      setLoading: (isLoading) => set({ isLoading }),
      setError: (error) => set({ error }),

      // Auth actions
      signOut: async () => {
        try {
          set({ isLoading: true, error: null })
          await supabaseSignOut()
          set({ user: null, tasks: [], suggestions: [], metrics: null })
        } catch (error: any) {
          set({ error: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ' })
          throw error
        } finally {
          set({ isLoading: false })
        }
      },

      clearUserData: () => set({
        user: null,
        tasks: [],
        suggestions: [],
        metrics: null,
        error: null
      }),

      // Supabase tasks actions
      loadTasks: async () => {
        const { user } = get()
        if (!user) {
          console.log('üö® loadTasks: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
          return
        }

        console.log('üö® loadTasks: –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∑–∞–¥–∞—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', user.id)
        console.log('üö® loadTasks: DISABLE_EMAIL =', DISABLE_EMAIL)

        try {
          set({ isLoading: true, error: null })

          let result: TasksResponse

          // üö® MOCK –†–ï–ñ–ò–ú: –ò—Å–ø–æ–ª—å–∑—É–µ–º mock —Ñ—É–Ω–∫—Ü–∏–∏ –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω—ã—Ö
          if (DISABLE_EMAIL) {
            console.log('üö® loadTasks: –ò—Å–ø–æ–ª—å–∑—É–µ–º mock —Ä–µ–∂–∏–º')
            const { mockGetTasks, mockGetProductivityMetrics, mockGetAISuggestions } = await import('@/lib/tasks-mock')
            result = await mockGetTasks(user.id)
            console.log('üö® loadTasks: Mock —Ä–µ–∑—É–ª—å—Ç–∞—Ç', result)

            // –ó–∞–≥—Ä—É–∂–∞–µ–º mock –º–µ—Ç—Ä–∏–∫–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            const metrics = await mockGetProductivityMetrics(user.id)
            const suggestions = await mockGetAISuggestions(user.id)

            if (metrics) {
              set({ metrics })
            }
            if (suggestions) {
              set({ suggestions })
            }
          } else {
            console.log('üö® loadTasks: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º')
            result = await getTasks(user.id)
          }

          if (result.success && result.tasks) {
            console.log('üö® loadTasks: –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∑–∞–¥–∞—á–∏', result.tasks.length)
            set({ tasks: result.tasks })
          } else {
            console.log('üö® loadTasks: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á', result.error)
            set({ error: result.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á' })
          }
        } catch (error: any) {
          console.log('üö® loadTasks: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ', error)
          set({ error: error.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á' })
        } finally {
          set({ isLoading: false })
        }
      },

      createTaskAsync: async (taskData: CreateTaskData) => {
        const { user } = get()
        if (!user) return

        try {
          set({ isLoading: true, error: null })

          let result: TasksResponse

          // üö® MOCK –†–ï–ñ–ò–ú: –ò—Å–ø–æ–ª—å–∑—É–µ–º mock —Ñ—É–Ω–∫—Ü–∏–∏ –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω—ã—Ö
          if (DISABLE_EMAIL) {
            const { mockCreateTask } = await import('@/lib/tasks-mock')
            result = await mockCreateTask(user.id, taskData)
          } else {
            result = await createTask(user.id, taskData)
          }

          if (result.success && result.task) {
            set((state) => ({
              tasks: [result.task!, ...state.tasks]
            }))
          } else {
            set({ error: result.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏' })
          }
        } catch (error: any) {
          set({ error: error.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏' })
        } finally {
          set({ isLoading: false })
        }
      },

      updateTaskAsync: async (id: string, updates: UpdateTaskData) => {
        try {
          set({ isLoading: true, error: null })

          let result: TasksResponse

          // üö® MOCK –†–ï–ñ–ò–ú: –ò—Å–ø–æ–ª—å–∑—É–µ–º mock —Ñ—É–Ω–∫—Ü–∏–∏ –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω—ã—Ö
          if (DISABLE_EMAIL) {
            const { mockUpdateTask } = await import('@/lib/tasks-mock')
            result = await mockUpdateTask(id, updates)
          } else {
            result = await updateTaskApi(id, updates)
          }

          if (result.success && result.task) {
            set((state) => ({
              tasks: state.tasks.map(task =>
                task.id === id ? result.task! : task
              )
            }))
          } else {
            set({ error: result.error || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏' })
          }
        } catch (error: any) {
          set({ error: error.message || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏' })
        } finally {
          set({ isLoading: false })
        }
      },

      deleteTaskAsync: async (id: string) => {
        try {
          set({ isLoading: true, error: null })

          let result: TasksResponse

          // üö® MOCK –†–ï–ñ–ò–ú: –ò—Å–ø–æ–ª—å–∑—É–µ–º mock —Ñ—É–Ω–∫—Ü–∏–∏ –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω—ã—Ö
          if (DISABLE_EMAIL) {
            const { mockDeleteTask } = await import('@/lib/tasks-mock')
            result = await mockDeleteTask(id)
          } else {
            result = await deleteTaskApi(id)
          }

          if (result.success) {
            set((state) => ({
              tasks: state.tasks.filter(task => task.id !== id)
            }))
          } else {
            set({ error: result.error || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏' })
          }
        } catch (error: any) {
          set({ error: error.message || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏' })
        } finally {
          set({ isLoading: false })
        }
      },

      completeTaskAsync: async (id: string, actualDuration?: number) => {
        try {
          set({ isLoading: true, error: null })

          let result: TasksResponse

          // üö® MOCK –†–ï–ñ–ò–ú: –ò—Å–ø–æ–ª—å–∑—É–µ–º mock —Ñ—É–Ω–∫—Ü–∏–∏ –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω—ã—Ö
          if (DISABLE_EMAIL) {
            const { mockCompleteTask } = await import('@/lib/tasks-mock')
            result = await mockCompleteTask(id, actualDuration)
          } else {
            result = await completeTask(id, actualDuration)
          }

          if (result.success && result.task) {
            set((state) => ({
              tasks: state.tasks.map(task =>
                task.id === id ? result.task! : task
              )
            }))
          } else {
            set({ error: result.error || '–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏' })
          }
        } catch (error: any) {
          set({ error: error.message || '–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏' })
        } finally {
          set({ isLoading: false })
        }
      },

      syncTasksAsync: async () => {
        const { user } = get()
        if (!user) return

        try {
          set({ isLoading: true, error: null })
          const result = await syncTasks(user.id)

          if (result.success && result.tasks) {
            set({ tasks: result.tasks })
          } else {
            set({ error: result.error || '–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞—á' })
          }
        } catch (error: any) {
          set({ error: error.message || '–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞—á' })
        } finally {
          set({ isLoading: false })
        }
      },

      loadTasksStats: async () => {
        const { user } = get()
        if (!user) return

        try {
          const stats = await getTasksStats(user.id)
          // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ store –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
          console.log('Tasks stats:', stats)
        } catch (error: any) {
          console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–¥–∞—á:', error)
        }
      },

      // Computed values
      completedTasksToday: () => {
        const today = new Date()
        today.setHours(0, 0, 0, 0)

        return get().tasks.filter(task =>
          task.status === 'completed' &&
          task.completedAt &&
          task.completedAt >= today
        )
      },

      pendingTasks: () => {
        return get().tasks.filter(task =>
          task.status === 'todo' || task.status === 'in_progress'
        ).sort((a, b) => {
          // Sort by priority and due date
          const priorityOrder = { urgent: 4, high: 3, medium: 2, low: 1 }
          const aPriority = priorityOrder[a.priority]
          const bPriority = priorityOrder[b.priority]

          if (aPriority !== bPriority) {
            return bPriority - aPriority
          }

          if (a.dueDate && b.dueDate) {
            return a.dueDate.getTime() - b.dueDate.getTime()
          }

          return 0
        })
      },

      urgentTasks: () => {
        const now = new Date()
        const tomorrow = new Date(now)
        tomorrow.setDate(tomorrow.getDate() + 1)

        return get().tasks.filter(task =>
          (task.priority === 'urgent' || task.priority === 'high') &&
          (task.status === 'todo' || task.status === 'in_progress') &&
          (!task.dueDate || task.dueDate <= tomorrow)
        )
      },

      todayProductivityScore: () => {
        const metrics = get().metrics
        if (!metrics) return 0

        const today = new Date()
        today.setHours(0, 0, 0, 0)

        if (metrics.date >= today) {
          return metrics.productivityScore
        }

        return 0
      }
    }),
    {
      name: 'personal-ai-store'
    }
  )
)
