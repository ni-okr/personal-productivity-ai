#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤
function fixTestFile(filePath) {
    console.log(`–ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª: ${filePath}`);

    let content = fs.readFileSync(filePath, 'utf8');

    // –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –∑–∞–º–µ–Ω—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userSetupPattern = /(\s+)(testLogger\.step\('Setting up user'\)\s+testMocks\.addUser\(mockUser\)\s+)(\/\/ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ store –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º \w+\s+await act\(async \(\) => \{\s+result\.current\.setUser\(mockUser\)\s+\}\)\s+)(\s+)(testLogger\.step\('\w+'\))/g;

    // –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ –≤–µ—Ä—Å–∏—é —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    content = content.replace(userSetupPattern, (match, indent1, setup, userSet, indent2, nextStep) => {
        return `${indent1}${setup}${userSet}
            // –ñ–¥–µ–º, –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è
            await testUtils.waitForCondition(() => result.current.user !== null)
${indent2}${nextStep}`;
    });

    // –¢–∞–∫–∂–µ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–∏, –≥–¥–µ –Ω–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ–± —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const simpleUserSetupPattern = /(\s+)(testLogger\.step\('Setting up user'\)\s+testMocks\.addUser\(mockUser\)\s+)(\s+)(testLogger\.step\('\w+'\))/g;

    content = content.replace(simpleUserSetupPattern, (match, indent1, setup, indent2, nextStep) => {
        return `${indent1}${setup}
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ store –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º
            await act(async () => {
                result.current.setUser(mockUser)
            })
            
            // –ñ–¥–µ–º, –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è
            await testUtils.waitForCondition(() => result.current.user !== null)
${indent2}${nextStep}`;
    });

    fs.writeFileSync(filePath, content);
    console.log(`‚úÖ –§–∞–π–ª –∏—Å–ø—Ä–∞–≤–ª–µ–Ω: ${filePath}`);
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
    const testFiles = [
        'tests/unit/tasks-store-dependency-injection.test.ts',
        'tests/unit/tasks-store-migrated.test.ts'
    ];

    testFiles.forEach(filePath => {
        if (fs.existsSync(filePath)) {
            fixTestFile(filePath);
        } else {
            console.log(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
        }
    });

    console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!');
}

main();
