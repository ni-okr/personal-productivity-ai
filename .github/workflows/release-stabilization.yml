name: 🚀 Release Stabilization

on:
  pull_request:
    branches: [main]
    paths: ['release/**']
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Release version (e.g., v1.3.0)'
        required: true
        default: 'v1.3.0'

env:
  NODE_VERSION: '18'
  NPM_CACHE_KEY: 'npm-cache-${{ hashFiles('**/package-lock.json') }}'

jobs:
  # 🔍 Предварительные проверки
  pre-checks:
    name: 🔍 Pre-checks
    runs-on: ubuntu-latest
    outputs:
      should-run-tests: ${{ steps.check.outputs.should-run-tests }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Check changes
        id: check
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should-run-tests=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # Проверяем, есть ли изменения в release/ ветке
            if git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep -q "^release/"; then
              echo "should-run-tests=true" >> $GITHUB_OUTPUT
            else
              echo "should-run-tests=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "should-run-tests=true" >> $GITHUB_OUTPUT
          fi

  # 🧪 Unit тесты
  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    needs: pre-checks
    if: needs.pre-checks.outputs.should-run-tests == 'true'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🧪 Run unit tests
        run: npm run test:unit
        env:
          NODE_ENV: test
          NEXT_PUBLIC_DEV_MODE: 'true'
          NEXT_PUBLIC_DISABLE_EMAIL: 'true'
          TEST_EMAIL_DOMAIN: '@example.test'

      - name: 📊 Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unit
          name: unit-tests

  # 🔗 Integration тесты
  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: pre-checks
    if: needs.pre-checks.outputs.should-run-tests == 'true'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🧪 Run integration tests
        run: npm run test:integration
        env:
          NODE_ENV: test
          NEXT_PUBLIC_DEV_MODE: 'true'
          NEXT_PUBLIC_DISABLE_EMAIL: 'true'
          TEST_EMAIL_DOMAIN: '@example.test'

  # 🎭 E2E тесты
  e2e-tests:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    needs: pre-checks
    if: needs.pre-checks.outputs.should-run-tests == 'true'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🎭 Install Playwright
        run: npx playwright install --with-deps

      - name: 🧪 Run E2E tests
        run: npm run test:e2e
        env:
          NODE_ENV: test
          NEXT_PUBLIC_DEV_MODE: 'true'
          NEXT_PUBLIC_DISABLE_EMAIL: 'true'
          TEST_EMAIL_DOMAIN: '@example.test'

      - name: 📊 Upload E2E results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  # 🏗️ Build тесты
  build-tests:
    name: 🏗️ Build Tests
    runs-on: ubuntu-latest
    needs: pre-checks
    if: needs.pre-checks.outputs.should-run-tests == 'true'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build project
        run: npm run build
        env:
          NODE_ENV: production

      - name: 📊 Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: .next/
          retention-days: 7

  # 🔒 Security аудит
  security-audit:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    needs: pre-checks
    if: needs.pre-checks.outputs.should-run-tests == 'true'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔒 Run security audit
        run: npm audit --audit-level high

      - name: 🔍 Run CodeQL analysis
        uses: github/codeql-action/analyze@v2
        with:
          languages: javascript

  # 📝 Lint проверки
  lint-checks:
    name: 📝 Lint Checks
    runs-on: ubuntu-latest
    needs: pre-checks
    if: needs.pre-checks.outputs.should-run-tests == 'true'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 📝 Run ESLint
        run: npm run lint

      - name: 🎨 Run Prettier check
        run: npm run format:check

      - name: 🔧 Run TypeScript check
        run: npm run type-check

  # ⚡ Performance тесты
  performance-tests:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: pre-checks
    if: needs.pre-checks.outputs.should-run-tests == 'true'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build project
        run: npm run build
        env:
          NODE_ENV: production

      - name: ⚡ Run Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # 📊 Сводный отчет
  summary:
    name: 📊 Summary Report
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, build-tests, security-audit, lint-checks, performance-tests]
    if: always()
    steps:
      - name: 📊 Generate summary
        run: |
          echo "## 🚀 Release Stabilization Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Test Type | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ${{ needs.unit-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests | ${{ needs.integration-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E Tests | ${{ needs.e2e-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Tests | ${{ needs.build-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Audit | ${{ needs.security-audit.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Lint Checks | ${{ needs.lint-checks.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance Tests | ${{ needs.performance-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 Overall Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.unit-tests.result }}" == "success" && "${{ needs.integration-tests.result }}" == "success" && "${{ needs.e2e-tests.result }}" == "success" && "${{ needs.build-tests.result }}" == "success" && "${{ needs.security-audit.result }}" == "success" && "${{ needs.lint-checks.result }}" == "success" && "${{ needs.performance-tests.result }}" == "success" ]]; then
            echo "🎉 **All tests passed! Release is ready for production.**" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Some tests failed. Please fix issues before releasing.**" >> $GITHUB_STEP_SUMMARY
          fi

  # 🚀 Автоматический релиз (только для main)
  auto-release:
    name: 🚀 Auto Release
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, build-tests, security-audit, lint-checks, performance-tests]
    if: |
      github.ref == 'refs/heads/main' && 
      github.event_name == 'pull_request' && 
      github.event.pull_request.merged == true &&
      needs.unit-tests.result == 'success' &&
      needs.integration-tests.result == 'success' &&
      needs.e2e-tests.result == 'success' &&
      needs.build-tests.result == 'success' &&
      needs.security-audit.result == 'success' &&
      needs.lint-checks.result == 'success' &&
      needs.performance-tests.result == 'success'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏷️ Get version
        id: version
        run: |
          # Получаем версию из package.json
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT

      - name: 🚀 Create release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          release_name: Release ${{ steps.version.outputs.tag }}
          body: |
            ## 🎉 Release ${{ steps.version.outputs.tag }}
            
            ### ✅ What's included:
            - All tests passed ✅
            - Security audit passed ✅
            - Performance tests passed ✅
            - Build successful ✅
            
            ### 🚀 Ready for production!
          draft: false
          prerelease: false