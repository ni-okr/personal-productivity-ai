name: 🚀 Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  NODE_VERSION: '18'
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  # 🔍 Предварительные проверки
  pre-deploy-checks:
    name: 🔍 Pre-deploy Checks
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.check.outputs.should-deploy }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Check if deployment is needed
        id: check
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          fi

  # 🧪 Тесты
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    needs: pre-deploy-checks
    if: needs.pre-deploy-checks.outputs.should-deploy == 'true'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🧪 Run unit tests
        run: npm run test:unit
        env:
          NODE_ENV: test
          NEXT_PUBLIC_DEV_MODE: 'true'
          NEXT_PUBLIC_DISABLE_EMAIL: 'true'
          TEST_EMAIL_DOMAIN: '@example.test'

      - name: 🏗️ Build project
        run: npm run build
        env:
          NODE_ENV: production

  # 🔒 Security audit
  security-audit:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    needs: pre-deploy-checks
    if: needs.pre-deploy-checks.outputs.should-deploy == 'true'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔒 Run security audit
        run: npm audit --audit-level high

  # 🚀 Deploy to Vercel
  deploy:
    name: 🚀 Deploy to Vercel
    runs-on: ubuntu-latest
    needs: [test, security-audit]
    if: needs.pre-deploy-checks.outputs.should-deploy == 'true'
    environment: ${{ github.event.inputs.environment || 'production' }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build project
        run: npm run build
        env:
          NODE_ENV: production

      - name: 🚀 Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ env.VERCEL_ORG_ID }}
          vercel-project-id: ${{ env.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./

  # 📊 Post-deploy checks
  post-deploy-checks:
    name: 📊 Post-deploy Checks
    runs-on: ubuntu-latest
    needs: [deploy]
    if: needs.pre-deploy-checks.outputs.should-deploy == 'true'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🎭 Install Playwright
        run: npx playwright install --with-deps

      - name: 🧪 Run smoke tests
        run: npm run test:e2e:smoke
        env:
          NODE_ENV: test
          NEXT_PUBLIC_DEV_MODE: 'true'
          NEXT_PUBLIC_DISABLE_EMAIL: 'true'
          TEST_EMAIL_DOMAIN: '@example.test'

  # 📢 Notify deployment
  notify:
    name: 📢 Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy, post-deploy-checks]
    if: always() && needs.pre-deploy-checks.outputs.should-deploy == 'true'
    steps:
      - name: 📢 Notify success
        if: needs.deploy.result == 'success' && needs.post-deploy-checks.result == 'success'
        run: |
          echo "🎉 Deployment successful!"
          echo "Environment: ${{ github.event.inputs.environment || 'production' }}"
          echo "Commit: ${{ github.sha }}"
          echo "Author: ${{ github.actor }}"

      - name: 📢 Notify failure
        if: needs.deploy.result == 'failure' || needs.post-deploy-checks.result == 'failure'
        run: |
          echo "❌ Deployment failed!"
          echo "Environment: ${{ github.event.inputs.environment || 'production' }}"
          echo "Commit: ${{ github.sha }}"
          echo "Author: ${{ github.actor }}"
