name: üìä Monitor Production

on:
  schedule:
    # –ó–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    - cron: '*/5 * * * *'
  workflow_dispatch:
    inputs:
      check_type:
        description: 'Type of check to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - health
          - performance
          - security

env:
  NODE_VERSION: '18'
  PRODUCTION_URL: 'https://personal-productivity-ai.vercel.app'

jobs:
  # üè• Health check
  health-check:
    name: üè• Health Check
    runs-on: ubuntu-latest
    if: github.event.inputs.check_type == 'all' || github.event.inputs.check_type == 'health' || github.event_name == 'schedule'
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üè• Check API health
        run: |
          echo "Checking API health..."
          curl -f -s -o /dev/null -w "%{http_code}" "${{ env.PRODUCTION_URL }}/api/test" || exit 1

      - name: üè• Check main page
        run: |
          echo "Checking main page..."
          curl -f -s -o /dev/null -w "%{http_code}" "${{ env.PRODUCTION_URL }}" || exit 1

      - name: üè• Check planner page
        run: |
          echo "Checking planner page..."
          curl -f -s -o /dev/null -w "%{http_code}" "${{ env.PRODUCTION_URL }}/planner" || exit 1

  # ‚ö° Performance check
  performance-check:
    name: ‚ö° Performance Check
    runs-on: ubuntu-latest
    if: github.event.inputs.check_type == 'all' || github.event.inputs.check_type == 'performance' || github.event_name == 'schedule'
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üì¶ Install dependencies
        run: npm ci

      - name: ‚ö° Run Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun --collect.url="${{ env.PRODUCTION_URL }}" --collect.url="${{ env.PRODUCTION_URL }}/planner"
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # üîí Security check
  security-check:
    name: üîí Security Check
    runs-on: ubuntu-latest
    if: github.event.inputs.check_type == 'all' || github.event.inputs.check_type == 'security' || github.event_name == 'schedule'
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üîí Run security audit
        run: npm audit --audit-level high

      - name: üîç Check for known vulnerabilities
        run: |
          echo "Checking for known vulnerabilities..."
          npm audit --audit-level moderate

  # üìä Generate report
  generate-report:
    name: üìä Generate Report
    runs-on: ubuntu-latest
    needs: [health-check, performance-check, security-check]
    if: always()
    steps:
      - name: üìä Generate monitoring report
        run: |
          echo "## üìä Production Monitoring Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üè• Health Check" >> $GITHUB_STEP_SUMMARY
          echo "Status: ${{ needs.health-check.result == 'success' && '‚úÖ Healthy' || '‚ùå Unhealthy' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ‚ö° Performance Check" >> $GITHUB_STEP_SUMMARY
          echo "Status: ${{ needs.performance-check.result == 'success' && '‚úÖ Good' || '‚ùå Issues' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîí Security Check" >> $GITHUB_STEP_SUMMARY
          echo "Status: ${{ needs.security-check.result == 'success' && '‚úÖ Secure' || '‚ùå Vulnerabilities' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìÖ Timestamp" >> $GITHUB_STEP_SUMMARY
          echo "Generated: $(date)" >> $GITHUB_STEP_SUMMARY

  # üö® Alert on issues
  alert:
    name: üö® Alert on Issues
    runs-on: ubuntu-latest
    needs: [health-check, performance-check, security-check]
    if: always() && (needs.health-check.result == 'failure' || needs.performance-check.result == 'failure' || needs.security-check.result == 'failure')
    steps:
      - name: üö® Send alert
        run: |
          echo "üö® Production monitoring detected issues!"
          echo "Health: ${{ needs.health-check.result }}"
          echo "Performance: ${{ needs.performance-check.result }}"
          echo "Security: ${{ needs.security-check.result }}"
          # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Slack, Discord, email –∏ —Ç.–¥.
