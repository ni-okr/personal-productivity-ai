{
    "agentConfig": {
        "name": "Personal Productivity AI Assistant",
        "description": "Специализированный ИИ ассистент для разработки Personal Productivity AI MVP",
        "capabilities": [
            "code-generation",
            "testing",
            "documentation",
            "debugging",
            "architecture-planning",
            "database-operations",
            "api-integration"
        ],
        "context": {
            "project": "Personal Productivity AI",
            "stage": "MVP Development",
            "tech_stack": [
                "Next.js 14",
                "TypeScript",
                "Tailwind CSS",
                "Supabase",
                "Zustand"
            ],
            "priorities": [
                "stability",
                "testing",
                "security",
                "performance"
            ]
        },
        "rules": [
            "Always use TypeScript with strict typing",
            "Write tests for all new functionality",
            "Follow security best practices (RLS, validation)",
            "Update documentation when making changes",
            "Use Error Boundaries for React components",
            "Prefer functional programming style",
            "Use Tailwind CSS for styling"
        ],
        "workflows": {
            "feature-development": [
                "Analyze requirements",
                "Design architecture",
                "Write tests first (TDD)",
                "Implement functionality",
                "Update documentation",
                "Run full test suite"
            ],
            "bug-fixing": [
                "Reproduce the issue",
                "Write failing test",
                "Fix the bug",
                "Ensure test passes",
                "Check for regressions"
            ],
            "refactoring": [
                "Ensure test coverage",
                "Refactor incrementally",
                "Run tests after each change",
                "Update documentation if needed"
            ]
        },
        "integrations": {
            "database": "Supabase PostgreSQL with RLS",
            "auth": "Supabase Auth",
            "testing": "Jest + Playwright + Allure",
            "deployment": "Vercel",
            "ai": "OpenAI GPT-4o Mini (planned)"
        },
        "planning": {
            "auto_breakdown": true,
            "task_estimation": true,
            "dependency_tracking": true,
            "progress_reporting": true,
            "risk_assessment": true
        },
        "automation": {
            "auto_commit": false,
            "auto_test": true,
            "auto_lint": true,
            "auto_format": true,
            "auto_docs": true
        },
        "background_agents": {
            "test_fixer": {
                "enabled": true,
                "description": "Автоматически исправляет ошибки в тестах",
                "triggers": [
                    "test_failure",
                    "typescript_error_in_tests",
                    "jest_error",
                    "testing_library_error"
                ],
                "actions": [
                    "fix_import_errors",
                    "fix_type_errors",
                    "fix_mock_issues",
                    "fix_assertion_errors",
                    "update_test_configuration"
                ],
                "patterns": [
                    "Property 'toBeInTheDocument' does not exist",
                    "Cannot find module 'vitest'",
                    "Cannot find name 'renderHook'",
                    "Type 'null' is not assignable to type 'string | undefined'",
                    "Argument of type.*is not assignable to parameter"
                ]
            },
            "typescript_fixer": {
                "enabled": true,
                "description": "Автоматически исправляет ошибки TypeScript",
                "triggers": [
                    "typescript_error",
                    "compilation_error",
                    "type_error"
                ],
                "actions": [
                    "fix_type_annotations",
                    "add_missing_imports",
                    "fix_interface_mismatches",
                    "resolve_type_conflicts"
                ]
            },
            "jest_configurator": {
                "enabled": true,
                "description": "Автоматически настраивает Jest конфигурацию",
                "triggers": [
                    "jest_setup_error",
                    "testing_library_error",
                    "jest_dom_error"
                ],
                "actions": [
                    "fix_jest_setup",
                    "update_jest_config",
                    "fix_test_imports",
                    "configure_testing_library"
                ]
            },
            "github_actions_monitor": {
                "enabled": true,
                "description": "Мониторит GitHub Actions и исправляет ошибки",
                "triggers": [
                    "github_actions_failure",
                    "workflow_error",
                    "ci_cd_error"
                ],
                "actions": [
                    "analyze_workflow_logs",
                    "fix_configuration_errors",
                    "update_dependencies",
                    "fix_environment_issues"
                ]
            }
        },
        "templates": {
            "component": {
                "path": "src/components/",
                "includes": [
                    "tsx",
                    "test",
                    "stories"
                ],
                "style": "functional"
            },
            "api": {
                "path": "src/app/api/",
                "includes": [
                    "route",
                    "test",
                    "schema"
                ],
                "validation": "zod"
            },
            "page": {
                "path": "src/app/",
                "includes": [
                    "page",
                    "layout",
                    "loading",
                    "error"
                ],
                "metadata": true
            }
        },
        "quality_gates": {
            "min_test_coverage": 80,
            "max_complexity": 10,
            "no_console_logs": true,
            "typescript_strict": true,
            "security_scan": true
        }
    }
}