---
description: –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –µ–¥–∏–Ω–æ–≥–æ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
globs: ["**/*.test.ts", "**/*.test.tsx", "**/*.spec.ts", "**/*.spec.tsx"]
alwaysApply: true
---

# üß™ –§—Ä–µ–π–º–≤–æ—Ä–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –ü–†–ê–í–ò–õ–ê

## üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û

**–í–°–ï –¢–ï–°–¢–´ –í –ü–†–û–ï–ö–¢–ï –î–û–õ–ñ–ù–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –ï–î–ò–ù–´–ô –§–†–ï–ô–ú–í–û–†–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø!**

–ù–∏–∫–∞–∫–∏—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π! –ù–∏–∫–∞–∫–∏—Ö –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤! –¢–æ–ª—å–∫–æ –µ–¥–∏–Ω—ã–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫!

## üéØ –û–°–ù–û–í–ù–´–ï –ü–†–ò–ù–¶–ò–ü–´

### –ï–¥–∏–Ω—ã–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
- **TestFramework** - –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
- **TestLogger** - –µ–¥–∏–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
- **TestMocks** - —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –º–æ–∫–∏
- **TestUtils** - –æ–±—â–∏–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤

### –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
```typescript
import { testFramework, testLogger, testMocks, testUtils } from '@/tests/framework'
```

## üìã –ü–†–ê–í–ò–õ–ê –ù–ê–ü–ò–°–ê–ù–ò–Ø –¢–ï–°–¢–û–í

### 1. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–µ—Å—Ç–æ–≤:
```typescript
import { testFramework, testLogger, testMocks, testUtils } from '@/tests/framework'

describe('ComponentName', () => {
  beforeEach(() => {
    testMocks.setupAllMocks()
    testLogger.startTest('ComponentName')
  })

  afterEach(() => {
    testMocks.clearAllMocks()
    testLogger.endTest('ComponentName', true)
  })

  test('should work correctly', async () => {
    // –¢–µ—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞
  })
})
```

### 2. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ:
```typescript
// –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π testLogger –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
testLogger.info('TEST', 'Starting test operation')
testLogger.debug('MOCK', 'Setting up mock data', { data })
testLogger.error('TEST', 'Test failed', { error })
testLogger.performance('API_CALL', 150, 100) // –æ–ø–µ—Ä–∞—Ü–∏—è, –≤—Ä–µ–º—è, –ø–æ—Ä–æ–≥
```

### 3. –ú–æ–∫–∏:
```typescript
// –ò—Å–ø–æ–ª—å–∑—É–π testMocks –¥–ª—è –≤—Å–µ—Ö –º–æ–∫–æ–≤
testMocks.addUser(mockUser)
testMocks.addTask(mockTask)
testMocks.mockApiResponse('/api/test', { success: true })
```

### 4. –£—Ç–∏–ª–∏—Ç—ã:
```typescript
// –ò—Å–ø–æ–ª—å–∑—É–π testUtils –¥–ª—è –æ–±—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
const user = testUtils.generateUser({ name: 'Test User' })
await testUtils.waitForState(() => state.user, expectedUser)
const result = testUtils.renderWithProviders(<Component />)
```

## üé® –î–ï–ö–û–†–ê–¢–û–†–´ –ò –•–£–ö–ò

### –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏:
```typescript
@TestSuite('UserManagement', TEST_CONFIGS.INTEGRATION, MOCK_CONFIGS.FULL)
class UserManagementTests {
  @TestCase('should create user', 'Creates a new user successfully')
  @WithMocks({ enableAuth: true, enableDatabase: true })
  async testCreateUser(context: TestContext) {
    // –¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞–µ—Ç context —Å logger, utils, config
  }

  @LogTest('should update user')
  @WithPerformance(100) // –ø–æ—Ä–æ–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  async testUpdateUser() {
    // –¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ª–æ–≥–∏—Ä—É–µ—Ç—Å—è –∏ –∏–∑–º–µ—Ä—è–µ—Ç—Å—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
  }
}
```

### –•—É–∫–∏ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:
```typescript
function MyComponent() {
  const { logger, utils, config } = useTestFramework()
  
  // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
  logger.debug('COMPONENT', 'Component rendered')
}
```

## üìä –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò

### –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:
```typescript
import { TEST_CONFIGS, MOCK_CONFIGS } from '@/tests/framework'

// Unit —Ç–µ—Å—Ç—ã
testFramework.updateConfig(TEST_CONFIGS.UNIT)
testMocks.updateConfig(MOCK_CONFIGS.MINIMAL)

// Integration —Ç–µ—Å—Ç—ã
testFramework.updateConfig(TEST_CONFIGS.INTEGRATION)
testMocks.updateConfig(MOCK_CONFIGS.FULL)

// E2E —Ç–µ—Å—Ç—ã
testFramework.updateConfig(TEST_CONFIGS.E2E)
testMocks.updateConfig(MOCK_CONFIGS.API_ONLY)
```

### –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:
```typescript
import { quickStart } from '@/tests/framework'

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è unit —Ç–µ—Å—Ç–æ–≤
quickStart.unit()

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è integration —Ç–µ—Å—Ç–æ–≤
quickStart.integration()

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è E2E —Ç–µ—Å—Ç–æ–≤
quickStart.e2e()
```

## üîß –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –¢–ï–°–¢–û–í

### –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:
```typescript
// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è–º–∏
const user = testUtils.generateUser({ name: 'Custom Name' })
const task = testUtils.generateTask({ priority: 'high' })
const subscription = testUtils.generateSubscription({ tier: 'premium' })
```

### –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:
```typescript
// –û–∂–∏–¥–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
await testUtils.waitForState(() => store.user, expectedUser)

// –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
const element = await testUtils.waitForElement(() => screen.getByText('Text'))

// –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏—è
await testUtils.waitForCondition(() => condition === true)
```

### –†–∞–±–æ—Ç–∞ —Å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é:
```typescript
// –ò–∑–º–µ—Ä–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
const { result, duration } = await testUtils.measurePerformance(
  () => expensiveOperation(),
  'expensive_operation',
  100 // –ø–æ—Ä–æ–≥ –≤ –º—Å
)
```

## üéØ –ü–ê–¢–¢–ï–†–ù–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø

### 1. –¢–µ—Å—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞:
```typescript
test('should render component', async () => {
  const { getByText } = testUtils.renderWithProviders(<Component />)
  
  testLogger.step('Rendering component')
  expect(getByText('Expected Text')).toBeInTheDocument()
  
  testLogger.assertion('Component rendered correctly', true)
})
```

### 2. –¢–µ—Å—Ç —Ö—É–∫–∞:
```typescript
test('should return user data', async () => {
  const mockUser = testUtils.generateUser()
  testMocks.mockAuthUser(mockUser)
  
  const { result } = renderHook(() => useAuth())
  
  await testUtils.waitForState(() => result.current.user, mockUser)
  
  testLogger.assertion('User data loaded', true, mockUser, result.current.user)
})
```

### 3. –¢–µ—Å—Ç API:
```typescript
test('should call API endpoint', async () => {
  testUtils.mockApiResponse('/api/users', { users: [] })
  
  const response = await fetch('/api/users')
  const data = await response.json()
  
  testLogger.api('/api/users', 'GET', 200, data)
  expect(data.users).toEqual([])
})
```

## üö® –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö

### –û–∂–∏–¥–∞–Ω–∏–µ –æ—à–∏–±–æ–∫:
```typescript
test('should handle errors', async () => {
  await testUtils.expectToThrow(
    () => operationThatThrows(),
    'Expected error message'
  )
})
```

### –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫:
```typescript
try {
  await riskyOperation()
} catch (error) {
  testLogger.error('OPERATION', 'Operation failed', { error })
  throw error
}
```

## üìà –ú–û–ù–ò–¢–û–†–ò–ù–ì –ò –û–¢–ß–ï–¢–´

### –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:
```typescript
// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–∞
@WithPerformance(100)
async function slowOperation() {
  // –û–ø–µ—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–º–µ—Ä–µ–Ω–∞
}
```

### –≠–∫—Å–ø–æ—Ä—Ç –≤ Allure:
```typescript
// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —ç–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤ –≤ Allure
const allureLogs = testLogger.exportToAllure()
```

## üîÑ –ú–ò–ì–†–ê–¶–ò–Ø –°–£–©–ï–°–¢–í–£–Æ–©–ò–• –¢–ï–°–¢–û–í

### –®–∞–≥ 1: –ò–º–ø–æ—Ä—Ç —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞
```typescript
// –ó–∞–º–µ–Ω–∏—Ç—å
import { render, screen } from '@testing-library/react'

// –ù–∞
import { testFramework, testLogger, testMocks, testUtils } from '@/tests/framework'
```

### –®–∞–≥ 2: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
```typescript
// –ó–∞–º–µ–Ω–∏—Ç—å
const { getByText } = render(<Component />)

// –ù–∞
const { getByText } = testUtils.renderWithProviders(<Component />)
```

### –®–∞–≥ 3: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
```typescript
// –î–æ–±–∞–≤–∏—Ç—å –≤ –Ω–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞
testLogger.startTest('Test Name')

// –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–Ω–µ—Ü —Ç–µ—Å—Ç–∞
testLogger.endTest('Test Name', true)
```

### –®–∞–≥ 4: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–æ–∫–æ–≤
```typescript
// –ó–∞–º–µ–Ω–∏—Ç—å —Ä—É—á–Ω—ã–µ –º–æ–∫–∏
jest.mock('@/lib/auth')

// –ù–∞
testMocks.setupAllMocks()
```

## üéâ –õ–£–ß–®–ò–ï –ü–†–ê–ö–¢–ò–ö–ò

### 1. –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫:
- –ù–ï –ø–∏—à–∏ —Ç–µ—Å—Ç—ã –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –ø—Ä—è–º—ã–µ –≤—ã–∑–æ–≤—ã console.log
- –ù–ï —Å–æ–∑–¥–∞–≤–∞–π –º–æ–∫–∏ –≤—Ä—É—á–Ω—É—é

### 2. –õ–æ–≥–∏—Ä—É–π –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:
- –ù–∞—á–∏–Ω–∞–π —Ç–µ—Å—Ç —Å testLogger.startTest()
- –ó–∞–∫–∞–Ω—á–∏–≤–∞–π —Ç–µ—Å—Ç —Å testLogger.endTest()
- –õ–æ–≥–∏—Ä—É–π –≤–∞–∂–Ω—ã–µ —à–∞–≥–∏ —Å testLogger.step()

### 3. –ò—Å–ø–æ–ª—å–∑—É–π —É—Ç–∏–ª–∏—Ç—ã:
- –ì–µ–Ω–µ—Ä–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ testUtils.generate*()
- –û–∂–∏–¥–∞–π –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ testUtils.waitFor*()
- –ò–∑–º–µ—Ä—è–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ testUtils.measurePerformance()

### 4. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–π –º–æ–∫–∏:
- –ò—Å–ø–æ–ª—å–∑—É–π testMocks.setupAllMocks() –≤ beforeEach
- –ò—Å–ø–æ–ª—å–∑—É–π testMocks.clearAllMocks() –≤ afterEach
- –î–æ–±–∞–≤–ª—è–π –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ testMocks.add*()

## üöÄ –ú–ê–°–®–¢–ê–ë–ò–†–û–í–ê–ù–ò–ï

### –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–∏–ø–æ–≤ —Ç–µ—Å—Ç–æ–≤:
1. –°–æ–∑–¥–∞–π –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ TEST_CONFIGS
2. –°–æ–∑–¥–∞–π –Ω–æ–≤—ã–π mock config –≤ MOCK_CONFIGS
3. –î–æ–±–∞–≤—å quickStart —Ñ—É–Ω–∫—Ü–∏—é
4. –û–±–Ω–æ–≤–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é

### –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —É—Ç–∏–ª–∏—Ç:
1. –î–æ–±–∞–≤—å –º–µ—Ç–æ–¥ –≤ TestUtils –∫–ª–∞—Å—Å
2. –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π –≤ index.ts
3. –°–æ–∑–¥–∞–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
4. –û–±–Ω–æ–≤–∏ –ø—Ä–∞–≤–∏–ª–∞

## üö´ –ó–ê–ü–†–ï–©–ï–ù–û

### ‚ùå –ù–ï –î–ï–õ–ê–ô:
- –ù–ï –ø–∏—à–∏ —Ç–µ—Å—Ç—ã –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –µ–¥–∏–Ω–æ–≥–æ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –ø—Ä—è–º—ã–µ –≤—ã–∑–æ–≤—ã `render()`, `waitFor()`, `act()` –∏–∑ `@testing-library/react`
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π `console.log`, `console.error`, `console.warn` –≤ —Ç–µ—Å—Ç–∞—Ö
- –ù–ï —Å–æ–∑–¥–∞–≤–∞–π –º–æ–∫–∏ –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ `jest.mock()`
- –ù–ï –ø–∏—à–∏ —Ç–µ—Å—Ç—ã –±–µ–∑ `testLogger.startTest()` –∏ `testLogger.endTest()`
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π —Å—Ç–∞—Ä—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

### ‚úÖ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –î–ï–õ–ê–ô:
- –í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–π `testFramework`, `testLogger`, `testMocks`, `testUtils`
- –í–°–ï–ì–î–ê –Ω–∞—á–∏–Ω–∞–π —Ç–µ—Å—Ç —Å `testLogger.startTest()`
- –í–°–ï–ì–î–ê –∑–∞–∫–∞–Ω—á–∏–≤–∞–π —Ç–µ—Å—Ç —Å `testLogger.endTest()`
- –í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–π `testUtils.renderWithProviders()` –≤–º–µ—Å—Ç–æ `render()`
- –í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–π `testUtils.waitForState()` –≤–º–µ—Å—Ç–æ `waitFor()`
- –í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–π `testUtils.act()` –≤–º–µ—Å—Ç–æ `act()`
- –í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–π `testMocks.setupAllMocks()` –≤ `beforeEach`
- –í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–π `testMocks.clearAllMocks()` –≤ `afterEach`

## üîç –ü–†–û–í–ï–†–ö–ê –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø

### –ü–µ—Ä–µ–¥ –∫–æ–º–º–∏—Ç–æ–º –ø—Ä–æ–≤–µ—Ä—å:
1. –í—Å–µ –ª–∏ —Ç–µ—Å—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç –µ–¥–∏–Ω—ã–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫?
2. –ï—Å—Ç—å –ª–∏ –ø—Ä—è–º—ã–µ –≤—ã–∑–æ–≤—ã `@testing-library/react`?
3. –ï—Å—Ç—å –ª–∏ `console.log` –≤ —Ç–µ—Å—Ç–∞—Ö?
4. –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã –ª–∏ –º–æ–∫–∏ —á–µ—Ä–µ–∑ `testMocks`?
5. –ï—Å—Ç—å –ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ `testLogger`?

### –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:
```bash
# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫—É
npm run test:framework:check

# –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã
npm test

# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∫—Ä—ã—Ç–∏–µ
npm run test:coverage
```

## üìã –®–ê–ë–õ–û–ù –ù–û–í–û–ì–û –¢–ï–°–¢–ê

```typescript
/**
 * üß™ [–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞] - –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–π –µ–¥–∏–Ω—ã–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫!
 */

import { testFramework, testLogger, testMocks, testUtils } from '@/tests/framework'
import { TEST_CONFIGS, MOCK_CONFIGS } from '@/tests/framework'

describe('ComponentName', () => {
  beforeEach(() => {
    // –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞
    testFramework.updateConfig(TEST_CONFIGS.UNIT) // –∏–ª–∏ INTEGRATION, E2E
    testMocks.updateConfig(MOCK_CONFIGS.MINIMAL) // –∏–ª–∏ FULL, API_ONLY
    testMocks.setupAllMocks()
    testLogger.startTest('ComponentName')
  })

  afterEach(() => {
    // –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û: –û—á–∏—Å—Ç–∫–∞
    testMocks.clearAllMocks()
    testLogger.endTest('ComponentName', true)
  })

  test('should work correctly', async () => {
    // –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û: –ò—Å–ø–æ–ª—å–∑—É–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫
    const mockUser = testUtils.generateUser()
    testMocks.addUser(mockUser)
    
    const { getByText } = testUtils.renderWithProviders(<Component />)
    
    testLogger.step('Testing component')
    await testUtils.waitForElement(() => getByText('Expected Text'))
    
    testLogger.assertion('Component works correctly', true)
    expect(getByText('Expected Text')).toBeInTheDocument()
  })
})
```

## üéØ –¶–ï–õ–ò –ò –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê

### –ó–∞—á–µ–º –µ–¥–∏–Ω—ã–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫:
- **–ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å**: –≤—Å–µ —Ç–µ—Å—Ç—ã –≤—ã–≥–ª—è–¥—è—Ç –æ–¥–∏–Ω–∞–∫–æ–≤–æ
- **–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å**: –ª–µ–≥–∫–æ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —Ç–µ—Å—Ç—ã
- **–û—Ç–ª–∞–¥–∫–∞**: –µ–¥–∏–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
- **–ü–æ–¥–¥–µ—Ä–∂–∫–∞**: —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
- **–ö–∞—á–µ—Å—Ç–≤–æ**: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã

### –ß—Ç–æ –¥–∞–µ—Ç —Ñ—Ä–µ–π–º–≤–æ—Ä–∫:
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
- –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –º–æ–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º
- –û–±—â–∏–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
- –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
- –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Allure –∏ –¥—Ä—É–≥–∏–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏

---

**üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –§—Ä–µ–π–º–≤–æ—Ä–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - —ç—Ç–æ –Ω–µ –æ–ø—Ü–∏—è, –∞ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û–°–¢–¨! –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã! üß™**

## –®–∞–±–ª–æ–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–≤–æ–π–Ω–∏–∫–æ–≤ (Test Doubles Patterns)

- **–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–≥–ª—É—à–∫–∞ (Test Stub)** ‚Äì –ø—Ä–æ—Å—Ç–æ–π stub, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞—Ä–∞–Ω–µ–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –ª–æ–≥–∏–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ –∫–æ–¥–∞ –æ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.
- **–¢–µ—Å—Ç–æ–≤—ã–π –∞–≥–µ–Ω—Ç (Test Spy)** ‚Äì –æ–±—ä–µ–∫—Ç, –æ–±–æ—Ä–∞—á–∏–≤–∞—é—â–∏–π —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—ã–∑–æ–≤–∞—Ö (—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑, —Å –∫–∞–∫–∏–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏).
- **–ü–æ–¥—Å—Ç–∞–≤–Ω–æ–π –æ–±—ä–µ–∫—Ç (Mock Object)** ‚Äì –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å, –∫–∞–∫–∏–µ –º–µ—Ç–æ–¥—ã –±—ã–ª–∏ –≤—ã–∑–≤–∞–Ω—ã –∏ —Å –∫–∞–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.
- **–ü–æ–¥–¥–µ–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç (Fake Object)** ‚Äì in-memory —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Å–æ —Å–≤–æ–µ–π —É–ø—Ä–æ—â—ë–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π, –ø—Ä–∏–±–ª–∏–∂—ë–Ω–Ω–æ–π –∫ —Ä–µ–∞–ª—å–Ω–æ–π, –Ω–æ –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤.
- **–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –¥–≤–æ–π–Ω–∏–∫ (Configurable Test Double)** ‚Äì –∫–æ–º–±–∏–Ω–∏—Ä—É–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ stub –∏ fake, –ø–æ–∑–≤–æ–ª—è—è –≤ —Ç–µ—Å—Ç–∞—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Ä–∞–∑–Ω—ã–µ —É—Å–ª–æ–≤–∏—è.
- **–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –¥–≤–æ–π–Ω–∏–∫ (Hard-Coded Test Double)** ‚Äì stub —Å –∂—ë—Å—Ç–∫–æ –∑–∞—à–∏—Ç—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏, –Ω–µ –ø–æ–¥–∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞.
- **–ü–æ–¥–∫–ª–∞—Å—Å, —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π –¥–ª—è —Ç–µ—Å—Ç–∞ (Test-Specific Subclass)** ‚Äì –Ω–∞—Å–ª–µ–¥–Ω–∏–∫ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞, —Ä–µ–∞–ª–∏–∑—É—é—â–∏–π –∏–ª–∏ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–π –º–µ—Ç–æ–¥—ã –¥–ª—è —Ü–µ–ª–µ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞.