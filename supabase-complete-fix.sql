-- üîß –ü–û–õ–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°–•–ï–ú–´ –ë–ê–ó–´ –î–ê–ù–ù–´–•
-- –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏

-- 1. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É subscriptions (–µ—Å–ª–∏ –µ—Å—Ç—å)
DROP TABLE IF EXISTS public.subscriptions CASCADE;

-- 2. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É subscriptions –¥–ª—è EMAIL –†–ê–°–°–´–õ–ö–ò
CREATE TABLE public.subscriptions (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    email VARCHAR(255) NOT NULL UNIQUE,
    source VARCHAR(100) DEFAULT 'landing_page',
    subscribed_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 3. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É user_subscriptions –¥–ª—è –ü–õ–ê–¢–ù–´–• –ü–û–î–ü–ò–°–û–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
CREATE TABLE public.user_subscriptions (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    user_id UUID NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
    tier VARCHAR(20) NOT NULL CHECK (tier IN ('free', 'premium', 'pro', 'enterprise')),
    status VARCHAR(20) NOT NULL CHECK (status IN ('active', 'canceled', 'past_due', 'unpaid', 'trialing')),
    stripe_customer_id VARCHAR(255),
    stripe_subscription_id VARCHAR(255),
    current_period_start TIMESTAMP WITH TIME ZONE,
    current_period_end TIMESTAMP WITH TIME ZONE,
    cancel_at_period_end BOOLEAN DEFAULT false,
    trial_end TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(user_id)
);

-- 4. –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è subscriptions (email —Ä–∞—Å—Å—ã–ª–∫–∞)
CREATE INDEX idx_subscriptions_email ON public.subscriptions(email);
CREATE INDEX idx_subscriptions_is_active ON public.subscriptions(is_active);
CREATE INDEX idx_subscriptions_created_at ON public.subscriptions(created_at);

-- 5. –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è user_subscriptions (–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏)
CREATE INDEX idx_user_subscriptions_user_id ON public.user_subscriptions(user_id);
CREATE INDEX idx_user_subscriptions_tier ON public.user_subscriptions(tier);
CREATE INDEX idx_user_subscriptions_status ON public.user_subscriptions(status);
CREATE INDEX idx_user_subscriptions_stripe_customer_id ON public.user_subscriptions(stripe_customer_id);

-- 6. –í–∫–ª—é—á–∞–µ–º RLS –¥–ª—è –æ–±–µ–∏—Ö —Ç–∞–±–ª–∏—Ü
ALTER TABLE public.subscriptions ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_subscriptions ENABLE ROW LEVEL SECURITY;

-- 7. RLS –ø–æ–ª–∏—Ç–∏–∫–∏ –¥–ª—è subscriptions (email —Ä–∞—Å—Å—ã–ª–∫–∞)
CREATE POLICY "Anyone can insert subscriptions" ON public.subscriptions
    FOR INSERT WITH CHECK (true);

CREATE POLICY "Anyone can select subscriptions" ON public.subscriptions
    FOR SELECT USING (true);

CREATE POLICY "Anyone can update subscriptions" ON public.subscriptions
    FOR UPDATE USING (true);

-- 8. RLS –ø–æ–ª–∏—Ç–∏–∫–∏ –¥–ª—è user_subscriptions (–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏)
CREATE POLICY "Users can view own subscriptions" ON public.user_subscriptions
    FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can insert own subscriptions" ON public.user_subscriptions
    FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update own subscriptions" ON public.user_subscriptions
    FOR UPDATE USING (auth.uid() = user_id);

-- 9. –°–æ–∑–¥–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è updated_at
CREATE OR REPLACE FUNCTION update_subscriptions_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION update_user_subscriptions_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_subscriptions_updated_at
    BEFORE UPDATE ON public.subscriptions
    FOR EACH ROW
    EXECUTE FUNCTION update_subscriptions_updated_at();

CREATE TRIGGER update_user_subscriptions_updated_at
    BEFORE UPDATE ON public.user_subscriptions
    FOR EACH ROW
    EXECUTE FUNCTION update_user_subscriptions_updated_at();

-- 10. –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
COMMENT ON TABLE public.subscriptions IS 'Email –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏';
COMMENT ON TABLE public.user_subscriptions IS '–ü–ª–∞—Ç–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π';

COMMENT ON COLUMN public.subscriptions.email IS 'Email –∞–¥—Ä–µ—Å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞';
COMMENT ON COLUMN public.subscriptions.source IS '–ò—Å—Ç–æ—á–Ω–∏–∫ –ø–æ–¥–ø–∏—Å–∫–∏ (landing_page, api, etc.)';
COMMENT ON COLUMN public.subscriptions.is_active IS '–ê–∫—Ç–∏–≤–Ω–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞';

COMMENT ON COLUMN public.user_subscriptions.tier IS '–£—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏ (free, premium, pro, enterprise)';
COMMENT ON COLUMN public.user_subscriptions.status IS '–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ (active, canceled, past_due, unpaid, trialing)';
COMMENT ON COLUMN public.user_subscriptions.stripe_customer_id IS 'ID –∫–ª–∏–µ–Ω—Ç–∞ –≤ Stripe';
COMMENT ON COLUMN public.user_subscriptions.stripe_subscription_id IS 'ID –ø–æ–¥–ø–∏—Å–∫–∏ –≤ Stripe';

-- 11. –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ free –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
INSERT INTO public.user_subscriptions (user_id, tier, status, current_period_start, current_period_end)
SELECT 
    id as user_id,
    'free' as tier,
    'active' as status,
    NOW() as current_period_start,
    NOW() + INTERVAL '1 year' as current_period_end
FROM public.users
WHERE id NOT IN (SELECT user_id FROM public.user_subscriptions);

-- ‚úÖ –ì–û–¢–û–í–û! –¢–µ–ø–µ—Ä—å —É –Ω–∞—Å –µ—Å—Ç—å:
-- - subscriptions: –¥–ª—è email —Ä–∞—Å—Å—ã–ª–∫–∏ (email, is_active, source)
-- - user_subscriptions: –¥–ª—è –ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (user_id, tier, status, stripe_*)
